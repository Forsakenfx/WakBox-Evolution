// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dungeon_ladder.proto

#ifndef PROTOBUF_dungeon_5fladder_2eproto__INCLUDED
#define PROTOBUF_dungeon_5fladder_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
class CompositionInfo;
class CompositionInfoDefaultTypeInternal;
extern CompositionInfoDefaultTypeInternal _CompositionInfo_default_instance_;
class CompositionInfoData;
class CompositionInfoDataDefaultTypeInternal;
extern CompositionInfoDataDefaultTypeInternal _CompositionInfoData_default_instance_;
class RankingInfo;
class RankingInfoDefaultTypeInternal;
extern RankingInfoDefaultTypeInternal _RankingInfo_default_instance_;
class TeamInfo;
class TeamInfoDefaultTypeInternal;
extern TeamInfoDefaultTypeInternal _TeamInfo_default_instance_;

namespace protobuf_dungeon_5fladder_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_dungeon_5fladder_2eproto

enum LadderType {
  CURRENT_MONTH = 1,
  LAST_MONTH = 2,
  ALL_TIME = 3
};
bool LadderType_IsValid(int value);
const LadderType LadderType_MIN = CURRENT_MONTH;
const LadderType LadderType_MAX = ALL_TIME;
const int LadderType_ARRAYSIZE = LadderType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LadderType_descriptor();
inline const ::std::string& LadderType_Name(LadderType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LadderType_descriptor(), value);
}
inline bool LadderType_Parse(
    const ::std::string& name, LadderType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LadderType>(
    LadderType_descriptor(), name, value);
}
// ===================================================================

class TeamInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TeamInfo) */ {
 public:
  TeamInfo();
  virtual ~TeamInfo();

  TeamInfo(const TeamInfo& from);

  inline TeamInfo& operator=(const TeamInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamInfo& default_instance();

  static inline const TeamInfo* internal_default_instance() {
    return reinterpret_cast<const TeamInfo*>(
               &_TeamInfo_default_instance_);
  }

  void Swap(TeamInfo* other);

  // implements Message ----------------------------------------------

  inline TeamInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamInfo& from);
  void MergeFrom(const TeamInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CompositionInfo compositionInfo = 8;
  bool has_compositioninfo() const;
  void clear_compositioninfo();
  static const int kCompositionInfoFieldNumber = 8;
  const ::CompositionInfo& compositioninfo() const;
  ::CompositionInfo* mutable_compositioninfo();
  ::CompositionInfo* release_compositioninfo();
  void set_allocated_compositioninfo(::CompositionInfo* compositioninfo);

  // required int32 dungeonId = 1;
  bool has_dungeonid() const;
  void clear_dungeonid();
  static const int kDungeonIdFieldNumber = 1;
  ::google::protobuf::int32 dungeonid() const;
  void set_dungeonid(::google::protobuf::int32 value);

  // optional int32 stasisLevel = 4;
  bool has_stasislevel() const;
  void clear_stasislevel();
  static const int kStasisLevelFieldNumber = 4;
  ::google::protobuf::int32 stasislevel() const;
  void set_stasislevel(::google::protobuf::int32 value);

  // optional int64 teamId = 3;
  bool has_teamid() const;
  void clear_teamid();
  static const int kTeamIdFieldNumber = 3;
  ::google::protobuf::int64 teamid() const;
  void set_teamid(::google::protobuf::int64 value);

  // optional int64 registrationDate = 5;
  bool has_registrationdate() const;
  void clear_registrationdate();
  static const int kRegistrationDateFieldNumber = 5;
  ::google::protobuf::int64 registrationdate() const;
  void set_registrationdate(::google::protobuf::int64 value);

  // optional int32 dungeonTurnCount = 6;
  bool has_dungeonturncount() const;
  void clear_dungeonturncount();
  static const int kDungeonTurnCountFieldNumber = 6;
  ::google::protobuf::int32 dungeonturncount() const;
  void set_dungeonturncount(::google::protobuf::int32 value);

  // optional int32 bossTurnCount = 7;
  bool has_bossturncount() const;
  void clear_bossturncount();
  static const int kBossTurnCountFieldNumber = 7;
  ::google::protobuf::int32 bossturncount() const;
  void set_bossturncount(::google::protobuf::int32 value);

  // optional .LadderType ladderType = 2;
  bool has_laddertype() const;
  void clear_laddertype();
  static const int kLadderTypeFieldNumber = 2;
  ::LadderType laddertype() const;
  void set_laddertype(::LadderType value);

  // @@protoc_insertion_point(class_scope:TeamInfo)
 private:
  void set_has_dungeonid();
  void clear_has_dungeonid();
  void set_has_laddertype();
  void clear_has_laddertype();
  void set_has_teamid();
  void clear_has_teamid();
  void set_has_stasislevel();
  void clear_has_stasislevel();
  void set_has_registrationdate();
  void clear_has_registrationdate();
  void set_has_dungeonturncount();
  void clear_has_dungeonturncount();
  void set_has_bossturncount();
  void clear_has_bossturncount();
  void set_has_compositioninfo();
  void clear_has_compositioninfo();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::CompositionInfo* compositioninfo_;
  ::google::protobuf::int32 dungeonid_;
  ::google::protobuf::int32 stasislevel_;
  ::google::protobuf::int64 teamid_;
  ::google::protobuf::int64 registrationdate_;
  ::google::protobuf::int32 dungeonturncount_;
  ::google::protobuf::int32 bossturncount_;
  int laddertype_;
  friend struct  protobuf_dungeon_5fladder_2eproto::TableStruct;
};
// -------------------------------------------------------------------


// -------------------------------------------------------------------

class CompositionInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CompositionInfo) */ {
 public:
  CompositionInfo();
  virtual ~CompositionInfo();

  CompositionInfo(const CompositionInfo& from);

  inline CompositionInfo& operator=(const CompositionInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CompositionInfo& default_instance();

  static inline const CompositionInfo* internal_default_instance() {
    return reinterpret_cast<const CompositionInfo*>(
               &_CompositionInfo_default_instance_);
  }

  void Swap(CompositionInfo* other);

  // implements Message ----------------------------------------------

  inline CompositionInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  CompositionInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CompositionInfo& from);
  void MergeFrom(const CompositionInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CompositionInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<int64, .CompositionInfoData> infoByCharacterId = 1;
  int infobycharacterid_size() const;
  void clear_infobycharacterid();
  static const int kInfoByCharacterIdFieldNumber = 1;
  const ::google::protobuf::Map< ::google::protobuf::int64, ::CompositionInfoData >&
      infobycharacterid() const;
  ::google::protobuf::Map< ::google::protobuf::int64, ::CompositionInfoData >*
      mutable_infobycharacterid();

  // @@protoc_insertion_point(class_scope:CompositionInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::google::protobuf::int64, ::CompositionInfoData,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      CompositionInfo_InfoByCharacterIdEntry;
  ::google::protobuf::internal::MapField<
      ::google::protobuf::int64, ::CompositionInfoData,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > infobycharacterid_;
  friend struct  protobuf_dungeon_5fladder_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CompositionInfoData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CompositionInfoData) */ {
 public:
  CompositionInfoData();
  virtual ~CompositionInfoData();

  CompositionInfoData(const CompositionInfoData& from);

  inline CompositionInfoData& operator=(const CompositionInfoData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CompositionInfoData& default_instance();

  static inline const CompositionInfoData* internal_default_instance() {
    return reinterpret_cast<const CompositionInfoData*>(
               &_CompositionInfoData_default_instance_);
  }

  void Swap(CompositionInfoData* other);

  // implements Message ----------------------------------------------

  inline CompositionInfoData* New() const PROTOBUF_FINAL { return New(NULL); }

  CompositionInfoData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CompositionInfoData& from);
  void MergeFrom(const CompositionInfoData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CompositionInfoData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string guildName = 6;
  bool has_guildname() const;
  void clear_guildname();
  static const int kGuildNameFieldNumber = 6;
  const ::std::string& guildname() const;
  void set_guildname(const ::std::string& value);
  #if LANG_CXX11
  void set_guildname(::std::string&& value);
  #endif
  void set_guildname(const char* value);
  void set_guildname(const char* value, size_t size);
  ::std::string* mutable_guildname();
  ::std::string* release_guildname();
  void set_allocated_guildname(::std::string* guildname);

  // required int32 breedId = 1;
  bool has_breedid() const;
  void clear_breedid();
  static const int kBreedIdFieldNumber = 1;
  ::google::protobuf::int32 breedid() const;
  void set_breedid(::google::protobuf::int32 value);

  // optional bool isBestRecord = 2;
  bool has_isbestrecord() const;
  void clear_isbestrecord();
  static const int kIsBestRecordFieldNumber = 2;
  bool isbestrecord() const;
  void set_isbestrecord(bool value);

  // optional int64 guildBlazon = 5;
  bool has_guildblazon() const;
  void clear_guildblazon();
  static const int kGuildBlazonFieldNumber = 5;
  ::google::protobuf::int64 guildblazon() const;
  void set_guildblazon(::google::protobuf::int64 value);

  // optional int32 sex = 4;
  bool has_sex() const;
  void clear_sex();
  static const int kSexFieldNumber = 4;
  ::google::protobuf::int32 sex() const;
  void set_sex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CompositionInfoData)
 private:
  void set_has_breedid();
  void clear_has_breedid();
  void set_has_isbestrecord();
  void clear_has_isbestrecord();
  void set_has_name();
  void clear_has_name();
  void set_has_sex();
  void clear_has_sex();
  void set_has_guildblazon();
  void clear_has_guildblazon();
  void set_has_guildname();
  void clear_has_guildname();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr guildname_;
  ::google::protobuf::int32 breedid_;
  bool isbestrecord_;
  ::google::protobuf::int64 guildblazon_;
  ::google::protobuf::int32 sex_;
  friend struct  protobuf_dungeon_5fladder_2eproto::TableStruct;
};
// -------------------------------------------------------------------


// -------------------------------------------------------------------

class RankingInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RankingInfo) */ {
 public:
  RankingInfo();
  virtual ~RankingInfo();

  RankingInfo(const RankingInfo& from);

  inline RankingInfo& operator=(const RankingInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RankingInfo& default_instance();

  static inline const RankingInfo* internal_default_instance() {
    return reinterpret_cast<const RankingInfo*>(
               &_RankingInfo_default_instance_);
  }

  void Swap(RankingInfo* other);

  // implements Message ----------------------------------------------

  inline RankingInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  RankingInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RankingInfo& from);
  void MergeFrom(const RankingInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RankingInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<int32, .TeamInfo> teams = 4;
  int teams_size() const;
  void clear_teams();
  static const int kTeamsFieldNumber = 4;
  const ::google::protobuf::Map< ::google::protobuf::int32, ::TeamInfo >&
      teams() const;
  ::google::protobuf::Map< ::google::protobuf::int32, ::TeamInfo >*
      mutable_teams();

  // required int32 startIndex = 1;
  bool has_startindex() const;
  void clear_startindex();
  static const int kStartIndexFieldNumber = 1;
  ::google::protobuf::int32 startindex() const;
  void set_startindex(::google::protobuf::int32 value);

  // required int32 totalIndexCount = 2;
  bool has_totalindexcount() const;
  void clear_totalindexcount();
  static const int kTotalIndexCountFieldNumber = 2;
  ::google::protobuf::int32 totalindexcount() const;
  void set_totalindexcount(::google::protobuf::int32 value);

  // optional int32 firstTeamFirstIndex = 3;
  bool has_firstteamfirstindex() const;
  void clear_firstteamfirstindex();
  static const int kFirstTeamFirstIndexFieldNumber = 3;
  ::google::protobuf::int32 firstteamfirstindex() const;
  void set_firstteamfirstindex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RankingInfo)
 private:
  void set_has_startindex();
  void clear_has_startindex();
  void set_has_totalindexcount();
  void clear_has_totalindexcount();
  void set_has_firstteamfirstindex();
  void clear_has_firstteamfirstindex();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::google::protobuf::int32, ::TeamInfo,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      RankingInfo_TeamsEntry;
  ::google::protobuf::internal::MapField<
      ::google::protobuf::int32, ::TeamInfo,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > teams_;
  ::google::protobuf::int32 startindex_;
  ::google::protobuf::int32 totalindexcount_;
  ::google::protobuf::int32 firstteamfirstindex_;
  friend struct  protobuf_dungeon_5fladder_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamInfo

// required int32 dungeonId = 1;
inline bool TeamInfo::has_dungeonid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamInfo::set_has_dungeonid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamInfo::clear_has_dungeonid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeamInfo::clear_dungeonid() {
  dungeonid_ = 0;
  clear_has_dungeonid();
}
inline ::google::protobuf::int32 TeamInfo::dungeonid() const {
  // @@protoc_insertion_point(field_get:TeamInfo.dungeonId)
  return dungeonid_;
}
inline void TeamInfo::set_dungeonid(::google::protobuf::int32 value) {
  set_has_dungeonid();
  dungeonid_ = value;
  // @@protoc_insertion_point(field_set:TeamInfo.dungeonId)
}

// optional .LadderType ladderType = 2;
inline bool TeamInfo::has_laddertype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TeamInfo::set_has_laddertype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TeamInfo::clear_has_laddertype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TeamInfo::clear_laddertype() {
  laddertype_ = 1;
  clear_has_laddertype();
}
inline ::LadderType TeamInfo::laddertype() const {
  // @@protoc_insertion_point(field_get:TeamInfo.ladderType)
  return static_cast< ::LadderType >(laddertype_);
}
inline void TeamInfo::set_laddertype(::LadderType value) {
  assert(::LadderType_IsValid(value));
  set_has_laddertype();
  laddertype_ = value;
  // @@protoc_insertion_point(field_set:TeamInfo.ladderType)
}

// optional int64 teamId = 3;
inline bool TeamInfo::has_teamid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TeamInfo::set_has_teamid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TeamInfo::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TeamInfo::clear_teamid() {
  teamid_ = GOOGLE_LONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::int64 TeamInfo::teamid() const {
  // @@protoc_insertion_point(field_get:TeamInfo.teamId)
  return teamid_;
}
inline void TeamInfo::set_teamid(::google::protobuf::int64 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:TeamInfo.teamId)
}

// optional int32 stasisLevel = 4;
inline bool TeamInfo::has_stasislevel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TeamInfo::set_has_stasislevel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TeamInfo::clear_has_stasislevel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TeamInfo::clear_stasislevel() {
  stasislevel_ = 0;
  clear_has_stasislevel();
}
inline ::google::protobuf::int32 TeamInfo::stasislevel() const {
  // @@protoc_insertion_point(field_get:TeamInfo.stasisLevel)
  return stasislevel_;
}
inline void TeamInfo::set_stasislevel(::google::protobuf::int32 value) {
  set_has_stasislevel();
  stasislevel_ = value;
  // @@protoc_insertion_point(field_set:TeamInfo.stasisLevel)
}

// optional int64 registrationDate = 5;
inline bool TeamInfo::has_registrationdate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TeamInfo::set_has_registrationdate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TeamInfo::clear_has_registrationdate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TeamInfo::clear_registrationdate() {
  registrationdate_ = GOOGLE_LONGLONG(0);
  clear_has_registrationdate();
}
inline ::google::protobuf::int64 TeamInfo::registrationdate() const {
  // @@protoc_insertion_point(field_get:TeamInfo.registrationDate)
  return registrationdate_;
}
inline void TeamInfo::set_registrationdate(::google::protobuf::int64 value) {
  set_has_registrationdate();
  registrationdate_ = value;
  // @@protoc_insertion_point(field_set:TeamInfo.registrationDate)
}

// optional int32 dungeonTurnCount = 6;
inline bool TeamInfo::has_dungeonturncount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TeamInfo::set_has_dungeonturncount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TeamInfo::clear_has_dungeonturncount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TeamInfo::clear_dungeonturncount() {
  dungeonturncount_ = 0;
  clear_has_dungeonturncount();
}
inline ::google::protobuf::int32 TeamInfo::dungeonturncount() const {
  // @@protoc_insertion_point(field_get:TeamInfo.dungeonTurnCount)
  return dungeonturncount_;
}
inline void TeamInfo::set_dungeonturncount(::google::protobuf::int32 value) {
  set_has_dungeonturncount();
  dungeonturncount_ = value;
  // @@protoc_insertion_point(field_set:TeamInfo.dungeonTurnCount)
}

// optional int32 bossTurnCount = 7;
inline bool TeamInfo::has_bossturncount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TeamInfo::set_has_bossturncount() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TeamInfo::clear_has_bossturncount() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TeamInfo::clear_bossturncount() {
  bossturncount_ = 0;
  clear_has_bossturncount();
}
inline ::google::protobuf::int32 TeamInfo::bossturncount() const {
  // @@protoc_insertion_point(field_get:TeamInfo.bossTurnCount)
  return bossturncount_;
}
inline void TeamInfo::set_bossturncount(::google::protobuf::int32 value) {
  set_has_bossturncount();
  bossturncount_ = value;
  // @@protoc_insertion_point(field_set:TeamInfo.bossTurnCount)
}

// optional .CompositionInfo compositionInfo = 8;
inline bool TeamInfo::has_compositioninfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamInfo::set_has_compositioninfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamInfo::clear_has_compositioninfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamInfo::clear_compositioninfo() {
  if (compositioninfo_ != NULL) compositioninfo_->::CompositionInfo::Clear();
  clear_has_compositioninfo();
}
inline const ::CompositionInfo& TeamInfo::compositioninfo() const {
  // @@protoc_insertion_point(field_get:TeamInfo.compositionInfo)
  return compositioninfo_ != NULL ? *compositioninfo_
                         : *::CompositionInfo::internal_default_instance();
}
inline ::CompositionInfo* TeamInfo::mutable_compositioninfo() {
  set_has_compositioninfo();
  if (compositioninfo_ == NULL) {
    compositioninfo_ = new ::CompositionInfo;
  }
  // @@protoc_insertion_point(field_mutable:TeamInfo.compositionInfo)
  return compositioninfo_;
}
inline ::CompositionInfo* TeamInfo::release_compositioninfo() {
  // @@protoc_insertion_point(field_release:TeamInfo.compositionInfo)
  clear_has_compositioninfo();
  ::CompositionInfo* temp = compositioninfo_;
  compositioninfo_ = NULL;
  return temp;
}
inline void TeamInfo::set_allocated_compositioninfo(::CompositionInfo* compositioninfo) {
  delete compositioninfo_;
  compositioninfo_ = compositioninfo;
  if (compositioninfo) {
    set_has_compositioninfo();
  } else {
    clear_has_compositioninfo();
  }
  // @@protoc_insertion_point(field_set_allocated:TeamInfo.compositionInfo)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CompositionInfo

// map<int64, .CompositionInfoData> infoByCharacterId = 1;
inline int CompositionInfo::infobycharacterid_size() const {
  return infobycharacterid_.size();
}
inline void CompositionInfo::clear_infobycharacterid() {
  infobycharacterid_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::int64, ::CompositionInfoData >&
CompositionInfo::infobycharacterid() const {
  // @@protoc_insertion_point(field_map:CompositionInfo.infoByCharacterId)
  return infobycharacterid_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::int64, ::CompositionInfoData >*
CompositionInfo::mutable_infobycharacterid() {
  // @@protoc_insertion_point(field_mutable_map:CompositionInfo.infoByCharacterId)
  return infobycharacterid_.MutableMap();
}

// -------------------------------------------------------------------

// CompositionInfoData

// required int32 breedId = 1;
inline bool CompositionInfoData::has_breedid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CompositionInfoData::set_has_breedid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CompositionInfoData::clear_has_breedid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CompositionInfoData::clear_breedid() {
  breedid_ = 0;
  clear_has_breedid();
}
inline ::google::protobuf::int32 CompositionInfoData::breedid() const {
  // @@protoc_insertion_point(field_get:CompositionInfoData.breedId)
  return breedid_;
}
inline void CompositionInfoData::set_breedid(::google::protobuf::int32 value) {
  set_has_breedid();
  breedid_ = value;
  // @@protoc_insertion_point(field_set:CompositionInfoData.breedId)
}

// optional bool isBestRecord = 2;
inline bool CompositionInfoData::has_isbestrecord() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CompositionInfoData::set_has_isbestrecord() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CompositionInfoData::clear_has_isbestrecord() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CompositionInfoData::clear_isbestrecord() {
  isbestrecord_ = false;
  clear_has_isbestrecord();
}
inline bool CompositionInfoData::isbestrecord() const {
  // @@protoc_insertion_point(field_get:CompositionInfoData.isBestRecord)
  return isbestrecord_;
}
inline void CompositionInfoData::set_isbestrecord(bool value) {
  set_has_isbestrecord();
  isbestrecord_ = value;
  // @@protoc_insertion_point(field_set:CompositionInfoData.isBestRecord)
}

// optional string name = 3;
inline bool CompositionInfoData::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CompositionInfoData::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CompositionInfoData::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CompositionInfoData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& CompositionInfoData::name() const {
  // @@protoc_insertion_point(field_get:CompositionInfoData.name)
  return name_.GetNoArena();
}
inline void CompositionInfoData::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CompositionInfoData.name)
}
#if LANG_CXX11
inline void CompositionInfoData::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CompositionInfoData.name)
}
#endif
inline void CompositionInfoData::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CompositionInfoData.name)
}
inline void CompositionInfoData::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CompositionInfoData.name)
}
inline ::std::string* CompositionInfoData::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:CompositionInfoData.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CompositionInfoData::release_name() {
  // @@protoc_insertion_point(field_release:CompositionInfoData.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CompositionInfoData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CompositionInfoData.name)
}

// optional int32 sex = 4;
inline bool CompositionInfoData::has_sex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CompositionInfoData::set_has_sex() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CompositionInfoData::clear_has_sex() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CompositionInfoData::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 CompositionInfoData::sex() const {
  // @@protoc_insertion_point(field_get:CompositionInfoData.sex)
  return sex_;
}
inline void CompositionInfoData::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:CompositionInfoData.sex)
}

// optional int64 guildBlazon = 5;
inline bool CompositionInfoData::has_guildblazon() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CompositionInfoData::set_has_guildblazon() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CompositionInfoData::clear_has_guildblazon() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CompositionInfoData::clear_guildblazon() {
  guildblazon_ = GOOGLE_LONGLONG(0);
  clear_has_guildblazon();
}
inline ::google::protobuf::int64 CompositionInfoData::guildblazon() const {
  // @@protoc_insertion_point(field_get:CompositionInfoData.guildBlazon)
  return guildblazon_;
}
inline void CompositionInfoData::set_guildblazon(::google::protobuf::int64 value) {
  set_has_guildblazon();
  guildblazon_ = value;
  // @@protoc_insertion_point(field_set:CompositionInfoData.guildBlazon)
}

// optional string guildName = 6;
inline bool CompositionInfoData::has_guildname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CompositionInfoData::set_has_guildname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CompositionInfoData::clear_has_guildname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CompositionInfoData::clear_guildname() {
  guildname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_guildname();
}
inline const ::std::string& CompositionInfoData::guildname() const {
  // @@protoc_insertion_point(field_get:CompositionInfoData.guildName)
  return guildname_.GetNoArena();
}
inline void CompositionInfoData::set_guildname(const ::std::string& value) {
  set_has_guildname();
  guildname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CompositionInfoData.guildName)
}
#if LANG_CXX11
inline void CompositionInfoData::set_guildname(::std::string&& value) {
  set_has_guildname();
  guildname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CompositionInfoData.guildName)
}
#endif
inline void CompositionInfoData::set_guildname(const char* value) {
  set_has_guildname();
  guildname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CompositionInfoData.guildName)
}
inline void CompositionInfoData::set_guildname(const char* value, size_t size) {
  set_has_guildname();
  guildname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CompositionInfoData.guildName)
}
inline ::std::string* CompositionInfoData::mutable_guildname() {
  set_has_guildname();
  // @@protoc_insertion_point(field_mutable:CompositionInfoData.guildName)
  return guildname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CompositionInfoData::release_guildname() {
  // @@protoc_insertion_point(field_release:CompositionInfoData.guildName)
  clear_has_guildname();
  return guildname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CompositionInfoData::set_allocated_guildname(::std::string* guildname) {
  if (guildname != NULL) {
    set_has_guildname();
  } else {
    clear_has_guildname();
  }
  guildname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guildname);
  // @@protoc_insertion_point(field_set_allocated:CompositionInfoData.guildName)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RankingInfo

// required int32 startIndex = 1;
inline bool RankingInfo::has_startindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RankingInfo::set_has_startindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RankingInfo::clear_has_startindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RankingInfo::clear_startindex() {
  startindex_ = 0;
  clear_has_startindex();
}
inline ::google::protobuf::int32 RankingInfo::startindex() const {
  // @@protoc_insertion_point(field_get:RankingInfo.startIndex)
  return startindex_;
}
inline void RankingInfo::set_startindex(::google::protobuf::int32 value) {
  set_has_startindex();
  startindex_ = value;
  // @@protoc_insertion_point(field_set:RankingInfo.startIndex)
}

// required int32 totalIndexCount = 2;
inline bool RankingInfo::has_totalindexcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RankingInfo::set_has_totalindexcount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RankingInfo::clear_has_totalindexcount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RankingInfo::clear_totalindexcount() {
  totalindexcount_ = 0;
  clear_has_totalindexcount();
}
inline ::google::protobuf::int32 RankingInfo::totalindexcount() const {
  // @@protoc_insertion_point(field_get:RankingInfo.totalIndexCount)
  return totalindexcount_;
}
inline void RankingInfo::set_totalindexcount(::google::protobuf::int32 value) {
  set_has_totalindexcount();
  totalindexcount_ = value;
  // @@protoc_insertion_point(field_set:RankingInfo.totalIndexCount)
}

// optional int32 firstTeamFirstIndex = 3;
inline bool RankingInfo::has_firstteamfirstindex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RankingInfo::set_has_firstteamfirstindex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RankingInfo::clear_has_firstteamfirstindex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RankingInfo::clear_firstteamfirstindex() {
  firstteamfirstindex_ = 0;
  clear_has_firstteamfirstindex();
}
inline ::google::protobuf::int32 RankingInfo::firstteamfirstindex() const {
  // @@protoc_insertion_point(field_get:RankingInfo.firstTeamFirstIndex)
  return firstteamfirstindex_;
}
inline void RankingInfo::set_firstteamfirstindex(::google::protobuf::int32 value) {
  set_has_firstteamfirstindex();
  firstteamfirstindex_ = value;
  // @@protoc_insertion_point(field_set:RankingInfo.firstTeamFirstIndex)
}

// map<int32, .TeamInfo> teams = 4;
inline int RankingInfo::teams_size() const {
  return teams_.size();
}
inline void RankingInfo::clear_teams() {
  teams_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::int32, ::TeamInfo >&
RankingInfo::teams() const {
  // @@protoc_insertion_point(field_map:RankingInfo.teams)
  return teams_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::int32, ::TeamInfo >*
RankingInfo::mutable_teams() {
  // @@protoc_insertion_point(field_mutable_map:RankingInfo.teams)
  return teams_.MutableMap();
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::LadderType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LadderType>() {
  return ::LadderType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dungeon_5fladder_2eproto__INCLUDED
