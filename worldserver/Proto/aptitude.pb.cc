// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aptitude.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "aptitude.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace WakfuProto {
class SheetSetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SheetSet> {
} _SheetSet_default_instance_;
class SheetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Sheet> {
} _Sheet_default_instance_;
class LevelsByBonusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LevelsByBonus> {
} _LevelsByBonus_default_instance_;
class CategoryPointsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CategoryPoints> {
} _CategoryPoints_default_instance_;

namespace protobuf_aptitude_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SheetSet, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SheetSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SheetSet, sheets_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet, bonus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet, categorypoints_),
  1,
  0,
  2,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelsByBonus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelsByBonus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelsByBonus, bonusid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelsByBonus, level_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoryPoints, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoryPoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoryPoints, categoryid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoryPoints, points_),
  0,
  1,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 5, sizeof(SheetSet)},
  { 6, 15, sizeof(Sheet)},
  { 20, 26, sizeof(LevelsByBonus)},
  { 28, 34, sizeof(CategoryPoints)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_SheetSet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Sheet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LevelsByBonus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CategoryPoints_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "aptitude.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace

void TableStruct::Shutdown() {
  _SheetSet_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Sheet_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _LevelsByBonus_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CategoryPoints_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _SheetSet_default_instance_.DefaultConstruct();
  _Sheet_default_instance_.DefaultConstruct();
  _LevelsByBonus_default_instance_.DefaultConstruct();
  _CategoryPoints_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\016aptitude.proto\022\nWakfuProto\"-\n\010SheetSet"
      "\022!\n\006sheets\030\002 \003(\0132\021.WakfuProto.Sheet\"\221\001\n\005"
      "Sheet\022\r\n\005index\030\001 \002(\005\022\014\n\004name\030\002 \002(\t\022\r\n\005le"
      "vel\030\003 \002(\005\022(\n\005bonus\030\004 \003(\0132\031.WakfuProto.Le"
      "velsByBonus\0222\n\016categoryPoints\030\005 \003(\0132\032.Wa"
      "kfuProto.CategoryPoints\"/\n\rLevelsByBonus"
      "\022\017\n\007bonusId\030\001 \002(\005\022\r\n\005level\030\002 \002(\005\"4\n\016Cate"
      "goryPoints\022\022\n\ncategoryId\030\001 \002(\005\022\016\n\006points"
      "\030\002 \002(\005"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 326);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "aptitude.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_aptitude_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SheetSet::kSheetsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SheetSet::SheetSet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_aptitude_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WakfuProto.SheetSet)
}
SheetSet::SheetSet(const SheetSet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      sheets_(from.sheets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:WakfuProto.SheetSet)
}

void SheetSet::SharedCtor() {
  _cached_size_ = 0;
}

SheetSet::~SheetSet() {
  // @@protoc_insertion_point(destructor:WakfuProto.SheetSet)
  SharedDtor();
}

void SheetSet::SharedDtor() {
}

void SheetSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SheetSet::descriptor() {
  protobuf_aptitude_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_aptitude_2eproto::file_level_metadata[0].descriptor;
}

const SheetSet& SheetSet::default_instance() {
  protobuf_aptitude_2eproto::InitDefaults();
  return *internal_default_instance();
}

SheetSet* SheetSet::New(::google::protobuf::Arena* arena) const {
  SheetSet* n = new SheetSet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SheetSet::Clear() {
// @@protoc_insertion_point(message_clear_start:WakfuProto.SheetSet)
  sheets_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SheetSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WakfuProto.SheetSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .WakfuProto.Sheet sheets = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_sheets()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WakfuProto.SheetSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WakfuProto.SheetSet)
  return false;
#undef DO_
}

void SheetSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WakfuProto.SheetSet)
  // repeated .WakfuProto.Sheet sheets = 2;
  for (unsigned int i = 0, n = this->sheets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sheets(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WakfuProto.SheetSet)
}

::google::protobuf::uint8* SheetSet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WakfuProto.SheetSet)
  // repeated .WakfuProto.Sheet sheets = 2;
  for (unsigned int i = 0, n = this->sheets_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->sheets(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WakfuProto.SheetSet)
  return target;
}

size_t SheetSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WakfuProto.SheetSet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .WakfuProto.Sheet sheets = 2;
  {
    unsigned int count = this->sheets_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sheets(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SheetSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WakfuProto.SheetSet)
  GOOGLE_DCHECK_NE(&from, this);
  const SheetSet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SheetSet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WakfuProto.SheetSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WakfuProto.SheetSet)
    MergeFrom(*source);
  }
}

void SheetSet::MergeFrom(const SheetSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WakfuProto.SheetSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sheets_.MergeFrom(from.sheets_);
}

void SheetSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WakfuProto.SheetSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SheetSet::CopyFrom(const SheetSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WakfuProto.SheetSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SheetSet::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->sheets())) return false;
  return true;
}

void SheetSet::Swap(SheetSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SheetSet::InternalSwap(SheetSet* other) {
  sheets_.UnsafeArenaSwap(&other->sheets_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SheetSet::GetMetadata() const {
  protobuf_aptitude_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_aptitude_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SheetSet

// repeated .WakfuProto.Sheet sheets = 2;
int SheetSet::sheets_size() const {
  return sheets_.size();
}
void SheetSet::clear_sheets() {
  sheets_.Clear();
}
const ::WakfuProto::Sheet& SheetSet::sheets(int index) const {
  // @@protoc_insertion_point(field_get:WakfuProto.SheetSet.sheets)
  return sheets_.Get(index);
}
::WakfuProto::Sheet* SheetSet::mutable_sheets(int index) {
  // @@protoc_insertion_point(field_mutable:WakfuProto.SheetSet.sheets)
  return sheets_.Mutable(index);
}
::WakfuProto::Sheet* SheetSet::add_sheets() {
  // @@protoc_insertion_point(field_add:WakfuProto.SheetSet.sheets)
  return sheets_.Add();
}
::google::protobuf::RepeatedPtrField< ::WakfuProto::Sheet >*
SheetSet::mutable_sheets() {
  // @@protoc_insertion_point(field_mutable_list:WakfuProto.SheetSet.sheets)
  return &sheets_;
}
const ::google::protobuf::RepeatedPtrField< ::WakfuProto::Sheet >&
SheetSet::sheets() const {
  // @@protoc_insertion_point(field_list:WakfuProto.SheetSet.sheets)
  return sheets_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sheet::kIndexFieldNumber;
const int Sheet::kNameFieldNumber;
const int Sheet::kLevelFieldNumber;
const int Sheet::kBonusFieldNumber;
const int Sheet::kCategoryPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sheet::Sheet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_aptitude_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WakfuProto.Sheet)
}
Sheet::Sheet(const Sheet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      bonus_(from.bonus_),
      categorypoints_(from.categorypoints_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&index_, &from.index_,
    reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&index_) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:WakfuProto.Sheet)
}

void Sheet::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&index_, 0, reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&index_) + sizeof(level_));
}

Sheet::~Sheet() {
  // @@protoc_insertion_point(destructor:WakfuProto.Sheet)
  SharedDtor();
}

void Sheet::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Sheet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet::descriptor() {
  protobuf_aptitude_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_aptitude_2eproto::file_level_metadata[1].descriptor;
}

const Sheet& Sheet::default_instance() {
  protobuf_aptitude_2eproto::InitDefaults();
  return *internal_default_instance();
}

Sheet* Sheet::New(::google::protobuf::Arena* arena) const {
  Sheet* n = new Sheet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Sheet::Clear() {
// @@protoc_insertion_point(message_clear_start:WakfuProto.Sheet)
  bonus_.Clear();
  categorypoints_.Clear();
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&index_, 0, reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&index_) + sizeof(level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Sheet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WakfuProto.Sheet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (tag == 8u) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WakfuProto.Sheet.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 level = 3;
      case 3: {
        if (tag == 24u) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .WakfuProto.LevelsByBonus bonus = 4;
      case 4: {
        if (tag == 34u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_bonus()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .WakfuProto.CategoryPoints categoryPoints = 5;
      case 5: {
        if (tag == 42u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_categorypoints()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WakfuProto.Sheet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WakfuProto.Sheet)
  return false;
#undef DO_
}

void Sheet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WakfuProto.Sheet)
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WakfuProto.Sheet.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // repeated .WakfuProto.LevelsByBonus bonus = 4;
  for (unsigned int i = 0, n = this->bonus_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->bonus(i), output);
  }

  // repeated .WakfuProto.CategoryPoints categoryPoints = 5;
  for (unsigned int i = 0, n = this->categorypoints_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->categorypoints(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WakfuProto.Sheet)
}

::google::protobuf::uint8* Sheet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WakfuProto.Sheet)
  // required int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WakfuProto.Sheet.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // repeated .WakfuProto.LevelsByBonus bonus = 4;
  for (unsigned int i = 0, n = this->bonus_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->bonus(i), false, target);
  }

  // repeated .WakfuProto.CategoryPoints categoryPoints = 5;
  for (unsigned int i = 0, n = this->categorypoints_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->categorypoints(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WakfuProto.Sheet)
  return target;
}

size_t Sheet::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:WakfuProto.Sheet)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_index()) {
    // required int32 index = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());
  }

  if (has_level()) {
    // required int32 level = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  return total_size;
}
size_t Sheet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WakfuProto.Sheet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required int32 index = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());

    // required int32 level = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .WakfuProto.LevelsByBonus bonus = 4;
  {
    unsigned int count = this->bonus_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bonus(i));
    }
  }

  // repeated .WakfuProto.CategoryPoints categoryPoints = 5;
  {
    unsigned int count = this->categorypoints_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->categorypoints(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WakfuProto.Sheet)
  GOOGLE_DCHECK_NE(&from, this);
  const Sheet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Sheet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WakfuProto.Sheet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WakfuProto.Sheet)
    MergeFrom(*source);
  }
}

void Sheet::MergeFrom(const Sheet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WakfuProto.Sheet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bonus_.MergeFrom(from.bonus_);
  categorypoints_.MergeFrom(from.categorypoints_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
}

void Sheet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WakfuProto.Sheet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet::CopyFrom(const Sheet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WakfuProto.Sheet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->bonus())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->categorypoints())) return false;
  return true;
}

void Sheet::Swap(Sheet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sheet::InternalSwap(Sheet* other) {
  bonus_.UnsafeArenaSwap(&other->bonus_);
  categorypoints_.UnsafeArenaSwap(&other->categorypoints_);
  name_.Swap(&other->name_);
  std::swap(index_, other->index_);
  std::swap(level_, other->level_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Sheet::GetMetadata() const {
  protobuf_aptitude_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_aptitude_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Sheet

// required int32 index = 1;
bool Sheet::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Sheet::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
void Sheet::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void Sheet::clear_index() {
  index_ = 0;
  clear_has_index();
}
::google::protobuf::int32 Sheet::index() const {
  // @@protoc_insertion_point(field_get:WakfuProto.Sheet.index)
  return index_;
}
void Sheet::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:WakfuProto.Sheet.index)
}

// required string name = 2;
bool Sheet::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Sheet::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Sheet::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Sheet::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& Sheet::name() const {
  // @@protoc_insertion_point(field_get:WakfuProto.Sheet.name)
  return name_.GetNoArena();
}
void Sheet::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WakfuProto.Sheet.name)
}
#if LANG_CXX11
void Sheet::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:WakfuProto.Sheet.name)
}
#endif
void Sheet::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WakfuProto.Sheet.name)
}
void Sheet::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WakfuProto.Sheet.name)
}
::std::string* Sheet::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:WakfuProto.Sheet.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Sheet::release_name() {
  // @@protoc_insertion_point(field_release:WakfuProto.Sheet.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Sheet::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:WakfuProto.Sheet.name)
}

// required int32 level = 3;
bool Sheet::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Sheet::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
void Sheet::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
void Sheet::clear_level() {
  level_ = 0;
  clear_has_level();
}
::google::protobuf::int32 Sheet::level() const {
  // @@protoc_insertion_point(field_get:WakfuProto.Sheet.level)
  return level_;
}
void Sheet::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:WakfuProto.Sheet.level)
}

// repeated .WakfuProto.LevelsByBonus bonus = 4;
int Sheet::bonus_size() const {
  return bonus_.size();
}
void Sheet::clear_bonus() {
  bonus_.Clear();
}
const ::WakfuProto::LevelsByBonus& Sheet::bonus(int index) const {
  // @@protoc_insertion_point(field_get:WakfuProto.Sheet.bonus)
  return bonus_.Get(index);
}
::WakfuProto::LevelsByBonus* Sheet::mutable_bonus(int index) {
  // @@protoc_insertion_point(field_mutable:WakfuProto.Sheet.bonus)
  return bonus_.Mutable(index);
}
::WakfuProto::LevelsByBonus* Sheet::add_bonus() {
  // @@protoc_insertion_point(field_add:WakfuProto.Sheet.bonus)
  return bonus_.Add();
}
::google::protobuf::RepeatedPtrField< ::WakfuProto::LevelsByBonus >*
Sheet::mutable_bonus() {
  // @@protoc_insertion_point(field_mutable_list:WakfuProto.Sheet.bonus)
  return &bonus_;
}
const ::google::protobuf::RepeatedPtrField< ::WakfuProto::LevelsByBonus >&
Sheet::bonus() const {
  // @@protoc_insertion_point(field_list:WakfuProto.Sheet.bonus)
  return bonus_;
}

// repeated .WakfuProto.CategoryPoints categoryPoints = 5;
int Sheet::categorypoints_size() const {
  return categorypoints_.size();
}
void Sheet::clear_categorypoints() {
  categorypoints_.Clear();
}
const ::WakfuProto::CategoryPoints& Sheet::categorypoints(int index) const {
  // @@protoc_insertion_point(field_get:WakfuProto.Sheet.categoryPoints)
  return categorypoints_.Get(index);
}
::WakfuProto::CategoryPoints* Sheet::mutable_categorypoints(int index) {
  // @@protoc_insertion_point(field_mutable:WakfuProto.Sheet.categoryPoints)
  return categorypoints_.Mutable(index);
}
::WakfuProto::CategoryPoints* Sheet::add_categorypoints() {
  // @@protoc_insertion_point(field_add:WakfuProto.Sheet.categoryPoints)
  return categorypoints_.Add();
}
::google::protobuf::RepeatedPtrField< ::WakfuProto::CategoryPoints >*
Sheet::mutable_categorypoints() {
  // @@protoc_insertion_point(field_mutable_list:WakfuProto.Sheet.categoryPoints)
  return &categorypoints_;
}
const ::google::protobuf::RepeatedPtrField< ::WakfuProto::CategoryPoints >&
Sheet::categorypoints() const {
  // @@protoc_insertion_point(field_list:WakfuProto.Sheet.categoryPoints)
  return categorypoints_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LevelsByBonus::kBonusIdFieldNumber;
const int LevelsByBonus::kLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LevelsByBonus::LevelsByBonus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_aptitude_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WakfuProto.LevelsByBonus)
}
LevelsByBonus::LevelsByBonus(const LevelsByBonus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bonusid_, &from.bonusid_,
    reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&bonusid_) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:WakfuProto.LevelsByBonus)
}

void LevelsByBonus::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&bonusid_, 0, reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&bonusid_) + sizeof(level_));
}

LevelsByBonus::~LevelsByBonus() {
  // @@protoc_insertion_point(destructor:WakfuProto.LevelsByBonus)
  SharedDtor();
}

void LevelsByBonus::SharedDtor() {
}

void LevelsByBonus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LevelsByBonus::descriptor() {
  protobuf_aptitude_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_aptitude_2eproto::file_level_metadata[2].descriptor;
}

const LevelsByBonus& LevelsByBonus::default_instance() {
  protobuf_aptitude_2eproto::InitDefaults();
  return *internal_default_instance();
}

LevelsByBonus* LevelsByBonus::New(::google::protobuf::Arena* arena) const {
  LevelsByBonus* n = new LevelsByBonus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LevelsByBonus::Clear() {
// @@protoc_insertion_point(message_clear_start:WakfuProto.LevelsByBonus)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&bonusid_, 0, reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&bonusid_) + sizeof(level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LevelsByBonus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WakfuProto.LevelsByBonus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 bonusId = 1;
      case 1: {
        if (tag == 8u) {
          set_has_bonusid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bonusid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 level = 2;
      case 2: {
        if (tag == 16u) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WakfuProto.LevelsByBonus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WakfuProto.LevelsByBonus)
  return false;
#undef DO_
}

void LevelsByBonus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WakfuProto.LevelsByBonus)
  // required int32 bonusId = 1;
  if (has_bonusid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bonusid(), output);
  }

  // required int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WakfuProto.LevelsByBonus)
}

::google::protobuf::uint8* LevelsByBonus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WakfuProto.LevelsByBonus)
  // required int32 bonusId = 1;
  if (has_bonusid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bonusid(), target);
  }

  // required int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WakfuProto.LevelsByBonus)
  return target;
}

size_t LevelsByBonus::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:WakfuProto.LevelsByBonus)
  size_t total_size = 0;

  if (has_bonusid()) {
    // required int32 bonusId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bonusid());
  }

  if (has_level()) {
    // required int32 level = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  return total_size;
}
size_t LevelsByBonus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WakfuProto.LevelsByBonus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 bonusId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bonusid());

    // required int32 level = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LevelsByBonus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WakfuProto.LevelsByBonus)
  GOOGLE_DCHECK_NE(&from, this);
  const LevelsByBonus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LevelsByBonus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WakfuProto.LevelsByBonus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WakfuProto.LevelsByBonus)
    MergeFrom(*source);
  }
}

void LevelsByBonus::MergeFrom(const LevelsByBonus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WakfuProto.LevelsByBonus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_bonusid()) {
      set_bonusid(from.bonusid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
}

void LevelsByBonus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WakfuProto.LevelsByBonus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LevelsByBonus::CopyFrom(const LevelsByBonus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WakfuProto.LevelsByBonus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LevelsByBonus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void LevelsByBonus::Swap(LevelsByBonus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LevelsByBonus::InternalSwap(LevelsByBonus* other) {
  std::swap(bonusid_, other->bonusid_);
  std::swap(level_, other->level_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LevelsByBonus::GetMetadata() const {
  protobuf_aptitude_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_aptitude_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LevelsByBonus

// required int32 bonusId = 1;
bool LevelsByBonus::has_bonusid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LevelsByBonus::set_has_bonusid() {
  _has_bits_[0] |= 0x00000001u;
}
void LevelsByBonus::clear_has_bonusid() {
  _has_bits_[0] &= ~0x00000001u;
}
void LevelsByBonus::clear_bonusid() {
  bonusid_ = 0;
  clear_has_bonusid();
}
::google::protobuf::int32 LevelsByBonus::bonusid() const {
  // @@protoc_insertion_point(field_get:WakfuProto.LevelsByBonus.bonusId)
  return bonusid_;
}
void LevelsByBonus::set_bonusid(::google::protobuf::int32 value) {
  set_has_bonusid();
  bonusid_ = value;
  // @@protoc_insertion_point(field_set:WakfuProto.LevelsByBonus.bonusId)
}

// required int32 level = 2;
bool LevelsByBonus::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LevelsByBonus::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
void LevelsByBonus::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
void LevelsByBonus::clear_level() {
  level_ = 0;
  clear_has_level();
}
::google::protobuf::int32 LevelsByBonus::level() const {
  // @@protoc_insertion_point(field_get:WakfuProto.LevelsByBonus.level)
  return level_;
}
void LevelsByBonus::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:WakfuProto.LevelsByBonus.level)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CategoryPoints::kCategoryIdFieldNumber;
const int CategoryPoints::kPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CategoryPoints::CategoryPoints()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_aptitude_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WakfuProto.CategoryPoints)
}
CategoryPoints::CategoryPoints(const CategoryPoints& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&categoryid_, &from.categoryid_,
    reinterpret_cast<char*>(&points_) -
    reinterpret_cast<char*>(&categoryid_) + sizeof(points_));
  // @@protoc_insertion_point(copy_constructor:WakfuProto.CategoryPoints)
}

void CategoryPoints::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&categoryid_, 0, reinterpret_cast<char*>(&points_) -
    reinterpret_cast<char*>(&categoryid_) + sizeof(points_));
}

CategoryPoints::~CategoryPoints() {
  // @@protoc_insertion_point(destructor:WakfuProto.CategoryPoints)
  SharedDtor();
}

void CategoryPoints::SharedDtor() {
}

void CategoryPoints::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CategoryPoints::descriptor() {
  protobuf_aptitude_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_aptitude_2eproto::file_level_metadata[3].descriptor;
}

const CategoryPoints& CategoryPoints::default_instance() {
  protobuf_aptitude_2eproto::InitDefaults();
  return *internal_default_instance();
}

CategoryPoints* CategoryPoints::New(::google::protobuf::Arena* arena) const {
  CategoryPoints* n = new CategoryPoints;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CategoryPoints::Clear() {
// @@protoc_insertion_point(message_clear_start:WakfuProto.CategoryPoints)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&categoryid_, 0, reinterpret_cast<char*>(&points_) -
      reinterpret_cast<char*>(&categoryid_) + sizeof(points_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CategoryPoints::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WakfuProto.CategoryPoints)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 categoryId = 1;
      case 1: {
        if (tag == 8u) {
          set_has_categoryid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &categoryid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 points = 2;
      case 2: {
        if (tag == 16u) {
          set_has_points();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WakfuProto.CategoryPoints)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WakfuProto.CategoryPoints)
  return false;
#undef DO_
}

void CategoryPoints::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WakfuProto.CategoryPoints)
  // required int32 categoryId = 1;
  if (has_categoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->categoryid(), output);
  }

  // required int32 points = 2;
  if (has_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->points(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WakfuProto.CategoryPoints)
}

::google::protobuf::uint8* CategoryPoints::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WakfuProto.CategoryPoints)
  // required int32 categoryId = 1;
  if (has_categoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->categoryid(), target);
  }

  // required int32 points = 2;
  if (has_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->points(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WakfuProto.CategoryPoints)
  return target;
}

size_t CategoryPoints::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:WakfuProto.CategoryPoints)
  size_t total_size = 0;

  if (has_categoryid()) {
    // required int32 categoryId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->categoryid());
  }

  if (has_points()) {
    // required int32 points = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->points());
  }

  return total_size;
}
size_t CategoryPoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WakfuProto.CategoryPoints)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 categoryId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->categoryid());

    // required int32 points = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->points());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CategoryPoints::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WakfuProto.CategoryPoints)
  GOOGLE_DCHECK_NE(&from, this);
  const CategoryPoints* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CategoryPoints>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WakfuProto.CategoryPoints)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WakfuProto.CategoryPoints)
    MergeFrom(*source);
  }
}

void CategoryPoints::MergeFrom(const CategoryPoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WakfuProto.CategoryPoints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_categoryid()) {
      set_categoryid(from.categoryid());
    }
    if (from.has_points()) {
      set_points(from.points());
    }
  }
}

void CategoryPoints::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WakfuProto.CategoryPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CategoryPoints::CopyFrom(const CategoryPoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WakfuProto.CategoryPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CategoryPoints::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void CategoryPoints::Swap(CategoryPoints* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CategoryPoints::InternalSwap(CategoryPoints* other) {
  std::swap(categoryid_, other->categoryid_);
  std::swap(points_, other->points_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CategoryPoints::GetMetadata() const {
  protobuf_aptitude_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_aptitude_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CategoryPoints

// required int32 categoryId = 1;
bool CategoryPoints::has_categoryid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CategoryPoints::set_has_categoryid() {
  _has_bits_[0] |= 0x00000001u;
}
void CategoryPoints::clear_has_categoryid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CategoryPoints::clear_categoryid() {
  categoryid_ = 0;
  clear_has_categoryid();
}
::google::protobuf::int32 CategoryPoints::categoryid() const {
  // @@protoc_insertion_point(field_get:WakfuProto.CategoryPoints.categoryId)
  return categoryid_;
}
void CategoryPoints::set_categoryid(::google::protobuf::int32 value) {
  set_has_categoryid();
  categoryid_ = value;
  // @@protoc_insertion_point(field_set:WakfuProto.CategoryPoints.categoryId)
}

// required int32 points = 2;
bool CategoryPoints::has_points() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CategoryPoints::set_has_points() {
  _has_bits_[0] |= 0x00000002u;
}
void CategoryPoints::clear_has_points() {
  _has_bits_[0] &= ~0x00000002u;
}
void CategoryPoints::clear_points() {
  points_ = 0;
  clear_has_points();
}
::google::protobuf::int32 CategoryPoints::points() const {
  // @@protoc_insertion_point(field_get:WakfuProto.CategoryPoints.points)
  return points_;
}
void CategoryPoints::set_points(::google::protobuf::int32 value) {
  set_has_points();
  points_ = value;
  // @@protoc_insertion_point(field_set:WakfuProto.CategoryPoints.points)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace WakfuProto

// @@protoc_insertion_point(global_scope)
