// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dungeon_ladder.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dungeon_ladder.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class TeamInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TeamInfo> {
} _TeamInfo_default_instance_;
class CompositionInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CompositionInfo> {
} _CompositionInfo_default_instance_;
class CompositionInfoDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CompositionInfoData> {
} _CompositionInfoData_default_instance_;
class RankingInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RankingInfo> {
} _RankingInfo_default_instance_;

namespace protobuf_dungeon_5fladder_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, dungeonid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, laddertype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, teamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, stasislevel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, registrationdate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, dungeonturncount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, bossturncount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, compositioninfo_),
  1,
  7,
  3,
  2,
  4,
  5,
  6,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompositionInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompositionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompositionInfo, infobycharacterid_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompositionInfoData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompositionInfoData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompositionInfoData, breedid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompositionInfoData, isbestrecord_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompositionInfoData, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompositionInfoData, sex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompositionInfoData, guildblazon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompositionInfoData, guildname_),
  2,
  3,
  0,
  5,
  4,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankingInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankingInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankingInfo, startindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankingInfo, totalindexcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankingInfo, firstteamfirstindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankingInfo, teams_),
  0,
  1,
  2,
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 12, sizeof(TeamInfo)},
  { 20, 25, sizeof(CompositionInfo)},
  { 26, 36, sizeof(CompositionInfoData)},
  { 42, 50, sizeof(RankingInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_TeamInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CompositionInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CompositionInfoData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RankingInfo_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "dungeon_ladder.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
  const ::google::protobuf::Descriptor* CompositionInfo_InfoByCharacterIdEntry_descriptor = protobuf_dungeon_5fladder_2eproto::file_level_metadata[1].descriptor;
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        CompositionInfo_InfoByCharacterIdEntry_descriptor,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int64,
            ::CompositionInfoData,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                CompositionInfo_InfoByCharacterIdEntry_descriptor));
  const ::google::protobuf::Descriptor* RankingInfo_TeamsEntry_descriptor = protobuf_dungeon_5fladder_2eproto::file_level_metadata[4].descriptor;
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        RankingInfo_TeamsEntry_descriptor,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int32,
            ::TeamInfo,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                RankingInfo_TeamsEntry_descriptor));
}

}  // namespace

void TableStruct::Shutdown() {
  _TeamInfo_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CompositionInfo_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CompositionInfoData_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _RankingInfo_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _TeamInfo_default_instance_.DefaultConstruct();
  _CompositionInfo_default_instance_.DefaultConstruct();
  _CompositionInfoData_default_instance_.DefaultConstruct();
  _RankingInfo_default_instance_.DefaultConstruct();
  _TeamInfo_default_instance_.get_mutable()->compositioninfo_ = const_cast< ::CompositionInfo*>(
      ::CompositionInfo::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\024dungeon_ladder.proto\"\331\001\n\010TeamInfo\022\021\n\td"
      "ungeonId\030\001 \002(\005\022\037\n\nladderType\030\002 \001(\0162\013.Lad"
      "derType\022\016\n\006teamId\030\003 \001(\003\022\023\n\013stasisLevel\030\004"
      " \001(\005\022\030\n\020registrationDate\030\005 \001(\003\022\030\n\020dungeo"
      "nTurnCount\030\006 \001(\005\022\025\n\rbossTurnCount\030\007 \001(\005\022"
      ")\n\017compositionInfo\030\010 \001(\0132\020.CompositionIn"
      "fo\"\245\001\n\017CompositionInfo\022B\n\021infoByCharacte"
      "rId\030\001 \003(\0132\'.CompositionInfo.InfoByCharac"
      "terIdEntry\032N\n\026InfoByCharacterIdEntry\022\013\n\003"
      "key\030\001 \001(\003\022#\n\005value\030\002 \001(\0132\024.CompositionIn"
      "foData:\0028\001\"\177\n\023CompositionInfoData\022\017\n\007bre"
      "edId\030\001 \002(\005\022\024\n\014isBestRecord\030\002 \001(\010\022\014\n\004name"
      "\030\003 \001(\t\022\013\n\003sex\030\004 \001(\005\022\023\n\013guildBlazon\030\005 \001(\003"
      "\022\021\n\tguildName\030\006 \001(\t\"\270\001\n\013RankingInfo\022\022\n\ns"
      "tartIndex\030\001 \002(\005\022\027\n\017totalIndexCount\030\002 \002(\005"
      "\022\033\n\023firstTeamFirstIndex\030\003 \001(\005\022&\n\005teams\030\004"
      " \003(\0132\027.RankingInfo.TeamsEntry\0327\n\nTeamsEn"
      "try\022\013\n\003key\030\001 \001(\005\022\030\n\005value\030\002 \001(\0132\t.TeamIn"
      "fo:\0028\001*=\n\nLadderType\022\021\n\rCURRENT_MONTH\020\001\022"
      "\016\n\nLAST_MONTH\020\002\022\014\n\010ALL_TIME\020\003BA\n(com.ank"
      "ama.wakfu.protocol.dungeon.ladderB\025Proto"
      "bufDungeonLadder"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 856);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dungeon_ladder.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_dungeon_5fladder_2eproto

const ::google::protobuf::EnumDescriptor* LadderType_descriptor() {
  protobuf_dungeon_5fladder_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dungeon_5fladder_2eproto::file_level_enum_descriptors[0];
}
bool LadderType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamInfo::kDungeonIdFieldNumber;
const int TeamInfo::kLadderTypeFieldNumber;
const int TeamInfo::kTeamIdFieldNumber;
const int TeamInfo::kStasisLevelFieldNumber;
const int TeamInfo::kRegistrationDateFieldNumber;
const int TeamInfo::kDungeonTurnCountFieldNumber;
const int TeamInfo::kBossTurnCountFieldNumber;
const int TeamInfo::kCompositionInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamInfo::TeamInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dungeon_5fladder_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TeamInfo)
}
TeamInfo::TeamInfo(const TeamInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_compositioninfo()) {
    compositioninfo_ = new ::CompositionInfo(*from.compositioninfo_);
  } else {
    compositioninfo_ = NULL;
  }
  ::memcpy(&dungeonid_, &from.dungeonid_,
    reinterpret_cast<char*>(&laddertype_) -
    reinterpret_cast<char*>(&dungeonid_) + sizeof(laddertype_));
  // @@protoc_insertion_point(copy_constructor:TeamInfo)
}

void TeamInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&compositioninfo_, 0, reinterpret_cast<char*>(&bossturncount_) -
    reinterpret_cast<char*>(&compositioninfo_) + sizeof(bossturncount_));
  laddertype_ = 1;
}

TeamInfo::~TeamInfo() {
  // @@protoc_insertion_point(destructor:TeamInfo)
  SharedDtor();
}

void TeamInfo::SharedDtor() {
  if (this != internal_default_instance()) {
    delete compositioninfo_;
  }
}

void TeamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamInfo::descriptor() {
  protobuf_dungeon_5fladder_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dungeon_5fladder_2eproto::file_level_metadata[0].descriptor;
}

const TeamInfo& TeamInfo::default_instance() {
  protobuf_dungeon_5fladder_2eproto::InitDefaults();
  return *internal_default_instance();
}

TeamInfo* TeamInfo::New(::google::protobuf::Arena* arena) const {
  TeamInfo* n = new TeamInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:TeamInfo)
  if (has_compositioninfo()) {
    GOOGLE_DCHECK(compositioninfo_ != NULL);
    compositioninfo_->::CompositionInfo::Clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&dungeonid_, 0, reinterpret_cast<char*>(&bossturncount_) -
      reinterpret_cast<char*>(&dungeonid_) + sizeof(bossturncount_));
    laddertype_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TeamInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 dungeonId = 1;
      case 1: {
        if (tag == 8u) {
          set_has_dungeonid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dungeonid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .LadderType ladderType = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::LadderType_IsValid(value)) {
            set_laddertype(static_cast< ::LadderType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 teamId = 3;
      case 3: {
        if (tag == 24u) {
          set_has_teamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &teamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 stasisLevel = 4;
      case 4: {
        if (tag == 32u) {
          set_has_stasislevel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stasislevel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 registrationDate = 5;
      case 5: {
        if (tag == 40u) {
          set_has_registrationdate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &registrationdate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dungeonTurnCount = 6;
      case 6: {
        if (tag == 48u) {
          set_has_dungeonturncount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dungeonturncount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bossTurnCount = 7;
      case 7: {
        if (tag == 56u) {
          set_has_bossturncount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bossturncount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CompositionInfo compositionInfo = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_compositioninfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TeamInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TeamInfo)
  return false;
#undef DO_
}

void TeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TeamInfo)
  // required int32 dungeonId = 1;
  if (has_dungeonid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dungeonid(), output);
  }

  // optional .LadderType ladderType = 2;
  if (has_laddertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->laddertype(), output);
  }

  // optional int64 teamId = 3;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->teamid(), output);
  }

  // optional int32 stasisLevel = 4;
  if (has_stasislevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->stasislevel(), output);
  }

  // optional int64 registrationDate = 5;
  if (has_registrationdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->registrationdate(), output);
  }

  // optional int32 dungeonTurnCount = 6;
  if (has_dungeonturncount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->dungeonturncount(), output);
  }

  // optional int32 bossTurnCount = 7;
  if (has_bossturncount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->bossturncount(), output);
  }

  // optional .CompositionInfo compositionInfo = 8;
  if (has_compositioninfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->compositioninfo_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TeamInfo)
}

::google::protobuf::uint8* TeamInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TeamInfo)
  // required int32 dungeonId = 1;
  if (has_dungeonid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dungeonid(), target);
  }

  // optional .LadderType ladderType = 2;
  if (has_laddertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->laddertype(), target);
  }

  // optional int64 teamId = 3;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->teamid(), target);
  }

  // optional int32 stasisLevel = 4;
  if (has_stasislevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->stasislevel(), target);
  }

  // optional int64 registrationDate = 5;
  if (has_registrationdate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->registrationdate(), target);
  }

  // optional int32 dungeonTurnCount = 6;
  if (has_dungeonturncount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->dungeonturncount(), target);
  }

  // optional int32 bossTurnCount = 7;
  if (has_bossturncount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->bossturncount(), target);
  }

  // optional .CompositionInfo compositionInfo = 8;
  if (has_compositioninfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->compositioninfo_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeamInfo)
  return target;
}

size_t TeamInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeamInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required int32 dungeonId = 1;
  if (has_dungeonid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dungeonid());
  }
  // optional .CompositionInfo compositionInfo = 8;
  if (has_compositioninfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->compositioninfo_);
  }

  if (_has_bits_[0 / 32] & 252u) {
    // optional int32 stasisLevel = 4;
    if (has_stasislevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stasislevel());
    }

    // optional int64 teamId = 3;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->teamid());
    }

    // optional int64 registrationDate = 5;
    if (has_registrationdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->registrationdate());
    }

    // optional int32 dungeonTurnCount = 6;
    if (has_dungeonturncount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dungeonturncount());
    }

    // optional int32 bossTurnCount = 7;
    if (has_bossturncount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bossturncount());
    }

    // optional .LadderType ladderType = 2;
    if (has_laddertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->laddertype());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeamInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeamInfo)
    MergeFrom(*source);
  }
}

void TeamInfo::MergeFrom(const TeamInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_compositioninfo()) {
      mutable_compositioninfo()->::CompositionInfo::MergeFrom(from.compositioninfo());
    }
    if (from.has_dungeonid()) {
      set_dungeonid(from.dungeonid());
    }
    if (from.has_stasislevel()) {
      set_stasislevel(from.stasislevel());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_registrationdate()) {
      set_registrationdate(from.registrationdate());
    }
    if (from.has_dungeonturncount()) {
      set_dungeonturncount(from.dungeonturncount());
    }
    if (from.has_bossturncount()) {
      set_bossturncount(from.bossturncount());
    }
    if (from.has_laddertype()) {
      set_laddertype(from.laddertype());
    }
  }
}

void TeamInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamInfo::CopyFrom(const TeamInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_compositioninfo()) {
    if (!this->compositioninfo_->IsInitialized()) return false;
  }
  return true;
}

void TeamInfo::Swap(TeamInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamInfo::InternalSwap(TeamInfo* other) {
  std::swap(compositioninfo_, other->compositioninfo_);
  std::swap(dungeonid_, other->dungeonid_);
  std::swap(stasislevel_, other->stasislevel_);
  std::swap(teamid_, other->teamid_);
  std::swap(registrationdate_, other->registrationdate_);
  std::swap(dungeonturncount_, other->dungeonturncount_);
  std::swap(bossturncount_, other->bossturncount_);
  std::swap(laddertype_, other->laddertype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamInfo::GetMetadata() const {
  protobuf_dungeon_5fladder_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dungeon_5fladder_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamInfo

// required int32 dungeonId = 1;
bool TeamInfo::has_dungeonid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TeamInfo::set_has_dungeonid() {
  _has_bits_[0] |= 0x00000002u;
}
void TeamInfo::clear_has_dungeonid() {
  _has_bits_[0] &= ~0x00000002u;
}
void TeamInfo::clear_dungeonid() {
  dungeonid_ = 0;
  clear_has_dungeonid();
}
::google::protobuf::int32 TeamInfo::dungeonid() const {
  // @@protoc_insertion_point(field_get:TeamInfo.dungeonId)
  return dungeonid_;
}
void TeamInfo::set_dungeonid(::google::protobuf::int32 value) {
  set_has_dungeonid();
  dungeonid_ = value;
  // @@protoc_insertion_point(field_set:TeamInfo.dungeonId)
}

// optional .LadderType ladderType = 2;
bool TeamInfo::has_laddertype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void TeamInfo::set_has_laddertype() {
  _has_bits_[0] |= 0x00000080u;
}
void TeamInfo::clear_has_laddertype() {
  _has_bits_[0] &= ~0x00000080u;
}
void TeamInfo::clear_laddertype() {
  laddertype_ = 1;
  clear_has_laddertype();
}
::LadderType TeamInfo::laddertype() const {
  // @@protoc_insertion_point(field_get:TeamInfo.ladderType)
  return static_cast< ::LadderType >(laddertype_);
}
void TeamInfo::set_laddertype(::LadderType value) {
  assert(::LadderType_IsValid(value));
  set_has_laddertype();
  laddertype_ = value;
  // @@protoc_insertion_point(field_set:TeamInfo.ladderType)
}

// optional int64 teamId = 3;
bool TeamInfo::has_teamid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TeamInfo::set_has_teamid() {
  _has_bits_[0] |= 0x00000008u;
}
void TeamInfo::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000008u;
}
void TeamInfo::clear_teamid() {
  teamid_ = GOOGLE_LONGLONG(0);
  clear_has_teamid();
}
::google::protobuf::int64 TeamInfo::teamid() const {
  // @@protoc_insertion_point(field_get:TeamInfo.teamId)
  return teamid_;
}
void TeamInfo::set_teamid(::google::protobuf::int64 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:TeamInfo.teamId)
}

// optional int32 stasisLevel = 4;
bool TeamInfo::has_stasislevel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TeamInfo::set_has_stasislevel() {
  _has_bits_[0] |= 0x00000004u;
}
void TeamInfo::clear_has_stasislevel() {
  _has_bits_[0] &= ~0x00000004u;
}
void TeamInfo::clear_stasislevel() {
  stasislevel_ = 0;
  clear_has_stasislevel();
}
::google::protobuf::int32 TeamInfo::stasislevel() const {
  // @@protoc_insertion_point(field_get:TeamInfo.stasisLevel)
  return stasislevel_;
}
void TeamInfo::set_stasislevel(::google::protobuf::int32 value) {
  set_has_stasislevel();
  stasislevel_ = value;
  // @@protoc_insertion_point(field_set:TeamInfo.stasisLevel)
}

// optional int64 registrationDate = 5;
bool TeamInfo::has_registrationdate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TeamInfo::set_has_registrationdate() {
  _has_bits_[0] |= 0x00000010u;
}
void TeamInfo::clear_has_registrationdate() {
  _has_bits_[0] &= ~0x00000010u;
}
void TeamInfo::clear_registrationdate() {
  registrationdate_ = GOOGLE_LONGLONG(0);
  clear_has_registrationdate();
}
::google::protobuf::int64 TeamInfo::registrationdate() const {
  // @@protoc_insertion_point(field_get:TeamInfo.registrationDate)
  return registrationdate_;
}
void TeamInfo::set_registrationdate(::google::protobuf::int64 value) {
  set_has_registrationdate();
  registrationdate_ = value;
  // @@protoc_insertion_point(field_set:TeamInfo.registrationDate)
}

// optional int32 dungeonTurnCount = 6;
bool TeamInfo::has_dungeonturncount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TeamInfo::set_has_dungeonturncount() {
  _has_bits_[0] |= 0x00000020u;
}
void TeamInfo::clear_has_dungeonturncount() {
  _has_bits_[0] &= ~0x00000020u;
}
void TeamInfo::clear_dungeonturncount() {
  dungeonturncount_ = 0;
  clear_has_dungeonturncount();
}
::google::protobuf::int32 TeamInfo::dungeonturncount() const {
  // @@protoc_insertion_point(field_get:TeamInfo.dungeonTurnCount)
  return dungeonturncount_;
}
void TeamInfo::set_dungeonturncount(::google::protobuf::int32 value) {
  set_has_dungeonturncount();
  dungeonturncount_ = value;
  // @@protoc_insertion_point(field_set:TeamInfo.dungeonTurnCount)
}

// optional int32 bossTurnCount = 7;
bool TeamInfo::has_bossturncount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TeamInfo::set_has_bossturncount() {
  _has_bits_[0] |= 0x00000040u;
}
void TeamInfo::clear_has_bossturncount() {
  _has_bits_[0] &= ~0x00000040u;
}
void TeamInfo::clear_bossturncount() {
  bossturncount_ = 0;
  clear_has_bossturncount();
}
::google::protobuf::int32 TeamInfo::bossturncount() const {
  // @@protoc_insertion_point(field_get:TeamInfo.bossTurnCount)
  return bossturncount_;
}
void TeamInfo::set_bossturncount(::google::protobuf::int32 value) {
  set_has_bossturncount();
  bossturncount_ = value;
  // @@protoc_insertion_point(field_set:TeamInfo.bossTurnCount)
}

// optional .CompositionInfo compositionInfo = 8;
bool TeamInfo::has_compositioninfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TeamInfo::set_has_compositioninfo() {
  _has_bits_[0] |= 0x00000001u;
}
void TeamInfo::clear_has_compositioninfo() {
  _has_bits_[0] &= ~0x00000001u;
}
void TeamInfo::clear_compositioninfo() {
  if (compositioninfo_ != NULL) compositioninfo_->::CompositionInfo::Clear();
  clear_has_compositioninfo();
}
const ::CompositionInfo& TeamInfo::compositioninfo() const {
  // @@protoc_insertion_point(field_get:TeamInfo.compositionInfo)
  return compositioninfo_ != NULL ? *compositioninfo_
                         : *::CompositionInfo::internal_default_instance();
}
::CompositionInfo* TeamInfo::mutable_compositioninfo() {
  set_has_compositioninfo();
  if (compositioninfo_ == NULL) {
    compositioninfo_ = new ::CompositionInfo;
  }
  // @@protoc_insertion_point(field_mutable:TeamInfo.compositionInfo)
  return compositioninfo_;
}
::CompositionInfo* TeamInfo::release_compositioninfo() {
  // @@protoc_insertion_point(field_release:TeamInfo.compositionInfo)
  clear_has_compositioninfo();
  ::CompositionInfo* temp = compositioninfo_;
  compositioninfo_ = NULL;
  return temp;
}
void TeamInfo::set_allocated_compositioninfo(::CompositionInfo* compositioninfo) {
  delete compositioninfo_;
  compositioninfo_ = compositioninfo;
  if (compositioninfo) {
    set_has_compositioninfo();
  } else {
    clear_has_compositioninfo();
  }
  // @@protoc_insertion_point(field_set_allocated:TeamInfo.compositionInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompositionInfo::kInfoByCharacterIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompositionInfo::CompositionInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dungeon_5fladder_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CompositionInfo)
}
CompositionInfo::CompositionInfo(const CompositionInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  const ::google::protobuf::Descriptor*& CompositionInfo_InfoByCharacterIdEntry_descriptor = protobuf_dungeon_5fladder_2eproto::file_level_metadata[1].descriptor;
  infobycharacterid_.SetAssignDescriptorCallback(
      protobuf_dungeon_5fladder_2eproto::protobuf_AssignDescriptorsOnce);
  infobycharacterid_.SetEntryDescriptor(
      &CompositionInfo_InfoByCharacterIdEntry_descriptor);
  infobycharacterid_.MergeFrom(from.infobycharacterid_);
  // @@protoc_insertion_point(copy_constructor:CompositionInfo)
}

void CompositionInfo::SharedCtor() {
  _cached_size_ = 0;
  const ::google::protobuf::Descriptor*& CompositionInfo_InfoByCharacterIdEntry_descriptor = protobuf_dungeon_5fladder_2eproto::file_level_metadata[1].descriptor;
  infobycharacterid_.SetAssignDescriptorCallback(
      protobuf_dungeon_5fladder_2eproto::protobuf_AssignDescriptorsOnce);
  infobycharacterid_.SetEntryDescriptor(
      &CompositionInfo_InfoByCharacterIdEntry_descriptor);
}

CompositionInfo::~CompositionInfo() {
  // @@protoc_insertion_point(destructor:CompositionInfo)
  SharedDtor();
}

void CompositionInfo::SharedDtor() {
}

void CompositionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompositionInfo::descriptor() {
  protobuf_dungeon_5fladder_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dungeon_5fladder_2eproto::file_level_metadata[2].descriptor;
}

const CompositionInfo& CompositionInfo::default_instance() {
  protobuf_dungeon_5fladder_2eproto::InitDefaults();
  return *internal_default_instance();
}

CompositionInfo* CompositionInfo::New(::google::protobuf::Arena* arena) const {
  CompositionInfo* n = new CompositionInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CompositionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CompositionInfo)
  infobycharacterid_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CompositionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CompositionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<int64, .CompositionInfoData> infoByCharacterId = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          CompositionInfo_InfoByCharacterIdEntry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::int64, ::CompositionInfoData,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int64, ::CompositionInfoData > > parser(&infobycharacterid_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CompositionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CompositionInfo)
  return false;
#undef DO_
}

void CompositionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CompositionInfo)
  // map<int64, .CompositionInfoData> infoByCharacterId = 1;
  if (!this->infobycharacterid().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int64, ::CompositionInfoData >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->infobycharacterid().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->infobycharacterid().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int64, ::CompositionInfoData >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::CompositionInfoData >::const_iterator
          it = this->infobycharacterid().begin();
          it != this->infobycharacterid().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<CompositionInfo_InfoByCharacterIdEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(infobycharacterid_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<CompositionInfo_InfoByCharacterIdEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::CompositionInfoData >::const_iterator
          it = this->infobycharacterid().begin();
          it != this->infobycharacterid().end(); ++it) {
        entry.reset(infobycharacterid_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CompositionInfo)
}

::google::protobuf::uint8* CompositionInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CompositionInfo)
  // map<int64, .CompositionInfoData> infoByCharacterId = 1;
  if (!this->infobycharacterid().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int64, ::CompositionInfoData >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->infobycharacterid().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->infobycharacterid().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int64, ::CompositionInfoData >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::CompositionInfoData >::const_iterator
          it = this->infobycharacterid().begin();
          it != this->infobycharacterid().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<CompositionInfo_InfoByCharacterIdEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(infobycharacterid_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<CompositionInfo_InfoByCharacterIdEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::CompositionInfoData >::const_iterator
          it = this->infobycharacterid().begin();
          it != this->infobycharacterid().end(); ++it) {
        entry.reset(infobycharacterid_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CompositionInfo)
  return target;
}

size_t CompositionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CompositionInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // map<int64, .CompositionInfoData> infoByCharacterId = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->infobycharacterid_size());
  {
    ::google::protobuf::scoped_ptr<CompositionInfo_InfoByCharacterIdEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int64, ::CompositionInfoData >::const_iterator
        it = this->infobycharacterid().begin();
        it != this->infobycharacterid().end(); ++it) {
      entry.reset(infobycharacterid_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompositionInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CompositionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CompositionInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CompositionInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CompositionInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CompositionInfo)
    MergeFrom(*source);
  }
}

void CompositionInfo::MergeFrom(const CompositionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CompositionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  infobycharacterid_.MergeFrom(from.infobycharacterid_);
}

void CompositionInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CompositionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompositionInfo::CopyFrom(const CompositionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CompositionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompositionInfo::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->infobycharacterid())) return false;
  return true;
}

void CompositionInfo::Swap(CompositionInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CompositionInfo::InternalSwap(CompositionInfo* other) {
  infobycharacterid_.Swap(&other->infobycharacterid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CompositionInfo::GetMetadata() const {
  protobuf_dungeon_5fladder_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dungeon_5fladder_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CompositionInfo

// map<int64, .CompositionInfoData> infoByCharacterId = 1;
int CompositionInfo::infobycharacterid_size() const {
  return infobycharacterid_.size();
}
void CompositionInfo::clear_infobycharacterid() {
  infobycharacterid_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int64, ::CompositionInfoData >&
CompositionInfo::infobycharacterid() const {
  // @@protoc_insertion_point(field_map:CompositionInfo.infoByCharacterId)
  return infobycharacterid_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int64, ::CompositionInfoData >*
CompositionInfo::mutable_infobycharacterid() {
  // @@protoc_insertion_point(field_mutable_map:CompositionInfo.infoByCharacterId)
  return infobycharacterid_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompositionInfoData::kBreedIdFieldNumber;
const int CompositionInfoData::kIsBestRecordFieldNumber;
const int CompositionInfoData::kNameFieldNumber;
const int CompositionInfoData::kSexFieldNumber;
const int CompositionInfoData::kGuildBlazonFieldNumber;
const int CompositionInfoData::kGuildNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompositionInfoData::CompositionInfoData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dungeon_5fladder_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CompositionInfoData)
}
CompositionInfoData::CompositionInfoData(const CompositionInfoData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  guildname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_guildname()) {
    guildname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guildname_);
  }
  ::memcpy(&breedid_, &from.breedid_,
    reinterpret_cast<char*>(&sex_) -
    reinterpret_cast<char*>(&breedid_) + sizeof(sex_));
  // @@protoc_insertion_point(copy_constructor:CompositionInfoData)
}

void CompositionInfoData::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guildname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&breedid_, 0, reinterpret_cast<char*>(&sex_) -
    reinterpret_cast<char*>(&breedid_) + sizeof(sex_));
}

CompositionInfoData::~CompositionInfoData() {
  // @@protoc_insertion_point(destructor:CompositionInfoData)
  SharedDtor();
}

void CompositionInfoData::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guildname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CompositionInfoData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompositionInfoData::descriptor() {
  protobuf_dungeon_5fladder_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dungeon_5fladder_2eproto::file_level_metadata[3].descriptor;
}

const CompositionInfoData& CompositionInfoData::default_instance() {
  protobuf_dungeon_5fladder_2eproto::InitDefaults();
  return *internal_default_instance();
}

CompositionInfoData* CompositionInfoData::New(::google::protobuf::Arena* arena) const {
  CompositionInfoData* n = new CompositionInfoData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CompositionInfoData::Clear() {
// @@protoc_insertion_point(message_clear_start:CompositionInfoData)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_guildname()) {
      GOOGLE_DCHECK(!guildname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*guildname_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 60u) {
    ::memset(&breedid_, 0, reinterpret_cast<char*>(&sex_) -
      reinterpret_cast<char*>(&breedid_) + sizeof(sex_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CompositionInfoData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CompositionInfoData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 breedId = 1;
      case 1: {
        if (tag == 8u) {
          set_has_breedid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &breedid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool isBestRecord = 2;
      case 2: {
        if (tag == 16u) {
          set_has_isbestrecord();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isbestrecord_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CompositionInfoData.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sex = 4;
      case 4: {
        if (tag == 32u) {
          set_has_sex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 guildBlazon = 5;
      case 5: {
        if (tag == 40u) {
          set_has_guildblazon();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guildblazon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string guildName = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CompositionInfoData.guildName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CompositionInfoData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CompositionInfoData)
  return false;
#undef DO_
}

void CompositionInfoData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CompositionInfoData)
  // required int32 breedId = 1;
  if (has_breedid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->breedid(), output);
  }

  // optional bool isBestRecord = 2;
  if (has_isbestrecord()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isbestrecord(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CompositionInfoData.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional int32 sex = 4;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sex(), output);
  }

  // optional int64 guildBlazon = 5;
  if (has_guildblazon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->guildblazon(), output);
  }

  // optional string guildName = 6;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CompositionInfoData.guildName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->guildname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CompositionInfoData)
}

::google::protobuf::uint8* CompositionInfoData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CompositionInfoData)
  // required int32 breedId = 1;
  if (has_breedid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->breedid(), target);
  }

  // optional bool isBestRecord = 2;
  if (has_isbestrecord()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isbestrecord(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CompositionInfoData.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional int32 sex = 4;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sex(), target);
  }

  // optional int64 guildBlazon = 5;
  if (has_guildblazon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->guildblazon(), target);
  }

  // optional string guildName = 6;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CompositionInfoData.guildName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->guildname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CompositionInfoData)
  return target;
}

size_t CompositionInfoData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CompositionInfoData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required int32 breedId = 1;
  if (has_breedid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->breedid());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string guildName = 6;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

  }
  if (_has_bits_[0 / 32] & 56u) {
    // optional bool isBestRecord = 2;
    if (has_isbestrecord()) {
      total_size += 1 + 1;
    }

    // optional int64 guildBlazon = 5;
    if (has_guildblazon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guildblazon());
    }

    // optional int32 sex = 4;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompositionInfoData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CompositionInfoData)
  GOOGLE_DCHECK_NE(&from, this);
  const CompositionInfoData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CompositionInfoData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CompositionInfoData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CompositionInfoData)
    MergeFrom(*source);
  }
}

void CompositionInfoData::MergeFrom(const CompositionInfoData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CompositionInfoData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 63u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_guildname()) {
      set_has_guildname();
      guildname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guildname_);
    }
    if (from.has_breedid()) {
      set_breedid(from.breedid());
    }
    if (from.has_isbestrecord()) {
      set_isbestrecord(from.isbestrecord());
    }
    if (from.has_guildblazon()) {
      set_guildblazon(from.guildblazon());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
  }
}

void CompositionInfoData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CompositionInfoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompositionInfoData::CopyFrom(const CompositionInfoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CompositionInfoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompositionInfoData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  return true;
}

void CompositionInfoData::Swap(CompositionInfoData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CompositionInfoData::InternalSwap(CompositionInfoData* other) {
  name_.Swap(&other->name_);
  guildname_.Swap(&other->guildname_);
  std::swap(breedid_, other->breedid_);
  std::swap(isbestrecord_, other->isbestrecord_);
  std::swap(guildblazon_, other->guildblazon_);
  std::swap(sex_, other->sex_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CompositionInfoData::GetMetadata() const {
  protobuf_dungeon_5fladder_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dungeon_5fladder_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CompositionInfoData

// required int32 breedId = 1;
bool CompositionInfoData::has_breedid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CompositionInfoData::set_has_breedid() {
  _has_bits_[0] |= 0x00000004u;
}
void CompositionInfoData::clear_has_breedid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CompositionInfoData::clear_breedid() {
  breedid_ = 0;
  clear_has_breedid();
}
::google::protobuf::int32 CompositionInfoData::breedid() const {
  // @@protoc_insertion_point(field_get:CompositionInfoData.breedId)
  return breedid_;
}
void CompositionInfoData::set_breedid(::google::protobuf::int32 value) {
  set_has_breedid();
  breedid_ = value;
  // @@protoc_insertion_point(field_set:CompositionInfoData.breedId)
}

// optional bool isBestRecord = 2;
bool CompositionInfoData::has_isbestrecord() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CompositionInfoData::set_has_isbestrecord() {
  _has_bits_[0] |= 0x00000008u;
}
void CompositionInfoData::clear_has_isbestrecord() {
  _has_bits_[0] &= ~0x00000008u;
}
void CompositionInfoData::clear_isbestrecord() {
  isbestrecord_ = false;
  clear_has_isbestrecord();
}
bool CompositionInfoData::isbestrecord() const {
  // @@protoc_insertion_point(field_get:CompositionInfoData.isBestRecord)
  return isbestrecord_;
}
void CompositionInfoData::set_isbestrecord(bool value) {
  set_has_isbestrecord();
  isbestrecord_ = value;
  // @@protoc_insertion_point(field_set:CompositionInfoData.isBestRecord)
}

// optional string name = 3;
bool CompositionInfoData::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CompositionInfoData::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CompositionInfoData::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CompositionInfoData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CompositionInfoData::name() const {
  // @@protoc_insertion_point(field_get:CompositionInfoData.name)
  return name_.GetNoArena();
}
void CompositionInfoData::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CompositionInfoData.name)
}
#if LANG_CXX11
void CompositionInfoData::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CompositionInfoData.name)
}
#endif
void CompositionInfoData::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CompositionInfoData.name)
}
void CompositionInfoData::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CompositionInfoData.name)
}
::std::string* CompositionInfoData::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:CompositionInfoData.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CompositionInfoData::release_name() {
  // @@protoc_insertion_point(field_release:CompositionInfoData.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CompositionInfoData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CompositionInfoData.name)
}

// optional int32 sex = 4;
bool CompositionInfoData::has_sex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CompositionInfoData::set_has_sex() {
  _has_bits_[0] |= 0x00000020u;
}
void CompositionInfoData::clear_has_sex() {
  _has_bits_[0] &= ~0x00000020u;
}
void CompositionInfoData::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
::google::protobuf::int32 CompositionInfoData::sex() const {
  // @@protoc_insertion_point(field_get:CompositionInfoData.sex)
  return sex_;
}
void CompositionInfoData::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:CompositionInfoData.sex)
}

// optional int64 guildBlazon = 5;
bool CompositionInfoData::has_guildblazon() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CompositionInfoData::set_has_guildblazon() {
  _has_bits_[0] |= 0x00000010u;
}
void CompositionInfoData::clear_has_guildblazon() {
  _has_bits_[0] &= ~0x00000010u;
}
void CompositionInfoData::clear_guildblazon() {
  guildblazon_ = GOOGLE_LONGLONG(0);
  clear_has_guildblazon();
}
::google::protobuf::int64 CompositionInfoData::guildblazon() const {
  // @@protoc_insertion_point(field_get:CompositionInfoData.guildBlazon)
  return guildblazon_;
}
void CompositionInfoData::set_guildblazon(::google::protobuf::int64 value) {
  set_has_guildblazon();
  guildblazon_ = value;
  // @@protoc_insertion_point(field_set:CompositionInfoData.guildBlazon)
}

// optional string guildName = 6;
bool CompositionInfoData::has_guildname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CompositionInfoData::set_has_guildname() {
  _has_bits_[0] |= 0x00000002u;
}
void CompositionInfoData::clear_has_guildname() {
  _has_bits_[0] &= ~0x00000002u;
}
void CompositionInfoData::clear_guildname() {
  guildname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_guildname();
}
const ::std::string& CompositionInfoData::guildname() const {
  // @@protoc_insertion_point(field_get:CompositionInfoData.guildName)
  return guildname_.GetNoArena();
}
void CompositionInfoData::set_guildname(const ::std::string& value) {
  set_has_guildname();
  guildname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CompositionInfoData.guildName)
}
#if LANG_CXX11
void CompositionInfoData::set_guildname(::std::string&& value) {
  set_has_guildname();
  guildname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CompositionInfoData.guildName)
}
#endif
void CompositionInfoData::set_guildname(const char* value) {
  set_has_guildname();
  guildname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CompositionInfoData.guildName)
}
void CompositionInfoData::set_guildname(const char* value, size_t size) {
  set_has_guildname();
  guildname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CompositionInfoData.guildName)
}
::std::string* CompositionInfoData::mutable_guildname() {
  set_has_guildname();
  // @@protoc_insertion_point(field_mutable:CompositionInfoData.guildName)
  return guildname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CompositionInfoData::release_guildname() {
  // @@protoc_insertion_point(field_release:CompositionInfoData.guildName)
  clear_has_guildname();
  return guildname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CompositionInfoData::set_allocated_guildname(::std::string* guildname) {
  if (guildname != NULL) {
    set_has_guildname();
  } else {
    clear_has_guildname();
  }
  guildname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guildname);
  // @@protoc_insertion_point(field_set_allocated:CompositionInfoData.guildName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RankingInfo::kStartIndexFieldNumber;
const int RankingInfo::kTotalIndexCountFieldNumber;
const int RankingInfo::kFirstTeamFirstIndexFieldNumber;
const int RankingInfo::kTeamsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RankingInfo::RankingInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dungeon_5fladder_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:RankingInfo)
}
RankingInfo::RankingInfo(const RankingInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  const ::google::protobuf::Descriptor*& RankingInfo_TeamsEntry_descriptor = protobuf_dungeon_5fladder_2eproto::file_level_metadata[4].descriptor;
  teams_.SetAssignDescriptorCallback(
      protobuf_dungeon_5fladder_2eproto::protobuf_AssignDescriptorsOnce);
  teams_.SetEntryDescriptor(
      &RankingInfo_TeamsEntry_descriptor);
  teams_.MergeFrom(from.teams_);
  ::memcpy(&startindex_, &from.startindex_,
    reinterpret_cast<char*>(&firstteamfirstindex_) -
    reinterpret_cast<char*>(&startindex_) + sizeof(firstteamfirstindex_));
  // @@protoc_insertion_point(copy_constructor:RankingInfo)
}

void RankingInfo::SharedCtor() {
  _cached_size_ = 0;
  const ::google::protobuf::Descriptor*& RankingInfo_TeamsEntry_descriptor = protobuf_dungeon_5fladder_2eproto::file_level_metadata[4].descriptor;
  teams_.SetAssignDescriptorCallback(
      protobuf_dungeon_5fladder_2eproto::protobuf_AssignDescriptorsOnce);
  teams_.SetEntryDescriptor(
      &RankingInfo_TeamsEntry_descriptor);
  ::memset(&startindex_, 0, reinterpret_cast<char*>(&firstteamfirstindex_) -
    reinterpret_cast<char*>(&startindex_) + sizeof(firstteamfirstindex_));
}

RankingInfo::~RankingInfo() {
  // @@protoc_insertion_point(destructor:RankingInfo)
  SharedDtor();
}

void RankingInfo::SharedDtor() {
}

void RankingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankingInfo::descriptor() {
  protobuf_dungeon_5fladder_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dungeon_5fladder_2eproto::file_level_metadata[5].descriptor;
}

const RankingInfo& RankingInfo::default_instance() {
  protobuf_dungeon_5fladder_2eproto::InitDefaults();
  return *internal_default_instance();
}

RankingInfo* RankingInfo::New(::google::protobuf::Arena* arena) const {
  RankingInfo* n = new RankingInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RankingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:RankingInfo)
  teams_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&startindex_, 0, reinterpret_cast<char*>(&firstteamfirstindex_) -
      reinterpret_cast<char*>(&startindex_) + sizeof(firstteamfirstindex_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RankingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RankingInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 startIndex = 1;
      case 1: {
        if (tag == 8u) {
          set_has_startindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 totalIndexCount = 2;
      case 2: {
        if (tag == 16u) {
          set_has_totalindexcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalindexcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 firstTeamFirstIndex = 3;
      case 3: {
        if (tag == 24u) {
          set_has_firstteamfirstindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &firstteamfirstindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<int32, .TeamInfo> teams = 4;
      case 4: {
        if (tag == 34u) {
          DO_(input->IncrementRecursionDepth());
          RankingInfo_TeamsEntry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::int32, ::TeamInfo,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::TeamInfo > > parser(&teams_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RankingInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RankingInfo)
  return false;
#undef DO_
}

void RankingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RankingInfo)
  // required int32 startIndex = 1;
  if (has_startindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->startindex(), output);
  }

  // required int32 totalIndexCount = 2;
  if (has_totalindexcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->totalindexcount(), output);
  }

  // optional int32 firstTeamFirstIndex = 3;
  if (has_firstteamfirstindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->firstteamfirstindex(), output);
  }

  // map<int32, .TeamInfo> teams = 4;
  if (!this->teams().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::TeamInfo >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->teams().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->teams().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::TeamInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::TeamInfo >::const_iterator
          it = this->teams().begin();
          it != this->teams().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<RankingInfo_TeamsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(teams_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<RankingInfo_TeamsEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::TeamInfo >::const_iterator
          it = this->teams().begin();
          it != this->teams().end(); ++it) {
        entry.reset(teams_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RankingInfo)
}

::google::protobuf::uint8* RankingInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:RankingInfo)
  // required int32 startIndex = 1;
  if (has_startindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->startindex(), target);
  }

  // required int32 totalIndexCount = 2;
  if (has_totalindexcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->totalindexcount(), target);
  }

  // optional int32 firstTeamFirstIndex = 3;
  if (has_firstteamfirstindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->firstteamfirstindex(), target);
  }

  // map<int32, .TeamInfo> teams = 4;
  if (!this->teams().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::TeamInfo >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->teams().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->teams().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::TeamInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::TeamInfo >::const_iterator
          it = this->teams().begin();
          it != this->teams().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<RankingInfo_TeamsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(teams_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<RankingInfo_TeamsEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::TeamInfo >::const_iterator
          it = this->teams().begin();
          it != this->teams().end(); ++it) {
        entry.reset(teams_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RankingInfo)
  return target;
}

size_t RankingInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RankingInfo)
  size_t total_size = 0;

  if (has_startindex()) {
    // required int32 startIndex = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->startindex());
  }

  if (has_totalindexcount()) {
    // required int32 totalIndexCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->totalindexcount());
  }

  return total_size;
}
size_t RankingInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RankingInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 startIndex = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->startindex());

    // required int32 totalIndexCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->totalindexcount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // map<int32, .TeamInfo> teams = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->teams_size());
  {
    ::google::protobuf::scoped_ptr<RankingInfo_TeamsEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::TeamInfo >::const_iterator
        it = this->teams().begin();
        it != this->teams().end(); ++it) {
      entry.reset(teams_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // optional int32 firstTeamFirstIndex = 3;
  if (has_firstteamfirstindex()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->firstteamfirstindex());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankingInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RankingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RankingInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RankingInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RankingInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RankingInfo)
    MergeFrom(*source);
  }
}

void RankingInfo::MergeFrom(const RankingInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RankingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  teams_.MergeFrom(from.teams_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_startindex()) {
      set_startindex(from.startindex());
    }
    if (from.has_totalindexcount()) {
      set_totalindexcount(from.totalindexcount());
    }
    if (from.has_firstteamfirstindex()) {
      set_firstteamfirstindex(from.firstteamfirstindex());
    }
  }
}

void RankingInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RankingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankingInfo::CopyFrom(const RankingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RankingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankingInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->teams())) return false;
  return true;
}

void RankingInfo::Swap(RankingInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RankingInfo::InternalSwap(RankingInfo* other) {
  teams_.Swap(&other->teams_);
  std::swap(startindex_, other->startindex_);
  std::swap(totalindexcount_, other->totalindexcount_);
  std::swap(firstteamfirstindex_, other->firstteamfirstindex_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RankingInfo::GetMetadata() const {
  protobuf_dungeon_5fladder_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dungeon_5fladder_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RankingInfo

// required int32 startIndex = 1;
bool RankingInfo::has_startindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RankingInfo::set_has_startindex() {
  _has_bits_[0] |= 0x00000001u;
}
void RankingInfo::clear_has_startindex() {
  _has_bits_[0] &= ~0x00000001u;
}
void RankingInfo::clear_startindex() {
  startindex_ = 0;
  clear_has_startindex();
}
::google::protobuf::int32 RankingInfo::startindex() const {
  // @@protoc_insertion_point(field_get:RankingInfo.startIndex)
  return startindex_;
}
void RankingInfo::set_startindex(::google::protobuf::int32 value) {
  set_has_startindex();
  startindex_ = value;
  // @@protoc_insertion_point(field_set:RankingInfo.startIndex)
}

// required int32 totalIndexCount = 2;
bool RankingInfo::has_totalindexcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RankingInfo::set_has_totalindexcount() {
  _has_bits_[0] |= 0x00000002u;
}
void RankingInfo::clear_has_totalindexcount() {
  _has_bits_[0] &= ~0x00000002u;
}
void RankingInfo::clear_totalindexcount() {
  totalindexcount_ = 0;
  clear_has_totalindexcount();
}
::google::protobuf::int32 RankingInfo::totalindexcount() const {
  // @@protoc_insertion_point(field_get:RankingInfo.totalIndexCount)
  return totalindexcount_;
}
void RankingInfo::set_totalindexcount(::google::protobuf::int32 value) {
  set_has_totalindexcount();
  totalindexcount_ = value;
  // @@protoc_insertion_point(field_set:RankingInfo.totalIndexCount)
}

// optional int32 firstTeamFirstIndex = 3;
bool RankingInfo::has_firstteamfirstindex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RankingInfo::set_has_firstteamfirstindex() {
  _has_bits_[0] |= 0x00000004u;
}
void RankingInfo::clear_has_firstteamfirstindex() {
  _has_bits_[0] &= ~0x00000004u;
}
void RankingInfo::clear_firstteamfirstindex() {
  firstteamfirstindex_ = 0;
  clear_has_firstteamfirstindex();
}
::google::protobuf::int32 RankingInfo::firstteamfirstindex() const {
  // @@protoc_insertion_point(field_get:RankingInfo.firstTeamFirstIndex)
  return firstteamfirstindex_;
}
void RankingInfo::set_firstteamfirstindex(::google::protobuf::int32 value) {
  set_has_firstteamfirstindex();
  firstteamfirstindex_ = value;
  // @@protoc_insertion_point(field_set:RankingInfo.firstTeamFirstIndex)
}

// map<int32, .TeamInfo> teams = 4;
int RankingInfo::teams_size() const {
  return teams_.size();
}
void RankingInfo::clear_teams() {
  teams_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, ::TeamInfo >&
RankingInfo::teams() const {
  // @@protoc_insertion_point(field_map:RankingInfo.teams)
  return teams_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, ::TeamInfo >*
RankingInfo::mutable_teams() {
  // @@protoc_insertion_point(field_mutable_map:RankingInfo.teams)
  return teams_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
