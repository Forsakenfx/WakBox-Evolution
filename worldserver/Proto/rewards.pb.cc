// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rewards.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rewards.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace WakfuProto {
class AddRewardsMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AddRewardsMessage> {
} _AddRewardsMessage_default_instance_;
class ConsultRewardsMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ConsultRewardsMessage> {
} _ConsultRewardsMessage_default_instance_;
class ConsultRewardsResultMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ConsultRewardsResultMessage> {
} _ConsultRewardsResultMessage_default_instance_;
class ConsumeRewardMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ConsumeRewardMessage> {
} _ConsumeRewardMessage_default_instance_;
class ConsumeRewardResultMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ConsumeRewardResultMessage> {
} _ConsumeRewardResultMessage_default_instance_;
class RewardsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Rewards> {
} _Rewards_default_instance_;
class RewardsContainerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RewardsContainer> {
} _RewardsContainer_default_instance_;
class RewardDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Reward> {
} _Reward_default_instance_;
class ContainerDescriptionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ContainerDescription> {
} _ContainerDescription_default_instance_;

namespace protobuf_rewards_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[11];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRewardsMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRewardsMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRewardsMessage, rewards_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsultRewardsMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsultRewardsMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsultRewardsMessage, ownerid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsultRewardsResultMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsultRewardsResultMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsultRewardsResultMessage, ownerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsultRewardsResultMessage, rewards_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeRewardMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeRewardMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeRewardMessage, ownerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeRewardMessage, containerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeRewardMessage, rewardid_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeRewardResultMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeRewardResultMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeRewardResultMessage, ownerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeRewardResultMessage, container_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rewards, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rewards, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rewards, rewards_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardsContainer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardsContainer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardsContainer, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardsContainer, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardsContainer, reward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardsContainer, characterid_),
  1,
  0,
  ~0u,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reward, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reward, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reward, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reward, quantity_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerDescription, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerDescription, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerDescription, seasonnumber_),
  1,
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 5, sizeof(AddRewardsMessage)},
  { 6, 11, sizeof(ConsultRewardsMessage)},
  { 12, 18, sizeof(ConsultRewardsResultMessage)},
  { 20, 27, sizeof(ConsumeRewardMessage)},
  { 30, 36, sizeof(ConsumeRewardResultMessage)},
  { 38, 43, sizeof(Rewards)},
  { 44, 52, sizeof(RewardsContainer)},
  { 56, 63, sizeof(Reward)},
  { 66, 72, sizeof(ContainerDescription)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_AddRewardsMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ConsultRewardsMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ConsultRewardsResultMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ConsumeRewardMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ConsumeRewardResultMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Rewards_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RewardsContainer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Reward_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ContainerDescription_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "rewards.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 11);
  const ::google::protobuf::Descriptor* AddRewardsMessage_RewardsEntry_descriptor = protobuf_rewards_2eproto::file_level_metadata[0].descriptor;
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        AddRewardsMessage_RewardsEntry_descriptor,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int64,
            ::WakfuProto::RewardsContainer,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                AddRewardsMessage_RewardsEntry_descriptor));
  const ::google::protobuf::Descriptor* RewardsContainer_RewardEntry_descriptor = protobuf_rewards_2eproto::file_level_metadata[7].descriptor;
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        RewardsContainer_RewardEntry_descriptor,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int32,
            ::WakfuProto::Reward,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                RewardsContainer_RewardEntry_descriptor));
}

}  // namespace

void TableStruct::Shutdown() {
  _AddRewardsMessage_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _ConsultRewardsMessage_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _ConsultRewardsResultMessage_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _ConsumeRewardMessage_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _ConsumeRewardResultMessage_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _Rewards_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _RewardsContainer_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _Reward_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _ContainerDescription_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _AddRewardsMessage_default_instance_.DefaultConstruct();
  _ConsultRewardsMessage_default_instance_.DefaultConstruct();
  _ConsultRewardsResultMessage_default_instance_.DefaultConstruct();
  _ConsumeRewardMessage_default_instance_.DefaultConstruct();
  _ConsumeRewardResultMessage_default_instance_.DefaultConstruct();
  _Rewards_default_instance_.DefaultConstruct();
  _RewardsContainer_default_instance_.DefaultConstruct();
  _Reward_default_instance_.DefaultConstruct();
  _ContainerDescription_default_instance_.DefaultConstruct();
  _ConsultRewardsResultMessage_default_instance_.get_mutable()->rewards_ = const_cast< ::WakfuProto::Rewards*>(
      ::WakfuProto::Rewards::internal_default_instance());
  _ConsumeRewardResultMessage_default_instance_.get_mutable()->container_ = const_cast< ::WakfuProto::RewardsContainer*>(
      ::WakfuProto::RewardsContainer::internal_default_instance());
  _RewardsContainer_default_instance_.get_mutable()->description_ = const_cast< ::WakfuProto::ContainerDescription*>(
      ::WakfuProto::ContainerDescription::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\rrewards.proto\022\nWakfuProto\"\236\001\n\021AddRewar"
      "dsMessage\022;\n\007rewards\030\001 \003(\0132*.WakfuProto."
      "AddRewardsMessage.RewardsEntry\032L\n\014Reward"
      "sEntry\022\013\n\003key\030\001 \001(\003\022+\n\005value\030\002 \001(\0132\034.Wak"
      "fuProto.RewardsContainer:\0028\001\"(\n\025ConsultR"
      "ewardsMessage\022\017\n\007ownerId\030\001 \002(\003\"T\n\033Consul"
      "tRewardsResultMessage\022\017\n\007ownerId\030\001 \002(\003\022$"
      "\n\007rewards\030\002 \002(\0132\023.WakfuProto.Rewards\"N\n\024"
      "ConsumeRewardMessage\022\017\n\007ownerId\030\001 \002(\003\022\023\n"
      "\013containerId\030\002 \002(\003\022\020\n\010rewardId\030\003 \001(\003\"^\n\032"
      "ConsumeRewardResultMessage\022\017\n\007ownerId\030\001 "
      "\002(\003\022/\n\tcontainer\030\002 \002(\0132\034.WakfuProto.Rewa"
      "rdsContainer\"8\n\007Rewards\022-\n\007rewards\030\001 \003(\013"
      "2\034.WakfuProto.RewardsContainer\"\347\001\n\020Rewar"
      "dsContainer\022\n\n\002id\030\001 \002(\003\0225\n\013description\030\002"
      " \002(\0132 .WakfuProto.ContainerDescription\0228"
      "\n\006reward\030\003 \003(\0132(.WakfuProto.RewardsConta"
      "iner.RewardEntry\022\023\n\013characterId\030\004 \001(\003\032A\n"
      "\013RewardEntry\022\013\n\003key\030\001 \001(\005\022!\n\005value\030\002 \001(\013"
      "2\022.WakfuProto.Reward:\0028\001\"N\n\006Reward\022\n\n\002id"
      "\030\001 \002(\003\022&\n\004type\030\002 \002(\0162\030.WakfuProto.Reward"
      "sTypes\022\020\n\010quantity\030\004 \002(\005\"Y\n\024ContainerDes"
      "cription\022+\n\004type\030\001 \002(\0162\035.WakfuProto.Rewa"
      "rdsCategories\022\024\n\014seasonNumber\030\002 \001(\005*\'\n\021R"
      "ewardsCategories\022\022\n\016DUNGEON_LADDER\020\001*\030\n\014"
      "RewardsTypes\022\010\n\004ITEM\020\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1022);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rewards.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_rewards_2eproto

const ::google::protobuf::EnumDescriptor* RewardsCategories_descriptor() {
  protobuf_rewards_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rewards_2eproto::file_level_enum_descriptors[0];
}
bool RewardsCategories_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RewardsTypes_descriptor() {
  protobuf_rewards_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rewards_2eproto::file_level_enum_descriptors[1];
}
bool RewardsTypes_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddRewardsMessage::kRewardsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddRewardsMessage::AddRewardsMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rewards_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WakfuProto.AddRewardsMessage)
}
AddRewardsMessage::AddRewardsMessage(const AddRewardsMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  const ::google::protobuf::Descriptor*& AddRewardsMessage_RewardsEntry_descriptor = protobuf_rewards_2eproto::file_level_metadata[0].descriptor;
  rewards_.SetAssignDescriptorCallback(
      protobuf_rewards_2eproto::protobuf_AssignDescriptorsOnce);
  rewards_.SetEntryDescriptor(
      &AddRewardsMessage_RewardsEntry_descriptor);
  rewards_.MergeFrom(from.rewards_);
  // @@protoc_insertion_point(copy_constructor:WakfuProto.AddRewardsMessage)
}

void AddRewardsMessage::SharedCtor() {
  _cached_size_ = 0;
  const ::google::protobuf::Descriptor*& AddRewardsMessage_RewardsEntry_descriptor = protobuf_rewards_2eproto::file_level_metadata[0].descriptor;
  rewards_.SetAssignDescriptorCallback(
      protobuf_rewards_2eproto::protobuf_AssignDescriptorsOnce);
  rewards_.SetEntryDescriptor(
      &AddRewardsMessage_RewardsEntry_descriptor);
}

AddRewardsMessage::~AddRewardsMessage() {
  // @@protoc_insertion_point(destructor:WakfuProto.AddRewardsMessage)
  SharedDtor();
}

void AddRewardsMessage::SharedDtor() {
}

void AddRewardsMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddRewardsMessage::descriptor() {
  protobuf_rewards_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rewards_2eproto::file_level_metadata[1].descriptor;
}

const AddRewardsMessage& AddRewardsMessage::default_instance() {
  protobuf_rewards_2eproto::InitDefaults();
  return *internal_default_instance();
}

AddRewardsMessage* AddRewardsMessage::New(::google::protobuf::Arena* arena) const {
  AddRewardsMessage* n = new AddRewardsMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddRewardsMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:WakfuProto.AddRewardsMessage)
  rewards_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AddRewardsMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WakfuProto.AddRewardsMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<int64, .WakfuProto.RewardsContainer> rewards = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          AddRewardsMessage_RewardsEntry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::int64, ::WakfuProto::RewardsContainer,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int64, ::WakfuProto::RewardsContainer > > parser(&rewards_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WakfuProto.AddRewardsMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WakfuProto.AddRewardsMessage)
  return false;
#undef DO_
}

void AddRewardsMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WakfuProto.AddRewardsMessage)
  // map<int64, .WakfuProto.RewardsContainer> rewards = 1;
  if (!this->rewards().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int64, ::WakfuProto::RewardsContainer >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->rewards().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->rewards().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int64, ::WakfuProto::RewardsContainer >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::WakfuProto::RewardsContainer >::const_iterator
          it = this->rewards().begin();
          it != this->rewards().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<AddRewardsMessage_RewardsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(rewards_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<AddRewardsMessage_RewardsEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::WakfuProto::RewardsContainer >::const_iterator
          it = this->rewards().begin();
          it != this->rewards().end(); ++it) {
        entry.reset(rewards_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WakfuProto.AddRewardsMessage)
}

::google::protobuf::uint8* AddRewardsMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WakfuProto.AddRewardsMessage)
  // map<int64, .WakfuProto.RewardsContainer> rewards = 1;
  if (!this->rewards().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int64, ::WakfuProto::RewardsContainer >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->rewards().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->rewards().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int64, ::WakfuProto::RewardsContainer >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::WakfuProto::RewardsContainer >::const_iterator
          it = this->rewards().begin();
          it != this->rewards().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<AddRewardsMessage_RewardsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(rewards_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<AddRewardsMessage_RewardsEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::WakfuProto::RewardsContainer >::const_iterator
          it = this->rewards().begin();
          it != this->rewards().end(); ++it) {
        entry.reset(rewards_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WakfuProto.AddRewardsMessage)
  return target;
}

size_t AddRewardsMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WakfuProto.AddRewardsMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // map<int64, .WakfuProto.RewardsContainer> rewards = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->rewards_size());
  {
    ::google::protobuf::scoped_ptr<AddRewardsMessage_RewardsEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int64, ::WakfuProto::RewardsContainer >::const_iterator
        it = this->rewards().begin();
        it != this->rewards().end(); ++it) {
      entry.reset(rewards_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddRewardsMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WakfuProto.AddRewardsMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const AddRewardsMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddRewardsMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WakfuProto.AddRewardsMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WakfuProto.AddRewardsMessage)
    MergeFrom(*source);
  }
}

void AddRewardsMessage::MergeFrom(const AddRewardsMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WakfuProto.AddRewardsMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rewards_.MergeFrom(from.rewards_);
}

void AddRewardsMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WakfuProto.AddRewardsMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddRewardsMessage::CopyFrom(const AddRewardsMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WakfuProto.AddRewardsMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddRewardsMessage::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->rewards())) return false;
  return true;
}

void AddRewardsMessage::Swap(AddRewardsMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddRewardsMessage::InternalSwap(AddRewardsMessage* other) {
  rewards_.Swap(&other->rewards_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddRewardsMessage::GetMetadata() const {
  protobuf_rewards_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rewards_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddRewardsMessage

// map<int64, .WakfuProto.RewardsContainer> rewards = 1;
int AddRewardsMessage::rewards_size() const {
  return rewards_.size();
}
void AddRewardsMessage::clear_rewards() {
  rewards_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int64, ::WakfuProto::RewardsContainer >&
AddRewardsMessage::rewards() const {
  // @@protoc_insertion_point(field_map:WakfuProto.AddRewardsMessage.rewards)
  return rewards_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int64, ::WakfuProto::RewardsContainer >*
AddRewardsMessage::mutable_rewards() {
  // @@protoc_insertion_point(field_mutable_map:WakfuProto.AddRewardsMessage.rewards)
  return rewards_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConsultRewardsMessage::kOwnerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsultRewardsMessage::ConsultRewardsMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rewards_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WakfuProto.ConsultRewardsMessage)
}
ConsultRewardsMessage::ConsultRewardsMessage(const ConsultRewardsMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ownerid_ = from.ownerid_;
  // @@protoc_insertion_point(copy_constructor:WakfuProto.ConsultRewardsMessage)
}

void ConsultRewardsMessage::SharedCtor() {
  _cached_size_ = 0;
  ownerid_ = GOOGLE_LONGLONG(0);
}

ConsultRewardsMessage::~ConsultRewardsMessage() {
  // @@protoc_insertion_point(destructor:WakfuProto.ConsultRewardsMessage)
  SharedDtor();
}

void ConsultRewardsMessage::SharedDtor() {
}

void ConsultRewardsMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConsultRewardsMessage::descriptor() {
  protobuf_rewards_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rewards_2eproto::file_level_metadata[2].descriptor;
}

const ConsultRewardsMessage& ConsultRewardsMessage::default_instance() {
  protobuf_rewards_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConsultRewardsMessage* ConsultRewardsMessage::New(::google::protobuf::Arena* arena) const {
  ConsultRewardsMessage* n = new ConsultRewardsMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConsultRewardsMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:WakfuProto.ConsultRewardsMessage)
  ownerid_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConsultRewardsMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WakfuProto.ConsultRewardsMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 ownerId = 1;
      case 1: {
        if (tag == 8u) {
          set_has_ownerid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ownerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WakfuProto.ConsultRewardsMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WakfuProto.ConsultRewardsMessage)
  return false;
#undef DO_
}

void ConsultRewardsMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WakfuProto.ConsultRewardsMessage)
  // required int64 ownerId = 1;
  if (has_ownerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->ownerid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WakfuProto.ConsultRewardsMessage)
}

::google::protobuf::uint8* ConsultRewardsMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WakfuProto.ConsultRewardsMessage)
  // required int64 ownerId = 1;
  if (has_ownerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->ownerid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WakfuProto.ConsultRewardsMessage)
  return target;
}

size_t ConsultRewardsMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WakfuProto.ConsultRewardsMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required int64 ownerId = 1;
  if (has_ownerid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->ownerid());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConsultRewardsMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WakfuProto.ConsultRewardsMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsultRewardsMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConsultRewardsMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WakfuProto.ConsultRewardsMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WakfuProto.ConsultRewardsMessage)
    MergeFrom(*source);
  }
}

void ConsultRewardsMessage::MergeFrom(const ConsultRewardsMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WakfuProto.ConsultRewardsMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ownerid()) {
    set_ownerid(from.ownerid());
  }
}

void ConsultRewardsMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WakfuProto.ConsultRewardsMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsultRewardsMessage::CopyFrom(const ConsultRewardsMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WakfuProto.ConsultRewardsMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsultRewardsMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ConsultRewardsMessage::Swap(ConsultRewardsMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsultRewardsMessage::InternalSwap(ConsultRewardsMessage* other) {
  std::swap(ownerid_, other->ownerid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConsultRewardsMessage::GetMetadata() const {
  protobuf_rewards_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rewards_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConsultRewardsMessage

// required int64 ownerId = 1;
bool ConsultRewardsMessage::has_ownerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ConsultRewardsMessage::set_has_ownerid() {
  _has_bits_[0] |= 0x00000001u;
}
void ConsultRewardsMessage::clear_has_ownerid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ConsultRewardsMessage::clear_ownerid() {
  ownerid_ = GOOGLE_LONGLONG(0);
  clear_has_ownerid();
}
::google::protobuf::int64 ConsultRewardsMessage::ownerid() const {
  // @@protoc_insertion_point(field_get:WakfuProto.ConsultRewardsMessage.ownerId)
  return ownerid_;
}
void ConsultRewardsMessage::set_ownerid(::google::protobuf::int64 value) {
  set_has_ownerid();
  ownerid_ = value;
  // @@protoc_insertion_point(field_set:WakfuProto.ConsultRewardsMessage.ownerId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConsultRewardsResultMessage::kOwnerIdFieldNumber;
const int ConsultRewardsResultMessage::kRewardsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsultRewardsResultMessage::ConsultRewardsResultMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rewards_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WakfuProto.ConsultRewardsResultMessage)
}
ConsultRewardsResultMessage::ConsultRewardsResultMessage(const ConsultRewardsResultMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_rewards()) {
    rewards_ = new ::WakfuProto::Rewards(*from.rewards_);
  } else {
    rewards_ = NULL;
  }
  ownerid_ = from.ownerid_;
  // @@protoc_insertion_point(copy_constructor:WakfuProto.ConsultRewardsResultMessage)
}

void ConsultRewardsResultMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&rewards_, 0, reinterpret_cast<char*>(&ownerid_) -
    reinterpret_cast<char*>(&rewards_) + sizeof(ownerid_));
}

ConsultRewardsResultMessage::~ConsultRewardsResultMessage() {
  // @@protoc_insertion_point(destructor:WakfuProto.ConsultRewardsResultMessage)
  SharedDtor();
}

void ConsultRewardsResultMessage::SharedDtor() {
  if (this != internal_default_instance()) {
    delete rewards_;
  }
}

void ConsultRewardsResultMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConsultRewardsResultMessage::descriptor() {
  protobuf_rewards_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rewards_2eproto::file_level_metadata[3].descriptor;
}

const ConsultRewardsResultMessage& ConsultRewardsResultMessage::default_instance() {
  protobuf_rewards_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConsultRewardsResultMessage* ConsultRewardsResultMessage::New(::google::protobuf::Arena* arena) const {
  ConsultRewardsResultMessage* n = new ConsultRewardsResultMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConsultRewardsResultMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:WakfuProto.ConsultRewardsResultMessage)
  if (has_rewards()) {
    GOOGLE_DCHECK(rewards_ != NULL);
    rewards_->::WakfuProto::Rewards::Clear();
  }
  ownerid_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConsultRewardsResultMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WakfuProto.ConsultRewardsResultMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 ownerId = 1;
      case 1: {
        if (tag == 8u) {
          set_has_ownerid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ownerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .WakfuProto.Rewards rewards = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rewards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WakfuProto.ConsultRewardsResultMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WakfuProto.ConsultRewardsResultMessage)
  return false;
#undef DO_
}

void ConsultRewardsResultMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WakfuProto.ConsultRewardsResultMessage)
  // required int64 ownerId = 1;
  if (has_ownerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->ownerid(), output);
  }

  // required .WakfuProto.Rewards rewards = 2;
  if (has_rewards()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->rewards_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WakfuProto.ConsultRewardsResultMessage)
}

::google::protobuf::uint8* ConsultRewardsResultMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WakfuProto.ConsultRewardsResultMessage)
  // required int64 ownerId = 1;
  if (has_ownerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->ownerid(), target);
  }

  // required .WakfuProto.Rewards rewards = 2;
  if (has_rewards()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->rewards_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WakfuProto.ConsultRewardsResultMessage)
  return target;
}

size_t ConsultRewardsResultMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:WakfuProto.ConsultRewardsResultMessage)
  size_t total_size = 0;

  if (has_rewards()) {
    // required .WakfuProto.Rewards rewards = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rewards_);
  }

  if (has_ownerid()) {
    // required int64 ownerId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->ownerid());
  }

  return total_size;
}
size_t ConsultRewardsResultMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WakfuProto.ConsultRewardsResultMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .WakfuProto.Rewards rewards = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rewards_);

    // required int64 ownerId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->ownerid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConsultRewardsResultMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WakfuProto.ConsultRewardsResultMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsultRewardsResultMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConsultRewardsResultMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WakfuProto.ConsultRewardsResultMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WakfuProto.ConsultRewardsResultMessage)
    MergeFrom(*source);
  }
}

void ConsultRewardsResultMessage::MergeFrom(const ConsultRewardsResultMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WakfuProto.ConsultRewardsResultMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_rewards()) {
      mutable_rewards()->::WakfuProto::Rewards::MergeFrom(from.rewards());
    }
    if (from.has_ownerid()) {
      set_ownerid(from.ownerid());
    }
  }
}

void ConsultRewardsResultMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WakfuProto.ConsultRewardsResultMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsultRewardsResultMessage::CopyFrom(const ConsultRewardsResultMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WakfuProto.ConsultRewardsResultMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsultRewardsResultMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_rewards()) {
    if (!this->rewards_->IsInitialized()) return false;
  }
  return true;
}

void ConsultRewardsResultMessage::Swap(ConsultRewardsResultMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsultRewardsResultMessage::InternalSwap(ConsultRewardsResultMessage* other) {
  std::swap(rewards_, other->rewards_);
  std::swap(ownerid_, other->ownerid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConsultRewardsResultMessage::GetMetadata() const {
  protobuf_rewards_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rewards_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConsultRewardsResultMessage

// required int64 ownerId = 1;
bool ConsultRewardsResultMessage::has_ownerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ConsultRewardsResultMessage::set_has_ownerid() {
  _has_bits_[0] |= 0x00000002u;
}
void ConsultRewardsResultMessage::clear_has_ownerid() {
  _has_bits_[0] &= ~0x00000002u;
}
void ConsultRewardsResultMessage::clear_ownerid() {
  ownerid_ = GOOGLE_LONGLONG(0);
  clear_has_ownerid();
}
::google::protobuf::int64 ConsultRewardsResultMessage::ownerid() const {
  // @@protoc_insertion_point(field_get:WakfuProto.ConsultRewardsResultMessage.ownerId)
  return ownerid_;
}
void ConsultRewardsResultMessage::set_ownerid(::google::protobuf::int64 value) {
  set_has_ownerid();
  ownerid_ = value;
  // @@protoc_insertion_point(field_set:WakfuProto.ConsultRewardsResultMessage.ownerId)
}

// required .WakfuProto.Rewards rewards = 2;
bool ConsultRewardsResultMessage::has_rewards() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ConsultRewardsResultMessage::set_has_rewards() {
  _has_bits_[0] |= 0x00000001u;
}
void ConsultRewardsResultMessage::clear_has_rewards() {
  _has_bits_[0] &= ~0x00000001u;
}
void ConsultRewardsResultMessage::clear_rewards() {
  if (rewards_ != NULL) rewards_->::WakfuProto::Rewards::Clear();
  clear_has_rewards();
}
const ::WakfuProto::Rewards& ConsultRewardsResultMessage::rewards() const {
  // @@protoc_insertion_point(field_get:WakfuProto.ConsultRewardsResultMessage.rewards)
  return rewards_ != NULL ? *rewards_
                         : *::WakfuProto::Rewards::internal_default_instance();
}
::WakfuProto::Rewards* ConsultRewardsResultMessage::mutable_rewards() {
  set_has_rewards();
  if (rewards_ == NULL) {
    rewards_ = new ::WakfuProto::Rewards;
  }
  // @@protoc_insertion_point(field_mutable:WakfuProto.ConsultRewardsResultMessage.rewards)
  return rewards_;
}
::WakfuProto::Rewards* ConsultRewardsResultMessage::release_rewards() {
  // @@protoc_insertion_point(field_release:WakfuProto.ConsultRewardsResultMessage.rewards)
  clear_has_rewards();
  ::WakfuProto::Rewards* temp = rewards_;
  rewards_ = NULL;
  return temp;
}
void ConsultRewardsResultMessage::set_allocated_rewards(::WakfuProto::Rewards* rewards) {
  delete rewards_;
  rewards_ = rewards;
  if (rewards) {
    set_has_rewards();
  } else {
    clear_has_rewards();
  }
  // @@protoc_insertion_point(field_set_allocated:WakfuProto.ConsultRewardsResultMessage.rewards)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConsumeRewardMessage::kOwnerIdFieldNumber;
const int ConsumeRewardMessage::kContainerIdFieldNumber;
const int ConsumeRewardMessage::kRewardIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsumeRewardMessage::ConsumeRewardMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rewards_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WakfuProto.ConsumeRewardMessage)
}
ConsumeRewardMessage::ConsumeRewardMessage(const ConsumeRewardMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ownerid_, &from.ownerid_,
    reinterpret_cast<char*>(&rewardid_) -
    reinterpret_cast<char*>(&ownerid_) + sizeof(rewardid_));
  // @@protoc_insertion_point(copy_constructor:WakfuProto.ConsumeRewardMessage)
}

void ConsumeRewardMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ownerid_, 0, reinterpret_cast<char*>(&rewardid_) -
    reinterpret_cast<char*>(&ownerid_) + sizeof(rewardid_));
}

ConsumeRewardMessage::~ConsumeRewardMessage() {
  // @@protoc_insertion_point(destructor:WakfuProto.ConsumeRewardMessage)
  SharedDtor();
}

void ConsumeRewardMessage::SharedDtor() {
}

void ConsumeRewardMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConsumeRewardMessage::descriptor() {
  protobuf_rewards_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rewards_2eproto::file_level_metadata[4].descriptor;
}

const ConsumeRewardMessage& ConsumeRewardMessage::default_instance() {
  protobuf_rewards_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConsumeRewardMessage* ConsumeRewardMessage::New(::google::protobuf::Arena* arena) const {
  ConsumeRewardMessage* n = new ConsumeRewardMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConsumeRewardMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:WakfuProto.ConsumeRewardMessage)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&ownerid_, 0, reinterpret_cast<char*>(&rewardid_) -
      reinterpret_cast<char*>(&ownerid_) + sizeof(rewardid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConsumeRewardMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WakfuProto.ConsumeRewardMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 ownerId = 1;
      case 1: {
        if (tag == 8u) {
          set_has_ownerid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ownerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 containerId = 2;
      case 2: {
        if (tag == 16u) {
          set_has_containerid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &containerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 rewardId = 3;
      case 3: {
        if (tag == 24u) {
          set_has_rewardid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rewardid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WakfuProto.ConsumeRewardMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WakfuProto.ConsumeRewardMessage)
  return false;
#undef DO_
}

void ConsumeRewardMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WakfuProto.ConsumeRewardMessage)
  // required int64 ownerId = 1;
  if (has_ownerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->ownerid(), output);
  }

  // required int64 containerId = 2;
  if (has_containerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->containerid(), output);
  }

  // optional int64 rewardId = 3;
  if (has_rewardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->rewardid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WakfuProto.ConsumeRewardMessage)
}

::google::protobuf::uint8* ConsumeRewardMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WakfuProto.ConsumeRewardMessage)
  // required int64 ownerId = 1;
  if (has_ownerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->ownerid(), target);
  }

  // required int64 containerId = 2;
  if (has_containerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->containerid(), target);
  }

  // optional int64 rewardId = 3;
  if (has_rewardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->rewardid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WakfuProto.ConsumeRewardMessage)
  return target;
}

size_t ConsumeRewardMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:WakfuProto.ConsumeRewardMessage)
  size_t total_size = 0;

  if (has_ownerid()) {
    // required int64 ownerId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->ownerid());
  }

  if (has_containerid()) {
    // required int64 containerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->containerid());
  }

  return total_size;
}
size_t ConsumeRewardMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WakfuProto.ConsumeRewardMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 ownerId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->ownerid());

    // required int64 containerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->containerid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional int64 rewardId = 3;
  if (has_rewardid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->rewardid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConsumeRewardMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WakfuProto.ConsumeRewardMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsumeRewardMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConsumeRewardMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WakfuProto.ConsumeRewardMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WakfuProto.ConsumeRewardMessage)
    MergeFrom(*source);
  }
}

void ConsumeRewardMessage::MergeFrom(const ConsumeRewardMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WakfuProto.ConsumeRewardMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_ownerid()) {
      set_ownerid(from.ownerid());
    }
    if (from.has_containerid()) {
      set_containerid(from.containerid());
    }
    if (from.has_rewardid()) {
      set_rewardid(from.rewardid());
    }
  }
}

void ConsumeRewardMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WakfuProto.ConsumeRewardMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsumeRewardMessage::CopyFrom(const ConsumeRewardMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WakfuProto.ConsumeRewardMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsumeRewardMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ConsumeRewardMessage::Swap(ConsumeRewardMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsumeRewardMessage::InternalSwap(ConsumeRewardMessage* other) {
  std::swap(ownerid_, other->ownerid_);
  std::swap(containerid_, other->containerid_);
  std::swap(rewardid_, other->rewardid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConsumeRewardMessage::GetMetadata() const {
  protobuf_rewards_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rewards_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConsumeRewardMessage

// required int64 ownerId = 1;
bool ConsumeRewardMessage::has_ownerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ConsumeRewardMessage::set_has_ownerid() {
  _has_bits_[0] |= 0x00000001u;
}
void ConsumeRewardMessage::clear_has_ownerid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ConsumeRewardMessage::clear_ownerid() {
  ownerid_ = GOOGLE_LONGLONG(0);
  clear_has_ownerid();
}
::google::protobuf::int64 ConsumeRewardMessage::ownerid() const {
  // @@protoc_insertion_point(field_get:WakfuProto.ConsumeRewardMessage.ownerId)
  return ownerid_;
}
void ConsumeRewardMessage::set_ownerid(::google::protobuf::int64 value) {
  set_has_ownerid();
  ownerid_ = value;
  // @@protoc_insertion_point(field_set:WakfuProto.ConsumeRewardMessage.ownerId)
}

// required int64 containerId = 2;
bool ConsumeRewardMessage::has_containerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ConsumeRewardMessage::set_has_containerid() {
  _has_bits_[0] |= 0x00000002u;
}
void ConsumeRewardMessage::clear_has_containerid() {
  _has_bits_[0] &= ~0x00000002u;
}
void ConsumeRewardMessage::clear_containerid() {
  containerid_ = GOOGLE_LONGLONG(0);
  clear_has_containerid();
}
::google::protobuf::int64 ConsumeRewardMessage::containerid() const {
  // @@protoc_insertion_point(field_get:WakfuProto.ConsumeRewardMessage.containerId)
  return containerid_;
}
void ConsumeRewardMessage::set_containerid(::google::protobuf::int64 value) {
  set_has_containerid();
  containerid_ = value;
  // @@protoc_insertion_point(field_set:WakfuProto.ConsumeRewardMessage.containerId)
}

// optional int64 rewardId = 3;
bool ConsumeRewardMessage::has_rewardid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ConsumeRewardMessage::set_has_rewardid() {
  _has_bits_[0] |= 0x00000004u;
}
void ConsumeRewardMessage::clear_has_rewardid() {
  _has_bits_[0] &= ~0x00000004u;
}
void ConsumeRewardMessage::clear_rewardid() {
  rewardid_ = GOOGLE_LONGLONG(0);
  clear_has_rewardid();
}
::google::protobuf::int64 ConsumeRewardMessage::rewardid() const {
  // @@protoc_insertion_point(field_get:WakfuProto.ConsumeRewardMessage.rewardId)
  return rewardid_;
}
void ConsumeRewardMessage::set_rewardid(::google::protobuf::int64 value) {
  set_has_rewardid();
  rewardid_ = value;
  // @@protoc_insertion_point(field_set:WakfuProto.ConsumeRewardMessage.rewardId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConsumeRewardResultMessage::kOwnerIdFieldNumber;
const int ConsumeRewardResultMessage::kContainerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsumeRewardResultMessage::ConsumeRewardResultMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rewards_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WakfuProto.ConsumeRewardResultMessage)
}
ConsumeRewardResultMessage::ConsumeRewardResultMessage(const ConsumeRewardResultMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_container()) {
    container_ = new ::WakfuProto::RewardsContainer(*from.container_);
  } else {
    container_ = NULL;
  }
  ownerid_ = from.ownerid_;
  // @@protoc_insertion_point(copy_constructor:WakfuProto.ConsumeRewardResultMessage)
}

void ConsumeRewardResultMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&container_, 0, reinterpret_cast<char*>(&ownerid_) -
    reinterpret_cast<char*>(&container_) + sizeof(ownerid_));
}

ConsumeRewardResultMessage::~ConsumeRewardResultMessage() {
  // @@protoc_insertion_point(destructor:WakfuProto.ConsumeRewardResultMessage)
  SharedDtor();
}

void ConsumeRewardResultMessage::SharedDtor() {
  if (this != internal_default_instance()) {
    delete container_;
  }
}

void ConsumeRewardResultMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConsumeRewardResultMessage::descriptor() {
  protobuf_rewards_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rewards_2eproto::file_level_metadata[5].descriptor;
}

const ConsumeRewardResultMessage& ConsumeRewardResultMessage::default_instance() {
  protobuf_rewards_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConsumeRewardResultMessage* ConsumeRewardResultMessage::New(::google::protobuf::Arena* arena) const {
  ConsumeRewardResultMessage* n = new ConsumeRewardResultMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConsumeRewardResultMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:WakfuProto.ConsumeRewardResultMessage)
  if (has_container()) {
    GOOGLE_DCHECK(container_ != NULL);
    container_->::WakfuProto::RewardsContainer::Clear();
  }
  ownerid_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConsumeRewardResultMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WakfuProto.ConsumeRewardResultMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 ownerId = 1;
      case 1: {
        if (tag == 8u) {
          set_has_ownerid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ownerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .WakfuProto.RewardsContainer container = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_container()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WakfuProto.ConsumeRewardResultMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WakfuProto.ConsumeRewardResultMessage)
  return false;
#undef DO_
}

void ConsumeRewardResultMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WakfuProto.ConsumeRewardResultMessage)
  // required int64 ownerId = 1;
  if (has_ownerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->ownerid(), output);
  }

  // required .WakfuProto.RewardsContainer container = 2;
  if (has_container()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->container_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WakfuProto.ConsumeRewardResultMessage)
}

::google::protobuf::uint8* ConsumeRewardResultMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WakfuProto.ConsumeRewardResultMessage)
  // required int64 ownerId = 1;
  if (has_ownerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->ownerid(), target);
  }

  // required .WakfuProto.RewardsContainer container = 2;
  if (has_container()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->container_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WakfuProto.ConsumeRewardResultMessage)
  return target;
}

size_t ConsumeRewardResultMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:WakfuProto.ConsumeRewardResultMessage)
  size_t total_size = 0;

  if (has_container()) {
    // required .WakfuProto.RewardsContainer container = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->container_);
  }

  if (has_ownerid()) {
    // required int64 ownerId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->ownerid());
  }

  return total_size;
}
size_t ConsumeRewardResultMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WakfuProto.ConsumeRewardResultMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .WakfuProto.RewardsContainer container = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->container_);

    // required int64 ownerId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->ownerid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConsumeRewardResultMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WakfuProto.ConsumeRewardResultMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsumeRewardResultMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConsumeRewardResultMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WakfuProto.ConsumeRewardResultMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WakfuProto.ConsumeRewardResultMessage)
    MergeFrom(*source);
  }
}

void ConsumeRewardResultMessage::MergeFrom(const ConsumeRewardResultMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WakfuProto.ConsumeRewardResultMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_container()) {
      mutable_container()->::WakfuProto::RewardsContainer::MergeFrom(from.container());
    }
    if (from.has_ownerid()) {
      set_ownerid(from.ownerid());
    }
  }
}

void ConsumeRewardResultMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WakfuProto.ConsumeRewardResultMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsumeRewardResultMessage::CopyFrom(const ConsumeRewardResultMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WakfuProto.ConsumeRewardResultMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsumeRewardResultMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_container()) {
    if (!this->container_->IsInitialized()) return false;
  }
  return true;
}

void ConsumeRewardResultMessage::Swap(ConsumeRewardResultMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsumeRewardResultMessage::InternalSwap(ConsumeRewardResultMessage* other) {
  std::swap(container_, other->container_);
  std::swap(ownerid_, other->ownerid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConsumeRewardResultMessage::GetMetadata() const {
  protobuf_rewards_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rewards_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConsumeRewardResultMessage

// required int64 ownerId = 1;
bool ConsumeRewardResultMessage::has_ownerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ConsumeRewardResultMessage::set_has_ownerid() {
  _has_bits_[0] |= 0x00000002u;
}
void ConsumeRewardResultMessage::clear_has_ownerid() {
  _has_bits_[0] &= ~0x00000002u;
}
void ConsumeRewardResultMessage::clear_ownerid() {
  ownerid_ = GOOGLE_LONGLONG(0);
  clear_has_ownerid();
}
::google::protobuf::int64 ConsumeRewardResultMessage::ownerid() const {
  // @@protoc_insertion_point(field_get:WakfuProto.ConsumeRewardResultMessage.ownerId)
  return ownerid_;
}
void ConsumeRewardResultMessage::set_ownerid(::google::protobuf::int64 value) {
  set_has_ownerid();
  ownerid_ = value;
  // @@protoc_insertion_point(field_set:WakfuProto.ConsumeRewardResultMessage.ownerId)
}

// required .WakfuProto.RewardsContainer container = 2;
bool ConsumeRewardResultMessage::has_container() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ConsumeRewardResultMessage::set_has_container() {
  _has_bits_[0] |= 0x00000001u;
}
void ConsumeRewardResultMessage::clear_has_container() {
  _has_bits_[0] &= ~0x00000001u;
}
void ConsumeRewardResultMessage::clear_container() {
  if (container_ != NULL) container_->::WakfuProto::RewardsContainer::Clear();
  clear_has_container();
}
const ::WakfuProto::RewardsContainer& ConsumeRewardResultMessage::container() const {
  // @@protoc_insertion_point(field_get:WakfuProto.ConsumeRewardResultMessage.container)
  return container_ != NULL ? *container_
                         : *::WakfuProto::RewardsContainer::internal_default_instance();
}
::WakfuProto::RewardsContainer* ConsumeRewardResultMessage::mutable_container() {
  set_has_container();
  if (container_ == NULL) {
    container_ = new ::WakfuProto::RewardsContainer;
  }
  // @@protoc_insertion_point(field_mutable:WakfuProto.ConsumeRewardResultMessage.container)
  return container_;
}
::WakfuProto::RewardsContainer* ConsumeRewardResultMessage::release_container() {
  // @@protoc_insertion_point(field_release:WakfuProto.ConsumeRewardResultMessage.container)
  clear_has_container();
  ::WakfuProto::RewardsContainer* temp = container_;
  container_ = NULL;
  return temp;
}
void ConsumeRewardResultMessage::set_allocated_container(::WakfuProto::RewardsContainer* container) {
  delete container_;
  container_ = container;
  if (container) {
    set_has_container();
  } else {
    clear_has_container();
  }
  // @@protoc_insertion_point(field_set_allocated:WakfuProto.ConsumeRewardResultMessage.container)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rewards::kRewardsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rewards::Rewards()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rewards_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WakfuProto.Rewards)
}
Rewards::Rewards(const Rewards& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      rewards_(from.rewards_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:WakfuProto.Rewards)
}

void Rewards::SharedCtor() {
  _cached_size_ = 0;
}

Rewards::~Rewards() {
  // @@protoc_insertion_point(destructor:WakfuProto.Rewards)
  SharedDtor();
}

void Rewards::SharedDtor() {
}

void Rewards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rewards::descriptor() {
  protobuf_rewards_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rewards_2eproto::file_level_metadata[6].descriptor;
}

const Rewards& Rewards::default_instance() {
  protobuf_rewards_2eproto::InitDefaults();
  return *internal_default_instance();
}

Rewards* Rewards::New(::google::protobuf::Arena* arena) const {
  Rewards* n = new Rewards;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Rewards::Clear() {
// @@protoc_insertion_point(message_clear_start:WakfuProto.Rewards)
  rewards_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Rewards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WakfuProto.Rewards)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .WakfuProto.RewardsContainer rewards = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_rewards()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WakfuProto.Rewards)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WakfuProto.Rewards)
  return false;
#undef DO_
}

void Rewards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WakfuProto.Rewards)
  // repeated .WakfuProto.RewardsContainer rewards = 1;
  for (unsigned int i = 0, n = this->rewards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewards(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WakfuProto.Rewards)
}

::google::protobuf::uint8* Rewards::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WakfuProto.Rewards)
  // repeated .WakfuProto.RewardsContainer rewards = 1;
  for (unsigned int i = 0, n = this->rewards_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->rewards(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WakfuProto.Rewards)
  return target;
}

size_t Rewards::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WakfuProto.Rewards)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .WakfuProto.RewardsContainer rewards = 1;
  {
    unsigned int count = this->rewards_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rewards(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rewards::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WakfuProto.Rewards)
  GOOGLE_DCHECK_NE(&from, this);
  const Rewards* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Rewards>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WakfuProto.Rewards)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WakfuProto.Rewards)
    MergeFrom(*source);
  }
}

void Rewards::MergeFrom(const Rewards& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WakfuProto.Rewards)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rewards_.MergeFrom(from.rewards_);
}

void Rewards::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WakfuProto.Rewards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rewards::CopyFrom(const Rewards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WakfuProto.Rewards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rewards::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->rewards())) return false;
  return true;
}

void Rewards::Swap(Rewards* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rewards::InternalSwap(Rewards* other) {
  rewards_.UnsafeArenaSwap(&other->rewards_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Rewards::GetMetadata() const {
  protobuf_rewards_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rewards_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Rewards

// repeated .WakfuProto.RewardsContainer rewards = 1;
int Rewards::rewards_size() const {
  return rewards_.size();
}
void Rewards::clear_rewards() {
  rewards_.Clear();
}
const ::WakfuProto::RewardsContainer& Rewards::rewards(int index) const {
  // @@protoc_insertion_point(field_get:WakfuProto.Rewards.rewards)
  return rewards_.Get(index);
}
::WakfuProto::RewardsContainer* Rewards::mutable_rewards(int index) {
  // @@protoc_insertion_point(field_mutable:WakfuProto.Rewards.rewards)
  return rewards_.Mutable(index);
}
::WakfuProto::RewardsContainer* Rewards::add_rewards() {
  // @@protoc_insertion_point(field_add:WakfuProto.Rewards.rewards)
  return rewards_.Add();
}
::google::protobuf::RepeatedPtrField< ::WakfuProto::RewardsContainer >*
Rewards::mutable_rewards() {
  // @@protoc_insertion_point(field_mutable_list:WakfuProto.Rewards.rewards)
  return &rewards_;
}
const ::google::protobuf::RepeatedPtrField< ::WakfuProto::RewardsContainer >&
Rewards::rewards() const {
  // @@protoc_insertion_point(field_list:WakfuProto.Rewards.rewards)
  return rewards_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RewardsContainer::kIdFieldNumber;
const int RewardsContainer::kDescriptionFieldNumber;
const int RewardsContainer::kRewardFieldNumber;
const int RewardsContainer::kCharacterIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RewardsContainer::RewardsContainer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rewards_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WakfuProto.RewardsContainer)
}
RewardsContainer::RewardsContainer(const RewardsContainer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  const ::google::protobuf::Descriptor*& RewardsContainer_RewardEntry_descriptor = protobuf_rewards_2eproto::file_level_metadata[7].descriptor;
  reward_.SetAssignDescriptorCallback(
      protobuf_rewards_2eproto::protobuf_AssignDescriptorsOnce);
  reward_.SetEntryDescriptor(
      &RewardsContainer_RewardEntry_descriptor);
  reward_.MergeFrom(from.reward_);
  if (from.has_description()) {
    description_ = new ::WakfuProto::ContainerDescription(*from.description_);
  } else {
    description_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&characterid_) -
    reinterpret_cast<char*>(&id_) + sizeof(characterid_));
  // @@protoc_insertion_point(copy_constructor:WakfuProto.RewardsContainer)
}

void RewardsContainer::SharedCtor() {
  _cached_size_ = 0;
  const ::google::protobuf::Descriptor*& RewardsContainer_RewardEntry_descriptor = protobuf_rewards_2eproto::file_level_metadata[7].descriptor;
  reward_.SetAssignDescriptorCallback(
      protobuf_rewards_2eproto::protobuf_AssignDescriptorsOnce);
  reward_.SetEntryDescriptor(
      &RewardsContainer_RewardEntry_descriptor);
  ::memset(&description_, 0, reinterpret_cast<char*>(&characterid_) -
    reinterpret_cast<char*>(&description_) + sizeof(characterid_));
}

RewardsContainer::~RewardsContainer() {
  // @@protoc_insertion_point(destructor:WakfuProto.RewardsContainer)
  SharedDtor();
}

void RewardsContainer::SharedDtor() {
  if (this != internal_default_instance()) {
    delete description_;
  }
}

void RewardsContainer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RewardsContainer::descriptor() {
  protobuf_rewards_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rewards_2eproto::file_level_metadata[8].descriptor;
}

const RewardsContainer& RewardsContainer::default_instance() {
  protobuf_rewards_2eproto::InitDefaults();
  return *internal_default_instance();
}

RewardsContainer* RewardsContainer::New(::google::protobuf::Arena* arena) const {
  RewardsContainer* n = new RewardsContainer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RewardsContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:WakfuProto.RewardsContainer)
  reward_.Clear();
  if (has_description()) {
    GOOGLE_DCHECK(description_ != NULL);
    description_->::WakfuProto::ContainerDescription::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&characterid_) -
      reinterpret_cast<char*>(&id_) + sizeof(characterid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RewardsContainer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WakfuProto.RewardsContainer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (tag == 8u) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .WakfuProto.ContainerDescription description = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_description()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<int32, .WakfuProto.Reward> reward = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          RewardsContainer_RewardEntry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::int32, ::WakfuProto::Reward,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::WakfuProto::Reward > > parser(&reward_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // optional int64 characterId = 4;
      case 4: {
        if (tag == 32u) {
          set_has_characterid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &characterid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WakfuProto.RewardsContainer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WakfuProto.RewardsContainer)
  return false;
#undef DO_
}

void RewardsContainer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WakfuProto.RewardsContainer)
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // required .WakfuProto.ContainerDescription description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->description_, output);
  }

  // map<int32, .WakfuProto.Reward> reward = 3;
  if (!this->reward().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::WakfuProto::Reward >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->reward().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->reward().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::WakfuProto::Reward >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::WakfuProto::Reward >::const_iterator
          it = this->reward().begin();
          it != this->reward().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<RewardsContainer_RewardEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(reward_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<RewardsContainer_RewardEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::WakfuProto::Reward >::const_iterator
          it = this->reward().begin();
          it != this->reward().end(); ++it) {
        entry.reset(reward_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
      }
    }
  }

  // optional int64 characterId = 4;
  if (has_characterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->characterid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WakfuProto.RewardsContainer)
}

::google::protobuf::uint8* RewardsContainer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WakfuProto.RewardsContainer)
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // required .WakfuProto.ContainerDescription description = 2;
  if (has_description()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->description_, false, target);
  }

  // map<int32, .WakfuProto.Reward> reward = 3;
  if (!this->reward().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::WakfuProto::Reward >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->reward().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->reward().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::WakfuProto::Reward >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::WakfuProto::Reward >::const_iterator
          it = this->reward().begin();
          it != this->reward().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<RewardsContainer_RewardEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(reward_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<RewardsContainer_RewardEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::WakfuProto::Reward >::const_iterator
          it = this->reward().begin();
          it != this->reward().end(); ++it) {
        entry.reset(reward_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
      }
    }
  }

  // optional int64 characterId = 4;
  if (has_characterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->characterid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WakfuProto.RewardsContainer)
  return target;
}

size_t RewardsContainer::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:WakfuProto.RewardsContainer)
  size_t total_size = 0;

  if (has_description()) {
    // required .WakfuProto.ContainerDescription description = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->description_);
  }

  if (has_id()) {
    // required int64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  return total_size;
}
size_t RewardsContainer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WakfuProto.RewardsContainer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .WakfuProto.ContainerDescription description = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->description_);

    // required int64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // map<int32, .WakfuProto.Reward> reward = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->reward_size());
  {
    ::google::protobuf::scoped_ptr<RewardsContainer_RewardEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::WakfuProto::Reward >::const_iterator
        it = this->reward().begin();
        it != this->reward().end(); ++it) {
      entry.reset(reward_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // optional int64 characterId = 4;
  if (has_characterid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->characterid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewardsContainer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WakfuProto.RewardsContainer)
  GOOGLE_DCHECK_NE(&from, this);
  const RewardsContainer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RewardsContainer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WakfuProto.RewardsContainer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WakfuProto.RewardsContainer)
    MergeFrom(*source);
  }
}

void RewardsContainer::MergeFrom(const RewardsContainer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WakfuProto.RewardsContainer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_description()) {
      mutable_description()->::WakfuProto::ContainerDescription::MergeFrom(from.description());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_characterid()) {
      set_characterid(from.characterid());
    }
  }
}

void RewardsContainer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WakfuProto.RewardsContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardsContainer::CopyFrom(const RewardsContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WakfuProto.RewardsContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardsContainer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->reward())) return false;
  if (has_description()) {
    if (!this->description_->IsInitialized()) return false;
  }
  return true;
}

void RewardsContainer::Swap(RewardsContainer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RewardsContainer::InternalSwap(RewardsContainer* other) {
  reward_.Swap(&other->reward_);
  std::swap(description_, other->description_);
  std::swap(id_, other->id_);
  std::swap(characterid_, other->characterid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RewardsContainer::GetMetadata() const {
  protobuf_rewards_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rewards_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RewardsContainer

// required int64 id = 1;
bool RewardsContainer::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RewardsContainer::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void RewardsContainer::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void RewardsContainer::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
::google::protobuf::int64 RewardsContainer::id() const {
  // @@protoc_insertion_point(field_get:WakfuProto.RewardsContainer.id)
  return id_;
}
void RewardsContainer::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:WakfuProto.RewardsContainer.id)
}

// required .WakfuProto.ContainerDescription description = 2;
bool RewardsContainer::has_description() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RewardsContainer::set_has_description() {
  _has_bits_[0] |= 0x00000001u;
}
void RewardsContainer::clear_has_description() {
  _has_bits_[0] &= ~0x00000001u;
}
void RewardsContainer::clear_description() {
  if (description_ != NULL) description_->::WakfuProto::ContainerDescription::Clear();
  clear_has_description();
}
const ::WakfuProto::ContainerDescription& RewardsContainer::description() const {
  // @@protoc_insertion_point(field_get:WakfuProto.RewardsContainer.description)
  return description_ != NULL ? *description_
                         : *::WakfuProto::ContainerDescription::internal_default_instance();
}
::WakfuProto::ContainerDescription* RewardsContainer::mutable_description() {
  set_has_description();
  if (description_ == NULL) {
    description_ = new ::WakfuProto::ContainerDescription;
  }
  // @@protoc_insertion_point(field_mutable:WakfuProto.RewardsContainer.description)
  return description_;
}
::WakfuProto::ContainerDescription* RewardsContainer::release_description() {
  // @@protoc_insertion_point(field_release:WakfuProto.RewardsContainer.description)
  clear_has_description();
  ::WakfuProto::ContainerDescription* temp = description_;
  description_ = NULL;
  return temp;
}
void RewardsContainer::set_allocated_description(::WakfuProto::ContainerDescription* description) {
  delete description_;
  description_ = description;
  if (description) {
    set_has_description();
  } else {
    clear_has_description();
  }
  // @@protoc_insertion_point(field_set_allocated:WakfuProto.RewardsContainer.description)
}

// map<int32, .WakfuProto.Reward> reward = 3;
int RewardsContainer::reward_size() const {
  return reward_.size();
}
void RewardsContainer::clear_reward() {
  reward_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, ::WakfuProto::Reward >&
RewardsContainer::reward() const {
  // @@protoc_insertion_point(field_map:WakfuProto.RewardsContainer.reward)
  return reward_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, ::WakfuProto::Reward >*
RewardsContainer::mutable_reward() {
  // @@protoc_insertion_point(field_mutable_map:WakfuProto.RewardsContainer.reward)
  return reward_.MutableMap();
}

// optional int64 characterId = 4;
bool RewardsContainer::has_characterid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RewardsContainer::set_has_characterid() {
  _has_bits_[0] |= 0x00000004u;
}
void RewardsContainer::clear_has_characterid() {
  _has_bits_[0] &= ~0x00000004u;
}
void RewardsContainer::clear_characterid() {
  characterid_ = GOOGLE_LONGLONG(0);
  clear_has_characterid();
}
::google::protobuf::int64 RewardsContainer::characterid() const {
  // @@protoc_insertion_point(field_get:WakfuProto.RewardsContainer.characterId)
  return characterid_;
}
void RewardsContainer::set_characterid(::google::protobuf::int64 value) {
  set_has_characterid();
  characterid_ = value;
  // @@protoc_insertion_point(field_set:WakfuProto.RewardsContainer.characterId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Reward::kIdFieldNumber;
const int Reward::kTypeFieldNumber;
const int Reward::kQuantityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Reward::Reward()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rewards_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WakfuProto.Reward)
}
Reward::Reward(const Reward& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:WakfuProto.Reward)
}

void Reward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, reinterpret_cast<char*>(&quantity_) -
    reinterpret_cast<char*>(&id_) + sizeof(quantity_));
  type_ = 1;
}

Reward::~Reward() {
  // @@protoc_insertion_point(destructor:WakfuProto.Reward)
  SharedDtor();
}

void Reward::SharedDtor() {
}

void Reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Reward::descriptor() {
  protobuf_rewards_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rewards_2eproto::file_level_metadata[9].descriptor;
}

const Reward& Reward::default_instance() {
  protobuf_rewards_2eproto::InitDefaults();
  return *internal_default_instance();
}

Reward* Reward::New(::google::protobuf::Arena* arena) const {
  Reward* n = new Reward;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Reward::Clear() {
// @@protoc_insertion_point(message_clear_start:WakfuProto.Reward)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&quantity_) -
      reinterpret_cast<char*>(&id_) + sizeof(quantity_));
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WakfuProto.Reward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (tag == 8u) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .WakfuProto.RewardsTypes type = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::WakfuProto::RewardsTypes_IsValid(value)) {
            set_type(static_cast< ::WakfuProto::RewardsTypes >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 quantity = 4;
      case 4: {
        if (tag == 32u) {
          set_has_quantity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WakfuProto.Reward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WakfuProto.Reward)
  return false;
#undef DO_
}

void Reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WakfuProto.Reward)
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // required .WakfuProto.RewardsTypes type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required int32 quantity = 4;
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->quantity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WakfuProto.Reward)
}

::google::protobuf::uint8* Reward::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WakfuProto.Reward)
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // required .WakfuProto.RewardsTypes type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required int32 quantity = 4;
  if (has_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->quantity(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WakfuProto.Reward)
  return target;
}

size_t Reward::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:WakfuProto.Reward)
  size_t total_size = 0;

  if (has_id()) {
    // required int64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  if (has_quantity()) {
    // required int32 quantity = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->quantity());
  }

  if (has_type()) {
    // required .WakfuProto.RewardsTypes type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  return total_size;
}
size_t Reward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WakfuProto.Reward)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());

    // required int32 quantity = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->quantity());

    // required .WakfuProto.RewardsTypes type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Reward::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WakfuProto.Reward)
  GOOGLE_DCHECK_NE(&from, this);
  const Reward* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Reward>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WakfuProto.Reward)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WakfuProto.Reward)
    MergeFrom(*source);
  }
}

void Reward::MergeFrom(const Reward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WakfuProto.Reward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_quantity()) {
      set_quantity(from.quantity());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
}

void Reward::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WakfuProto.Reward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reward::CopyFrom(const Reward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WakfuProto.Reward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void Reward::Swap(Reward* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Reward::InternalSwap(Reward* other) {
  std::swap(id_, other->id_);
  std::swap(quantity_, other->quantity_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Reward::GetMetadata() const {
  protobuf_rewards_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rewards_2eproto::file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Reward

// required int64 id = 1;
bool Reward::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Reward::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Reward::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Reward::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
::google::protobuf::int64 Reward::id() const {
  // @@protoc_insertion_point(field_get:WakfuProto.Reward.id)
  return id_;
}
void Reward::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:WakfuProto.Reward.id)
}

// required .WakfuProto.RewardsTypes type = 2;
bool Reward::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Reward::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void Reward::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void Reward::clear_type() {
  type_ = 1;
  clear_has_type();
}
::WakfuProto::RewardsTypes Reward::type() const {
  // @@protoc_insertion_point(field_get:WakfuProto.Reward.type)
  return static_cast< ::WakfuProto::RewardsTypes >(type_);
}
void Reward::set_type(::WakfuProto::RewardsTypes value) {
  assert(::WakfuProto::RewardsTypes_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:WakfuProto.Reward.type)
}

// required int32 quantity = 4;
bool Reward::has_quantity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Reward::set_has_quantity() {
  _has_bits_[0] |= 0x00000002u;
}
void Reward::clear_has_quantity() {
  _has_bits_[0] &= ~0x00000002u;
}
void Reward::clear_quantity() {
  quantity_ = 0;
  clear_has_quantity();
}
::google::protobuf::int32 Reward::quantity() const {
  // @@protoc_insertion_point(field_get:WakfuProto.Reward.quantity)
  return quantity_;
}
void Reward::set_quantity(::google::protobuf::int32 value) {
  set_has_quantity();
  quantity_ = value;
  // @@protoc_insertion_point(field_set:WakfuProto.Reward.quantity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContainerDescription::kTypeFieldNumber;
const int ContainerDescription::kSeasonNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContainerDescription::ContainerDescription()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rewards_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WakfuProto.ContainerDescription)
}
ContainerDescription::ContainerDescription(const ContainerDescription& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&seasonnumber_, &from.seasonnumber_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&seasonnumber_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:WakfuProto.ContainerDescription)
}

void ContainerDescription::SharedCtor() {
  _cached_size_ = 0;
  seasonnumber_ = 0;
  type_ = 1;
}

ContainerDescription::~ContainerDescription() {
  // @@protoc_insertion_point(destructor:WakfuProto.ContainerDescription)
  SharedDtor();
}

void ContainerDescription::SharedDtor() {
}

void ContainerDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContainerDescription::descriptor() {
  protobuf_rewards_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rewards_2eproto::file_level_metadata[10].descriptor;
}

const ContainerDescription& ContainerDescription::default_instance() {
  protobuf_rewards_2eproto::InitDefaults();
  return *internal_default_instance();
}

ContainerDescription* ContainerDescription::New(::google::protobuf::Arena* arena) const {
  ContainerDescription* n = new ContainerDescription;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ContainerDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:WakfuProto.ContainerDescription)
  if (_has_bits_[0 / 32] & 3u) {
    seasonnumber_ = 0;
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ContainerDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WakfuProto.ContainerDescription)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .WakfuProto.RewardsCategories type = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::WakfuProto::RewardsCategories_IsValid(value)) {
            set_type(static_cast< ::WakfuProto::RewardsCategories >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 seasonNumber = 2;
      case 2: {
        if (tag == 16u) {
          set_has_seasonnumber();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seasonnumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WakfuProto.ContainerDescription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WakfuProto.ContainerDescription)
  return false;
#undef DO_
}

void ContainerDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WakfuProto.ContainerDescription)
  // required .WakfuProto.RewardsCategories type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 seasonNumber = 2;
  if (has_seasonnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seasonnumber(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WakfuProto.ContainerDescription)
}

::google::protobuf::uint8* ContainerDescription::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WakfuProto.ContainerDescription)
  // required .WakfuProto.RewardsCategories type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int32 seasonNumber = 2;
  if (has_seasonnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seasonnumber(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WakfuProto.ContainerDescription)
  return target;
}

size_t ContainerDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WakfuProto.ContainerDescription)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .WakfuProto.RewardsCategories type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  // optional int32 seasonNumber = 2;
  if (has_seasonnumber()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seasonnumber());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContainerDescription::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WakfuProto.ContainerDescription)
  GOOGLE_DCHECK_NE(&from, this);
  const ContainerDescription* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ContainerDescription>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WakfuProto.ContainerDescription)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WakfuProto.ContainerDescription)
    MergeFrom(*source);
  }
}

void ContainerDescription::MergeFrom(const ContainerDescription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WakfuProto.ContainerDescription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_seasonnumber()) {
      set_seasonnumber(from.seasonnumber());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
}

void ContainerDescription::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WakfuProto.ContainerDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerDescription::CopyFrom(const ContainerDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WakfuProto.ContainerDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerDescription::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void ContainerDescription::Swap(ContainerDescription* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContainerDescription::InternalSwap(ContainerDescription* other) {
  std::swap(seasonnumber_, other->seasonnumber_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ContainerDescription::GetMetadata() const {
  protobuf_rewards_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rewards_2eproto::file_level_metadata[10];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ContainerDescription

// required .WakfuProto.RewardsCategories type = 1;
bool ContainerDescription::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ContainerDescription::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void ContainerDescription::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void ContainerDescription::clear_type() {
  type_ = 1;
  clear_has_type();
}
::WakfuProto::RewardsCategories ContainerDescription::type() const {
  // @@protoc_insertion_point(field_get:WakfuProto.ContainerDescription.type)
  return static_cast< ::WakfuProto::RewardsCategories >(type_);
}
void ContainerDescription::set_type(::WakfuProto::RewardsCategories value) {
  assert(::WakfuProto::RewardsCategories_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:WakfuProto.ContainerDescription.type)
}

// optional int32 seasonNumber = 2;
bool ContainerDescription::has_seasonnumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ContainerDescription::set_has_seasonnumber() {
  _has_bits_[0] |= 0x00000001u;
}
void ContainerDescription::clear_has_seasonnumber() {
  _has_bits_[0] &= ~0x00000001u;
}
void ContainerDescription::clear_seasonnumber() {
  seasonnumber_ = 0;
  clear_has_seasonnumber();
}
::google::protobuf::int32 ContainerDescription::seasonnumber() const {
  // @@protoc_insertion_point(field_get:WakfuProto.ContainerDescription.seasonNumber)
  return seasonnumber_;
}
void ContainerDescription::set_seasonnumber(::google::protobuf::int32 value) {
  set_has_seasonnumber();
  seasonnumber_ = value;
  // @@protoc_insertion_point(field_set:WakfuProto.ContainerDescription.seasonNumber)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace WakfuProto

// @@protoc_insertion_point(global_scope)
