// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dungeon.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dungeon.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace WakfuProto {
class ProtoDungeonDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ProtoDungeon> {
} _ProtoDungeon_default_instance_;
class ProtoPartyInstanceInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ProtoPartyInstanceInfo> {
} _ProtoPartyInstanceInfo_default_instance_;
class ProtoPartyInstanceInfoEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ProtoPartyInstanceInfoEntry> {
} _ProtoPartyInstanceInfoEntry_default_instance_;

namespace protobuf_dungeon_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDungeon, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDungeon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDungeon, maxlevel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDungeon, difficultylevel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDungeon, isdifficultyavailable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDungeon, canincreasedifficulty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDungeon, isfightinprogress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDungeon, iscompetitivecancelled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDungeon, allowedids_),
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPartyInstanceInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPartyInstanceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPartyInstanceInfo, entry_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPartyInstanceInfoEntry, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPartyInstanceInfoEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPartyInstanceInfoEntry, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPartyInstanceInfoEntry, dungeoninfo_),
  1,
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 11, sizeof(ProtoDungeon)},
  { 18, 23, sizeof(ProtoPartyInstanceInfo)},
  { 24, 30, sizeof(ProtoPartyInstanceInfoEntry)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProtoDungeon_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProtoPartyInstanceInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProtoPartyInstanceInfoEntry_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "dungeon.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _ProtoDungeon_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _ProtoPartyInstanceInfo_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _ProtoPartyInstanceInfoEntry_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ProtoDungeon_default_instance_.DefaultConstruct();
  _ProtoPartyInstanceInfo_default_instance_.DefaultConstruct();
  _ProtoPartyInstanceInfoEntry_default_instance_.DefaultConstruct();
  _ProtoPartyInstanceInfoEntry_default_instance_.get_mutable()->dungeoninfo_ = const_cast< ::WakfuProto::ProtoDungeon*>(
      ::WakfuProto::ProtoDungeon::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\rdungeon.proto\022\nWakfuProto\"\306\001\n\014ProtoDun"
      "geon\022\020\n\010maxLevel\030\001 \002(\005\022\027\n\017difficultyLeve"
      "l\030\002 \002(\005\022\035\n\025isDifficultyAvailable\030\003 \002(\010\022\035"
      "\n\025canIncreaseDifficulty\030\004 \002(\010\022\031\n\021isfight"
      "InProgress\030\005 \002(\010\022\036\n\026isCompetitiveCancell"
      "ed\030\006 \002(\010\022\022\n\nallowedIds\030\007 \003(\003\"P\n\026ProtoPar"
      "tyInstanceInfo\0226\n\005entry\030\001 \003(\0132\'.WakfuPro"
      "to.ProtoPartyInstanceInfoEntry\"[\n\033ProtoP"
      "artyInstanceInfoEntry\022\r\n\005index\030\001 \002(\005\022-\n\013"
      "dungeonInfo\030\002 \002(\0132\030.WakfuProto.ProtoDung"
      "eon"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 403);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dungeon.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_dungeon_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoDungeon::kMaxLevelFieldNumber;
const int ProtoDungeon::kDifficultyLevelFieldNumber;
const int ProtoDungeon::kIsDifficultyAvailableFieldNumber;
const int ProtoDungeon::kCanIncreaseDifficultyFieldNumber;
const int ProtoDungeon::kIsfightInProgressFieldNumber;
const int ProtoDungeon::kIsCompetitiveCancelledFieldNumber;
const int ProtoDungeon::kAllowedIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoDungeon::ProtoDungeon()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WakfuProto.ProtoDungeon)
}
ProtoDungeon::ProtoDungeon(const ProtoDungeon& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      allowedids_(from.allowedids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&maxlevel_, &from.maxlevel_,
    reinterpret_cast<char*>(&iscompetitivecancelled_) -
    reinterpret_cast<char*>(&maxlevel_) + sizeof(iscompetitivecancelled_));
  // @@protoc_insertion_point(copy_constructor:WakfuProto.ProtoDungeon)
}

void ProtoDungeon::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&maxlevel_, 0, reinterpret_cast<char*>(&iscompetitivecancelled_) -
    reinterpret_cast<char*>(&maxlevel_) + sizeof(iscompetitivecancelled_));
}

ProtoDungeon::~ProtoDungeon() {
  // @@protoc_insertion_point(destructor:WakfuProto.ProtoDungeon)
  SharedDtor();
}

void ProtoDungeon::SharedDtor() {
}

void ProtoDungeon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoDungeon::descriptor() {
  protobuf_dungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dungeon_2eproto::file_level_metadata[0].descriptor;
}

const ProtoDungeon& ProtoDungeon::default_instance() {
  protobuf_dungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProtoDungeon* ProtoDungeon::New(::google::protobuf::Arena* arena) const {
  ProtoDungeon* n = new ProtoDungeon;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtoDungeon::Clear() {
// @@protoc_insertion_point(message_clear_start:WakfuProto.ProtoDungeon)
  allowedids_.Clear();
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&maxlevel_, 0, reinterpret_cast<char*>(&iscompetitivecancelled_) -
      reinterpret_cast<char*>(&maxlevel_) + sizeof(iscompetitivecancelled_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProtoDungeon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WakfuProto.ProtoDungeon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 maxLevel = 1;
      case 1: {
        if (tag == 8u) {
          set_has_maxlevel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxlevel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 difficultyLevel = 2;
      case 2: {
        if (tag == 16u) {
          set_has_difficultylevel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &difficultylevel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool isDifficultyAvailable = 3;
      case 3: {
        if (tag == 24u) {
          set_has_isdifficultyavailable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdifficultyavailable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool canIncreaseDifficulty = 4;
      case 4: {
        if (tag == 32u) {
          set_has_canincreasedifficulty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &canincreasedifficulty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool isfightInProgress = 5;
      case 5: {
        if (tag == 40u) {
          set_has_isfightinprogress();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfightinprogress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool isCompetitiveCancelled = 6;
      case 6: {
        if (tag == 48u) {
          set_has_iscompetitivecancelled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscompetitivecancelled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 allowedIds = 7;
      case 7: {
        if (tag == 56u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 56u, input, this->mutable_allowedids())));
        } else if (tag == 58u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_allowedids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WakfuProto.ProtoDungeon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WakfuProto.ProtoDungeon)
  return false;
#undef DO_
}

void ProtoDungeon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WakfuProto.ProtoDungeon)
  // required int32 maxLevel = 1;
  if (has_maxlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->maxlevel(), output);
  }

  // required int32 difficultyLevel = 2;
  if (has_difficultylevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->difficultylevel(), output);
  }

  // required bool isDifficultyAvailable = 3;
  if (has_isdifficultyavailable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isdifficultyavailable(), output);
  }

  // required bool canIncreaseDifficulty = 4;
  if (has_canincreasedifficulty()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->canincreasedifficulty(), output);
  }

  // required bool isfightInProgress = 5;
  if (has_isfightinprogress()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isfightinprogress(), output);
  }

  // required bool isCompetitiveCancelled = 6;
  if (has_iscompetitivecancelled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->iscompetitivecancelled(), output);
  }

  // repeated int64 allowedIds = 7;
  for (int i = 0; i < this->allowedids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      7, this->allowedids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WakfuProto.ProtoDungeon)
}

::google::protobuf::uint8* ProtoDungeon::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WakfuProto.ProtoDungeon)
  // required int32 maxLevel = 1;
  if (has_maxlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->maxlevel(), target);
  }

  // required int32 difficultyLevel = 2;
  if (has_difficultylevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->difficultylevel(), target);
  }

  // required bool isDifficultyAvailable = 3;
  if (has_isdifficultyavailable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isdifficultyavailable(), target);
  }

  // required bool canIncreaseDifficulty = 4;
  if (has_canincreasedifficulty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->canincreasedifficulty(), target);
  }

  // required bool isfightInProgress = 5;
  if (has_isfightinprogress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isfightinprogress(), target);
  }

  // required bool isCompetitiveCancelled = 6;
  if (has_iscompetitivecancelled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->iscompetitivecancelled(), target);
  }

  // repeated int64 allowedIds = 7;
  for (int i = 0; i < this->allowedids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(7, this->allowedids(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WakfuProto.ProtoDungeon)
  return target;
}

size_t ProtoDungeon::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:WakfuProto.ProtoDungeon)
  size_t total_size = 0;

  if (has_maxlevel()) {
    // required int32 maxLevel = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->maxlevel());
  }

  if (has_difficultylevel()) {
    // required int32 difficultyLevel = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->difficultylevel());
  }

  if (has_isdifficultyavailable()) {
    // required bool isDifficultyAvailable = 3;
    total_size += 1 + 1;
  }

  if (has_canincreasedifficulty()) {
    // required bool canIncreaseDifficulty = 4;
    total_size += 1 + 1;
  }

  if (has_isfightinprogress()) {
    // required bool isfightInProgress = 5;
    total_size += 1 + 1;
  }

  if (has_iscompetitivecancelled()) {
    // required bool isCompetitiveCancelled = 6;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t ProtoDungeon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WakfuProto.ProtoDungeon)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required int32 maxLevel = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->maxlevel());

    // required int32 difficultyLevel = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->difficultylevel());

    // required bool isDifficultyAvailable = 3;
    total_size += 1 + 1;

    // required bool canIncreaseDifficulty = 4;
    total_size += 1 + 1;

    // required bool isfightInProgress = 5;
    total_size += 1 + 1;

    // required bool isCompetitiveCancelled = 6;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated int64 allowedIds = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->allowedids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->allowedids_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoDungeon::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WakfuProto.ProtoDungeon)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoDungeon* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtoDungeon>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WakfuProto.ProtoDungeon)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WakfuProto.ProtoDungeon)
    MergeFrom(*source);
  }
}

void ProtoDungeon::MergeFrom(const ProtoDungeon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WakfuProto.ProtoDungeon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  allowedids_.MergeFrom(from.allowedids_);
  if (from._has_bits_[0 / 32] & 63u) {
    if (from.has_maxlevel()) {
      set_maxlevel(from.maxlevel());
    }
    if (from.has_difficultylevel()) {
      set_difficultylevel(from.difficultylevel());
    }
    if (from.has_isdifficultyavailable()) {
      set_isdifficultyavailable(from.isdifficultyavailable());
    }
    if (from.has_canincreasedifficulty()) {
      set_canincreasedifficulty(from.canincreasedifficulty());
    }
    if (from.has_isfightinprogress()) {
      set_isfightinprogress(from.isfightinprogress());
    }
    if (from.has_iscompetitivecancelled()) {
      set_iscompetitivecancelled(from.iscompetitivecancelled());
    }
  }
}

void ProtoDungeon::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WakfuProto.ProtoDungeon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoDungeon::CopyFrom(const ProtoDungeon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WakfuProto.ProtoDungeon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoDungeon::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  return true;
}

void ProtoDungeon::Swap(ProtoDungeon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoDungeon::InternalSwap(ProtoDungeon* other) {
  allowedids_.UnsafeArenaSwap(&other->allowedids_);
  std::swap(maxlevel_, other->maxlevel_);
  std::swap(difficultylevel_, other->difficultylevel_);
  std::swap(isdifficultyavailable_, other->isdifficultyavailable_);
  std::swap(canincreasedifficulty_, other->canincreasedifficulty_);
  std::swap(isfightinprogress_, other->isfightinprogress_);
  std::swap(iscompetitivecancelled_, other->iscompetitivecancelled_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProtoDungeon::GetMetadata() const {
  protobuf_dungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dungeon_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProtoDungeon

// required int32 maxLevel = 1;
bool ProtoDungeon::has_maxlevel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ProtoDungeon::set_has_maxlevel() {
  _has_bits_[0] |= 0x00000001u;
}
void ProtoDungeon::clear_has_maxlevel() {
  _has_bits_[0] &= ~0x00000001u;
}
void ProtoDungeon::clear_maxlevel() {
  maxlevel_ = 0;
  clear_has_maxlevel();
}
::google::protobuf::int32 ProtoDungeon::maxlevel() const {
  // @@protoc_insertion_point(field_get:WakfuProto.ProtoDungeon.maxLevel)
  return maxlevel_;
}
void ProtoDungeon::set_maxlevel(::google::protobuf::int32 value) {
  set_has_maxlevel();
  maxlevel_ = value;
  // @@protoc_insertion_point(field_set:WakfuProto.ProtoDungeon.maxLevel)
}

// required int32 difficultyLevel = 2;
bool ProtoDungeon::has_difficultylevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ProtoDungeon::set_has_difficultylevel() {
  _has_bits_[0] |= 0x00000002u;
}
void ProtoDungeon::clear_has_difficultylevel() {
  _has_bits_[0] &= ~0x00000002u;
}
void ProtoDungeon::clear_difficultylevel() {
  difficultylevel_ = 0;
  clear_has_difficultylevel();
}
::google::protobuf::int32 ProtoDungeon::difficultylevel() const {
  // @@protoc_insertion_point(field_get:WakfuProto.ProtoDungeon.difficultyLevel)
  return difficultylevel_;
}
void ProtoDungeon::set_difficultylevel(::google::protobuf::int32 value) {
  set_has_difficultylevel();
  difficultylevel_ = value;
  // @@protoc_insertion_point(field_set:WakfuProto.ProtoDungeon.difficultyLevel)
}

// required bool isDifficultyAvailable = 3;
bool ProtoDungeon::has_isdifficultyavailable() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ProtoDungeon::set_has_isdifficultyavailable() {
  _has_bits_[0] |= 0x00000004u;
}
void ProtoDungeon::clear_has_isdifficultyavailable() {
  _has_bits_[0] &= ~0x00000004u;
}
void ProtoDungeon::clear_isdifficultyavailable() {
  isdifficultyavailable_ = false;
  clear_has_isdifficultyavailable();
}
bool ProtoDungeon::isdifficultyavailable() const {
  // @@protoc_insertion_point(field_get:WakfuProto.ProtoDungeon.isDifficultyAvailable)
  return isdifficultyavailable_;
}
void ProtoDungeon::set_isdifficultyavailable(bool value) {
  set_has_isdifficultyavailable();
  isdifficultyavailable_ = value;
  // @@protoc_insertion_point(field_set:WakfuProto.ProtoDungeon.isDifficultyAvailable)
}

// required bool canIncreaseDifficulty = 4;
bool ProtoDungeon::has_canincreasedifficulty() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ProtoDungeon::set_has_canincreasedifficulty() {
  _has_bits_[0] |= 0x00000008u;
}
void ProtoDungeon::clear_has_canincreasedifficulty() {
  _has_bits_[0] &= ~0x00000008u;
}
void ProtoDungeon::clear_canincreasedifficulty() {
  canincreasedifficulty_ = false;
  clear_has_canincreasedifficulty();
}
bool ProtoDungeon::canincreasedifficulty() const {
  // @@protoc_insertion_point(field_get:WakfuProto.ProtoDungeon.canIncreaseDifficulty)
  return canincreasedifficulty_;
}
void ProtoDungeon::set_canincreasedifficulty(bool value) {
  set_has_canincreasedifficulty();
  canincreasedifficulty_ = value;
  // @@protoc_insertion_point(field_set:WakfuProto.ProtoDungeon.canIncreaseDifficulty)
}

// required bool isfightInProgress = 5;
bool ProtoDungeon::has_isfightinprogress() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ProtoDungeon::set_has_isfightinprogress() {
  _has_bits_[0] |= 0x00000010u;
}
void ProtoDungeon::clear_has_isfightinprogress() {
  _has_bits_[0] &= ~0x00000010u;
}
void ProtoDungeon::clear_isfightinprogress() {
  isfightinprogress_ = false;
  clear_has_isfightinprogress();
}
bool ProtoDungeon::isfightinprogress() const {
  // @@protoc_insertion_point(field_get:WakfuProto.ProtoDungeon.isfightInProgress)
  return isfightinprogress_;
}
void ProtoDungeon::set_isfightinprogress(bool value) {
  set_has_isfightinprogress();
  isfightinprogress_ = value;
  // @@protoc_insertion_point(field_set:WakfuProto.ProtoDungeon.isfightInProgress)
}

// required bool isCompetitiveCancelled = 6;
bool ProtoDungeon::has_iscompetitivecancelled() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ProtoDungeon::set_has_iscompetitivecancelled() {
  _has_bits_[0] |= 0x00000020u;
}
void ProtoDungeon::clear_has_iscompetitivecancelled() {
  _has_bits_[0] &= ~0x00000020u;
}
void ProtoDungeon::clear_iscompetitivecancelled() {
  iscompetitivecancelled_ = false;
  clear_has_iscompetitivecancelled();
}
bool ProtoDungeon::iscompetitivecancelled() const {
  // @@protoc_insertion_point(field_get:WakfuProto.ProtoDungeon.isCompetitiveCancelled)
  return iscompetitivecancelled_;
}
void ProtoDungeon::set_iscompetitivecancelled(bool value) {
  set_has_iscompetitivecancelled();
  iscompetitivecancelled_ = value;
  // @@protoc_insertion_point(field_set:WakfuProto.ProtoDungeon.isCompetitiveCancelled)
}

// repeated int64 allowedIds = 7;
int ProtoDungeon::allowedids_size() const {
  return allowedids_.size();
}
void ProtoDungeon::clear_allowedids() {
  allowedids_.Clear();
}
::google::protobuf::int64 ProtoDungeon::allowedids(int index) const {
  // @@protoc_insertion_point(field_get:WakfuProto.ProtoDungeon.allowedIds)
  return allowedids_.Get(index);
}
void ProtoDungeon::set_allowedids(int index, ::google::protobuf::int64 value) {
  allowedids_.Set(index, value);
  // @@protoc_insertion_point(field_set:WakfuProto.ProtoDungeon.allowedIds)
}
void ProtoDungeon::add_allowedids(::google::protobuf::int64 value) {
  allowedids_.Add(value);
  // @@protoc_insertion_point(field_add:WakfuProto.ProtoDungeon.allowedIds)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
ProtoDungeon::allowedids() const {
  // @@protoc_insertion_point(field_list:WakfuProto.ProtoDungeon.allowedIds)
  return allowedids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
ProtoDungeon::mutable_allowedids() {
  // @@protoc_insertion_point(field_mutable_list:WakfuProto.ProtoDungeon.allowedIds)
  return &allowedids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoPartyInstanceInfo::kEntryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoPartyInstanceInfo::ProtoPartyInstanceInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WakfuProto.ProtoPartyInstanceInfo)
}
ProtoPartyInstanceInfo::ProtoPartyInstanceInfo(const ProtoPartyInstanceInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      entry_(from.entry_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:WakfuProto.ProtoPartyInstanceInfo)
}

void ProtoPartyInstanceInfo::SharedCtor() {
  _cached_size_ = 0;
}

ProtoPartyInstanceInfo::~ProtoPartyInstanceInfo() {
  // @@protoc_insertion_point(destructor:WakfuProto.ProtoPartyInstanceInfo)
  SharedDtor();
}

void ProtoPartyInstanceInfo::SharedDtor() {
}

void ProtoPartyInstanceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoPartyInstanceInfo::descriptor() {
  protobuf_dungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dungeon_2eproto::file_level_metadata[1].descriptor;
}

const ProtoPartyInstanceInfo& ProtoPartyInstanceInfo::default_instance() {
  protobuf_dungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProtoPartyInstanceInfo* ProtoPartyInstanceInfo::New(::google::protobuf::Arena* arena) const {
  ProtoPartyInstanceInfo* n = new ProtoPartyInstanceInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtoPartyInstanceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:WakfuProto.ProtoPartyInstanceInfo)
  entry_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProtoPartyInstanceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WakfuProto.ProtoPartyInstanceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .WakfuProto.ProtoPartyInstanceInfoEntry entry = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_entry()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WakfuProto.ProtoPartyInstanceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WakfuProto.ProtoPartyInstanceInfo)
  return false;
#undef DO_
}

void ProtoPartyInstanceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WakfuProto.ProtoPartyInstanceInfo)
  // repeated .WakfuProto.ProtoPartyInstanceInfoEntry entry = 1;
  for (unsigned int i = 0, n = this->entry_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entry(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WakfuProto.ProtoPartyInstanceInfo)
}

::google::protobuf::uint8* ProtoPartyInstanceInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WakfuProto.ProtoPartyInstanceInfo)
  // repeated .WakfuProto.ProtoPartyInstanceInfoEntry entry = 1;
  for (unsigned int i = 0, n = this->entry_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->entry(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WakfuProto.ProtoPartyInstanceInfo)
  return target;
}

size_t ProtoPartyInstanceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WakfuProto.ProtoPartyInstanceInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .WakfuProto.ProtoPartyInstanceInfoEntry entry = 1;
  {
    unsigned int count = this->entry_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entry(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoPartyInstanceInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WakfuProto.ProtoPartyInstanceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoPartyInstanceInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtoPartyInstanceInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WakfuProto.ProtoPartyInstanceInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WakfuProto.ProtoPartyInstanceInfo)
    MergeFrom(*source);
  }
}

void ProtoPartyInstanceInfo::MergeFrom(const ProtoPartyInstanceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WakfuProto.ProtoPartyInstanceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  entry_.MergeFrom(from.entry_);
}

void ProtoPartyInstanceInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WakfuProto.ProtoPartyInstanceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoPartyInstanceInfo::CopyFrom(const ProtoPartyInstanceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WakfuProto.ProtoPartyInstanceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoPartyInstanceInfo::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->entry())) return false;
  return true;
}

void ProtoPartyInstanceInfo::Swap(ProtoPartyInstanceInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoPartyInstanceInfo::InternalSwap(ProtoPartyInstanceInfo* other) {
  entry_.UnsafeArenaSwap(&other->entry_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProtoPartyInstanceInfo::GetMetadata() const {
  protobuf_dungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dungeon_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProtoPartyInstanceInfo

// repeated .WakfuProto.ProtoPartyInstanceInfoEntry entry = 1;
int ProtoPartyInstanceInfo::entry_size() const {
  return entry_.size();
}
void ProtoPartyInstanceInfo::clear_entry() {
  entry_.Clear();
}
const ::WakfuProto::ProtoPartyInstanceInfoEntry& ProtoPartyInstanceInfo::entry(int index) const {
  // @@protoc_insertion_point(field_get:WakfuProto.ProtoPartyInstanceInfo.entry)
  return entry_.Get(index);
}
::WakfuProto::ProtoPartyInstanceInfoEntry* ProtoPartyInstanceInfo::mutable_entry(int index) {
  // @@protoc_insertion_point(field_mutable:WakfuProto.ProtoPartyInstanceInfo.entry)
  return entry_.Mutable(index);
}
::WakfuProto::ProtoPartyInstanceInfoEntry* ProtoPartyInstanceInfo::add_entry() {
  // @@protoc_insertion_point(field_add:WakfuProto.ProtoPartyInstanceInfo.entry)
  return entry_.Add();
}
::google::protobuf::RepeatedPtrField< ::WakfuProto::ProtoPartyInstanceInfoEntry >*
ProtoPartyInstanceInfo::mutable_entry() {
  // @@protoc_insertion_point(field_mutable_list:WakfuProto.ProtoPartyInstanceInfo.entry)
  return &entry_;
}
const ::google::protobuf::RepeatedPtrField< ::WakfuProto::ProtoPartyInstanceInfoEntry >&
ProtoPartyInstanceInfo::entry() const {
  // @@protoc_insertion_point(field_list:WakfuProto.ProtoPartyInstanceInfo.entry)
  return entry_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoPartyInstanceInfoEntry::kIndexFieldNumber;
const int ProtoPartyInstanceInfoEntry::kDungeonInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoPartyInstanceInfoEntry::ProtoPartyInstanceInfoEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WakfuProto.ProtoPartyInstanceInfoEntry)
}
ProtoPartyInstanceInfoEntry::ProtoPartyInstanceInfoEntry(const ProtoPartyInstanceInfoEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_dungeoninfo()) {
    dungeoninfo_ = new ::WakfuProto::ProtoDungeon(*from.dungeoninfo_);
  } else {
    dungeoninfo_ = NULL;
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:WakfuProto.ProtoPartyInstanceInfoEntry)
}

void ProtoPartyInstanceInfoEntry::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&dungeoninfo_, 0, reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&dungeoninfo_) + sizeof(index_));
}

ProtoPartyInstanceInfoEntry::~ProtoPartyInstanceInfoEntry() {
  // @@protoc_insertion_point(destructor:WakfuProto.ProtoPartyInstanceInfoEntry)
  SharedDtor();
}

void ProtoPartyInstanceInfoEntry::SharedDtor() {
  if (this != internal_default_instance()) {
    delete dungeoninfo_;
  }
}

void ProtoPartyInstanceInfoEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoPartyInstanceInfoEntry::descriptor() {
  protobuf_dungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dungeon_2eproto::file_level_metadata[2].descriptor;
}

const ProtoPartyInstanceInfoEntry& ProtoPartyInstanceInfoEntry::default_instance() {
  protobuf_dungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProtoPartyInstanceInfoEntry* ProtoPartyInstanceInfoEntry::New(::google::protobuf::Arena* arena) const {
  ProtoPartyInstanceInfoEntry* n = new ProtoPartyInstanceInfoEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtoPartyInstanceInfoEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:WakfuProto.ProtoPartyInstanceInfoEntry)
  if (has_dungeoninfo()) {
    GOOGLE_DCHECK(dungeoninfo_ != NULL);
    dungeoninfo_->::WakfuProto::ProtoDungeon::Clear();
  }
  index_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProtoPartyInstanceInfoEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WakfuProto.ProtoPartyInstanceInfoEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (tag == 8u) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .WakfuProto.ProtoDungeon dungeonInfo = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dungeoninfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WakfuProto.ProtoPartyInstanceInfoEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WakfuProto.ProtoPartyInstanceInfoEntry)
  return false;
#undef DO_
}

void ProtoPartyInstanceInfoEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WakfuProto.ProtoPartyInstanceInfoEntry)
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // required .WakfuProto.ProtoDungeon dungeonInfo = 2;
  if (has_dungeoninfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->dungeoninfo_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WakfuProto.ProtoPartyInstanceInfoEntry)
}

::google::protobuf::uint8* ProtoPartyInstanceInfoEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WakfuProto.ProtoPartyInstanceInfoEntry)
  // required int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // required .WakfuProto.ProtoDungeon dungeonInfo = 2;
  if (has_dungeoninfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->dungeoninfo_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WakfuProto.ProtoPartyInstanceInfoEntry)
  return target;
}

size_t ProtoPartyInstanceInfoEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:WakfuProto.ProtoPartyInstanceInfoEntry)
  size_t total_size = 0;

  if (has_dungeoninfo()) {
    // required .WakfuProto.ProtoDungeon dungeonInfo = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dungeoninfo_);
  }

  if (has_index()) {
    // required int32 index = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());
  }

  return total_size;
}
size_t ProtoPartyInstanceInfoEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WakfuProto.ProtoPartyInstanceInfoEntry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .WakfuProto.ProtoDungeon dungeonInfo = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dungeoninfo_);

    // required int32 index = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoPartyInstanceInfoEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WakfuProto.ProtoPartyInstanceInfoEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoPartyInstanceInfoEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtoPartyInstanceInfoEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WakfuProto.ProtoPartyInstanceInfoEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WakfuProto.ProtoPartyInstanceInfoEntry)
    MergeFrom(*source);
  }
}

void ProtoPartyInstanceInfoEntry::MergeFrom(const ProtoPartyInstanceInfoEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WakfuProto.ProtoPartyInstanceInfoEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_dungeoninfo()) {
      mutable_dungeoninfo()->::WakfuProto::ProtoDungeon::MergeFrom(from.dungeoninfo());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
}

void ProtoPartyInstanceInfoEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WakfuProto.ProtoPartyInstanceInfoEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoPartyInstanceInfoEntry::CopyFrom(const ProtoPartyInstanceInfoEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WakfuProto.ProtoPartyInstanceInfoEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoPartyInstanceInfoEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_dungeoninfo()) {
    if (!this->dungeoninfo_->IsInitialized()) return false;
  }
  return true;
}

void ProtoPartyInstanceInfoEntry::Swap(ProtoPartyInstanceInfoEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoPartyInstanceInfoEntry::InternalSwap(ProtoPartyInstanceInfoEntry* other) {
  std::swap(dungeoninfo_, other->dungeoninfo_);
  std::swap(index_, other->index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProtoPartyInstanceInfoEntry::GetMetadata() const {
  protobuf_dungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dungeon_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProtoPartyInstanceInfoEntry

// required int32 index = 1;
bool ProtoPartyInstanceInfoEntry::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ProtoPartyInstanceInfoEntry::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
void ProtoPartyInstanceInfoEntry::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void ProtoPartyInstanceInfoEntry::clear_index() {
  index_ = 0;
  clear_has_index();
}
::google::protobuf::int32 ProtoPartyInstanceInfoEntry::index() const {
  // @@protoc_insertion_point(field_get:WakfuProto.ProtoPartyInstanceInfoEntry.index)
  return index_;
}
void ProtoPartyInstanceInfoEntry::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:WakfuProto.ProtoPartyInstanceInfoEntry.index)
}

// required .WakfuProto.ProtoDungeon dungeonInfo = 2;
bool ProtoPartyInstanceInfoEntry::has_dungeoninfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ProtoPartyInstanceInfoEntry::set_has_dungeoninfo() {
  _has_bits_[0] |= 0x00000001u;
}
void ProtoPartyInstanceInfoEntry::clear_has_dungeoninfo() {
  _has_bits_[0] &= ~0x00000001u;
}
void ProtoPartyInstanceInfoEntry::clear_dungeoninfo() {
  if (dungeoninfo_ != NULL) dungeoninfo_->::WakfuProto::ProtoDungeon::Clear();
  clear_has_dungeoninfo();
}
const ::WakfuProto::ProtoDungeon& ProtoPartyInstanceInfoEntry::dungeoninfo() const {
  // @@protoc_insertion_point(field_get:WakfuProto.ProtoPartyInstanceInfoEntry.dungeonInfo)
  return dungeoninfo_ != NULL ? *dungeoninfo_
                         : *::WakfuProto::ProtoDungeon::internal_default_instance();
}
::WakfuProto::ProtoDungeon* ProtoPartyInstanceInfoEntry::mutable_dungeoninfo() {
  set_has_dungeoninfo();
  if (dungeoninfo_ == NULL) {
    dungeoninfo_ = new ::WakfuProto::ProtoDungeon;
  }
  // @@protoc_insertion_point(field_mutable:WakfuProto.ProtoPartyInstanceInfoEntry.dungeonInfo)
  return dungeoninfo_;
}
::WakfuProto::ProtoDungeon* ProtoPartyInstanceInfoEntry::release_dungeoninfo() {
  // @@protoc_insertion_point(field_release:WakfuProto.ProtoPartyInstanceInfoEntry.dungeonInfo)
  clear_has_dungeoninfo();
  ::WakfuProto::ProtoDungeon* temp = dungeoninfo_;
  dungeoninfo_ = NULL;
  return temp;
}
void ProtoPartyInstanceInfoEntry::set_allocated_dungeoninfo(::WakfuProto::ProtoDungeon* dungeoninfo) {
  delete dungeoninfo_;
  dungeoninfo_ = dungeoninfo;
  if (dungeoninfo) {
    set_has_dungeoninfo();
  } else {
    clear_has_dungeoninfo();
  }
  // @@protoc_insertion_point(field_set_allocated:WakfuProto.ProtoPartyInstanceInfoEntry.dungeonInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace WakfuProto

// @@protoc_insertion_point(global_scope)
