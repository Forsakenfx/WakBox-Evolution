// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: item.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "item.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace WakfuProto {
class ProtoItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ProtoItem> {
} _ProtoItem_default_instance_;
class ProtoPetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ProtoPet> {
} _ProtoPet_default_instance_;
class ProtoItemXpDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ProtoItemXp> {
} _ProtoItemXp_default_instance_;
class ProtoGems_ProtoGemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ProtoGems_ProtoGem> {
} _ProtoGems_ProtoGem_default_instance_;
class ProtoGemsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ProtoGems> {
} _ProtoGems_default_instance_;
class ProtoRentInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ProtoRentInfo> {
} _ProtoRentInfo_default_instance_;
class ProtoCompanionInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ProtoCompanionInfo> {
} _ProtoCompanionInfo_default_instance_;
class ProtoItemBindDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ProtoItemBind> {
} _ProtoItemBind_default_instance_;
class ProtoItemElementsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ProtoItemElements> {
} _ProtoItemElements_default_instance_;
class ProtoMergedItemsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ProtoMergedItems> {
} _ProtoMergedItems_default_instance_;
class ProtoBagItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ProtoBagItem> {
} _ProtoBagItem_default_instance_;
class ProtoBagDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ProtoBag> {
} _ProtoBag_default_instance_;
class ProtoCharacterBagsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ProtoCharacterBags> {
} _ProtoCharacterBags_default_instance_;
class ProtoTemporaryInventoryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ProtoTemporaryInventory> {
} _ProtoTemporaryInventory_default_instance_;

namespace protobuf_item_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[14];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoItem, uniqueid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoItem, refid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoItem, qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoItem, pet_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoItem, xp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoItem, gems_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoItem, rentinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoItem, companioninfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoItem, bind_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoItem, elements_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoItem, mergeditems_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoItem, mimisymbicskinrefid_),
  8,
  9,
  10,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  11,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPet, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPet, definitionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPet, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPet, coloritemrefid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPet, equippedrefitemid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPet, health_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPet, xp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPet, lastmealdate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPet, lasthungrydate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPet, sleeprefitemid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPet, sleepdate_),
  1,
  0,
  2,
  3,
  4,
  6,
  5,
  8,
  7,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoItemXp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoItemXp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoItemXp, definitionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoItemXp, itemxp_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoGems_ProtoGem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoGems_ProtoGem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoGems_ProtoGem, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoGems_ProtoGem, refid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoGems, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoGems, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoGems, gems_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRentInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRentInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRentInfo, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRentInfo, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRentInfo, count_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCompanionInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCompanionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCompanionInfo, xp_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoItemBind, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoItemBind, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoItemBind, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoItemBind, applied_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoItemElements, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoItemElements, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoItemElements, damageelements_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoItemElements, resistanceelements_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMergedItems, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMergedItems, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMergedItems, items_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBagItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBagItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBagItem, item_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBagItem, position_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBag, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBag, uniqueid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBag, refid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBag, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBag, maxsize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBag, items_),
  0,
  1,
  2,
  3,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCharacterBags, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCharacterBags, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCharacterBags, bags_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTemporaryInventory, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTemporaryInventory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTemporaryInventory, items_),
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 16, sizeof(ProtoItem)},
  { 28, 42, sizeof(ProtoPet)},
  { 52, 58, sizeof(ProtoItemXp)},
  { 60, 66, sizeof(ProtoGems_ProtoGem)},
  { 68, 73, sizeof(ProtoGems)},
  { 74, 81, sizeof(ProtoRentInfo)},
  { 84, 89, sizeof(ProtoCompanionInfo)},
  { 90, 96, sizeof(ProtoItemBind)},
  { 98, 104, sizeof(ProtoItemElements)},
  { 106, 111, sizeof(ProtoMergedItems)},
  { 112, 118, sizeof(ProtoBagItem)},
  { 120, 129, sizeof(ProtoBag)},
  { 134, 139, sizeof(ProtoCharacterBags)},
  { 140, 145, sizeof(ProtoTemporaryInventory)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProtoItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProtoPet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProtoItemXp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProtoGems_ProtoGem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProtoGems_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProtoRentInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProtoCompanionInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProtoItemBind_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProtoItemElements_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProtoMergedItems_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProtoBagItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProtoBag_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProtoCharacterBags_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProtoTemporaryInventory_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "item.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 14);
}

}  // namespace

void TableStruct::Shutdown() {
  _ProtoItem_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _ProtoPet_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _ProtoItemXp_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _ProtoGems_ProtoGem_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _ProtoGems_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _ProtoRentInfo_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _ProtoCompanionInfo_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _ProtoItemBind_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _ProtoItemElements_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _ProtoMergedItems_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _ProtoBagItem_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _ProtoBag_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _ProtoCharacterBags_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _ProtoTemporaryInventory_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ProtoItem_default_instance_.DefaultConstruct();
  _ProtoPet_default_instance_.DefaultConstruct();
  _ProtoItemXp_default_instance_.DefaultConstruct();
  _ProtoGems_ProtoGem_default_instance_.DefaultConstruct();
  _ProtoGems_default_instance_.DefaultConstruct();
  _ProtoRentInfo_default_instance_.DefaultConstruct();
  _ProtoCompanionInfo_default_instance_.DefaultConstruct();
  _ProtoItemBind_default_instance_.DefaultConstruct();
  _ProtoItemElements_default_instance_.DefaultConstruct();
  _ProtoMergedItems_default_instance_.DefaultConstruct();
  _ProtoBagItem_default_instance_.DefaultConstruct();
  _ProtoBag_default_instance_.DefaultConstruct();
  _ProtoCharacterBags_default_instance_.DefaultConstruct();
  _ProtoTemporaryInventory_default_instance_.DefaultConstruct();
  _ProtoItem_default_instance_.get_mutable()->pet_ = const_cast< ::WakfuProto::ProtoPet*>(
      ::WakfuProto::ProtoPet::internal_default_instance());
  _ProtoItem_default_instance_.get_mutable()->xp_ = const_cast< ::WakfuProto::ProtoItemXp*>(
      ::WakfuProto::ProtoItemXp::internal_default_instance());
  _ProtoItem_default_instance_.get_mutable()->gems_ = const_cast< ::WakfuProto::ProtoGems*>(
      ::WakfuProto::ProtoGems::internal_default_instance());
  _ProtoItem_default_instance_.get_mutable()->rentinfo_ = const_cast< ::WakfuProto::ProtoRentInfo*>(
      ::WakfuProto::ProtoRentInfo::internal_default_instance());
  _ProtoItem_default_instance_.get_mutable()->companioninfo_ = const_cast< ::WakfuProto::ProtoCompanionInfo*>(
      ::WakfuProto::ProtoCompanionInfo::internal_default_instance());
  _ProtoItem_default_instance_.get_mutable()->bind_ = const_cast< ::WakfuProto::ProtoItemBind*>(
      ::WakfuProto::ProtoItemBind::internal_default_instance());
  _ProtoItem_default_instance_.get_mutable()->elements_ = const_cast< ::WakfuProto::ProtoItemElements*>(
      ::WakfuProto::ProtoItemElements::internal_default_instance());
  _ProtoItem_default_instance_.get_mutable()->mergeditems_ = const_cast< ::WakfuProto::ProtoMergedItems*>(
      ::WakfuProto::ProtoMergedItems::internal_default_instance());
  _ProtoBagItem_default_instance_.get_mutable()->item_ = const_cast< ::WakfuProto::ProtoItem*>(
      ::WakfuProto::ProtoItem::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\nitem.proto\022\nWakfuProto\"\264\003\n\tProtoItem\022\020"
      "\n\010uniqueId\030\001 \002(\003\022\r\n\005refId\030\002 \002(\005\022\013\n\003qty\030\003"
      " \002(\005\022!\n\003pet\0302 \001(\0132\024.WakfuProto.ProtoPet\022"
      "#\n\002xp\0303 \001(\0132\027.WakfuProto.ProtoItemXp\022#\n\004"
      "gems\0304 \001(\0132\025.WakfuProto.ProtoGems\022+\n\010ren"
      "tInfo\0305 \001(\0132\031.WakfuProto.ProtoRentInfo\0225"
      "\n\rcompanionInfo\0306 \001(\0132\036.WakfuProto.Proto"
      "CompanionInfo\022\'\n\004bind\0307 \001(\0132\031.WakfuProto"
      ".ProtoItemBind\022/\n\010elements\0308 \001(\0132\035.Wakfu"
      "Proto.ProtoItemElements\0221\n\013mergedItems\0309"
      " \001(\0132\034.WakfuProto.ProtoMergedItems\022\033\n\023mi"
      "miSymbicSkinRefId\030: \001(\005\"\326\001\n\010ProtoPet\022\024\n\014"
      "definitionId\030\001 \002(\005\022\014\n\004name\030\002 \002(\t\022\026\n\016colo"
      "rItemRefId\030\003 \002(\005\022\031\n\021equippedRefItemId\030\004 "
      "\002(\005\022\016\n\006health\030\005 \002(\005\022\n\n\002xp\030\006 \002(\005\022\024\n\014lastM"
      "ealDate\030\007 \002(\003\022\026\n\016lastHungryDate\030\010 \002(\003\022\026\n"
      "\016sleepRefItemId\030\t \002(\005\022\021\n\tsleepdate\030\n \002(\003"
      "\"3\n\013ProtoItemXp\022\024\n\014definitionId\030\001 \002(\005\022\016\n"
      "\006itemXp\030\002 \002(\003\"f\n\tProtoGems\022,\n\004gems\030\001 \003(\013"
      "2\036.WakfuProto.ProtoGems.ProtoGem\032+\n\010Prot"
      "oGem\022\020\n\010position\030\n \002(\005\022\r\n\005refId\030\013 \002(\005\">\n"
      "\rProtoRentInfo\022\014\n\004type\030\001 \002(\005\022\020\n\010duration"
      "\030\002 \002(\003\022\r\n\005count\030\003 \002(\003\" \n\022ProtoCompanionI"
      "nfo\022\n\n\002xp\030\001 \002(\003\".\n\rProtoItemBind\022\014\n\004type"
      "\030\001 \002(\005\022\017\n\007applied\030\002 \002(\010\"G\n\021ProtoItemElem"
      "ents\022\026\n\016damageElements\030\001 \002(\005\022\032\n\022resistan"
      "ceElements\030\002 \002(\005\"8\n\020ProtoMergedItems\022$\n\005"
      "items\030\001 \003(\0132\025.WakfuProto.ProtoItem\"E\n\014Pr"
      "otoBagItem\022#\n\004item\030\001 \002(\0132\025.WakfuProto.Pr"
      "otoItem\022\020\n\010position\030\002 \002(\005\"w\n\010ProtoBag\022\020\n"
      "\010uniqueId\030\001 \002(\003\022\r\n\005refId\030\002 \002(\005\022\020\n\010positi"
      "on\030\003 \002(\005\022\017\n\007maxSize\030\005 \002(\005\022\'\n\005items\030\006 \003(\013"
      "2\030.WakfuProto.ProtoBagItem\"8\n\022ProtoChara"
      "cterBags\022\"\n\004bags\030\001 \003(\0132\024.WakfuProto.Prot"
      "oBag\"\?\n\027ProtoTemporaryInventory\022$\n\005items"
      "\030\001 \003(\0132\025.WakfuProto.ProtoItem"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1429);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "item.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_item_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoItem::kUniqueIdFieldNumber;
const int ProtoItem::kRefIdFieldNumber;
const int ProtoItem::kQtyFieldNumber;
const int ProtoItem::kPetFieldNumber;
const int ProtoItem::kXpFieldNumber;
const int ProtoItem::kGemsFieldNumber;
const int ProtoItem::kRentInfoFieldNumber;
const int ProtoItem::kCompanionInfoFieldNumber;
const int ProtoItem::kBindFieldNumber;
const int ProtoItem::kElementsFieldNumber;
const int ProtoItem::kMergedItemsFieldNumber;
const int ProtoItem::kMimiSymbicSkinRefIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoItem::ProtoItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_item_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WakfuProto.ProtoItem)
}
ProtoItem::ProtoItem(const ProtoItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pet()) {
    pet_ = new ::WakfuProto::ProtoPet(*from.pet_);
  } else {
    pet_ = NULL;
  }
  if (from.has_xp()) {
    xp_ = new ::WakfuProto::ProtoItemXp(*from.xp_);
  } else {
    xp_ = NULL;
  }
  if (from.has_gems()) {
    gems_ = new ::WakfuProto::ProtoGems(*from.gems_);
  } else {
    gems_ = NULL;
  }
  if (from.has_rentinfo()) {
    rentinfo_ = new ::WakfuProto::ProtoRentInfo(*from.rentinfo_);
  } else {
    rentinfo_ = NULL;
  }
  if (from.has_companioninfo()) {
    companioninfo_ = new ::WakfuProto::ProtoCompanionInfo(*from.companioninfo_);
  } else {
    companioninfo_ = NULL;
  }
  if (from.has_bind()) {
    bind_ = new ::WakfuProto::ProtoItemBind(*from.bind_);
  } else {
    bind_ = NULL;
  }
  if (from.has_elements()) {
    elements_ = new ::WakfuProto::ProtoItemElements(*from.elements_);
  } else {
    elements_ = NULL;
  }
  if (from.has_mergeditems()) {
    mergeditems_ = new ::WakfuProto::ProtoMergedItems(*from.mergeditems_);
  } else {
    mergeditems_ = NULL;
  }
  ::memcpy(&uniqueid_, &from.uniqueid_,
    reinterpret_cast<char*>(&mimisymbicskinrefid_) -
    reinterpret_cast<char*>(&uniqueid_) + sizeof(mimisymbicskinrefid_));
  // @@protoc_insertion_point(copy_constructor:WakfuProto.ProtoItem)
}

void ProtoItem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pet_, 0, reinterpret_cast<char*>(&mimisymbicskinrefid_) -
    reinterpret_cast<char*>(&pet_) + sizeof(mimisymbicskinrefid_));
}

ProtoItem::~ProtoItem() {
  // @@protoc_insertion_point(destructor:WakfuProto.ProtoItem)
  SharedDtor();
}

void ProtoItem::SharedDtor() {
  if (this != internal_default_instance()) {
    delete pet_;
  }
  if (this != internal_default_instance()) {
    delete xp_;
  }
  if (this != internal_default_instance()) {
    delete gems_;
  }
  if (this != internal_default_instance()) {
    delete rentinfo_;
  }
  if (this != internal_default_instance()) {
    delete companioninfo_;
  }
  if (this != internal_default_instance()) {
    delete bind_;
  }
  if (this != internal_default_instance()) {
    delete elements_;
  }
  if (this != internal_default_instance()) {
    delete mergeditems_;
  }
}

void ProtoItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoItem::descriptor() {
  protobuf_item_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_item_2eproto::file_level_metadata[0].descriptor;
}

const ProtoItem& ProtoItem::default_instance() {
  protobuf_item_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProtoItem* ProtoItem::New(::google::protobuf::Arena* arena) const {
  ProtoItem* n = new ProtoItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtoItem::Clear() {
// @@protoc_insertion_point(message_clear_start:WakfuProto.ProtoItem)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_pet()) {
      GOOGLE_DCHECK(pet_ != NULL);
      pet_->::WakfuProto::ProtoPet::Clear();
    }
    if (has_xp()) {
      GOOGLE_DCHECK(xp_ != NULL);
      xp_->::WakfuProto::ProtoItemXp::Clear();
    }
    if (has_gems()) {
      GOOGLE_DCHECK(gems_ != NULL);
      gems_->::WakfuProto::ProtoGems::Clear();
    }
    if (has_rentinfo()) {
      GOOGLE_DCHECK(rentinfo_ != NULL);
      rentinfo_->::WakfuProto::ProtoRentInfo::Clear();
    }
    if (has_companioninfo()) {
      GOOGLE_DCHECK(companioninfo_ != NULL);
      companioninfo_->::WakfuProto::ProtoCompanionInfo::Clear();
    }
    if (has_bind()) {
      GOOGLE_DCHECK(bind_ != NULL);
      bind_->::WakfuProto::ProtoItemBind::Clear();
    }
    if (has_elements()) {
      GOOGLE_DCHECK(elements_ != NULL);
      elements_->::WakfuProto::ProtoItemElements::Clear();
    }
    if (has_mergeditems()) {
      GOOGLE_DCHECK(mergeditems_ != NULL);
      mergeditems_->::WakfuProto::ProtoMergedItems::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 3840u) {
    ::memset(&uniqueid_, 0, reinterpret_cast<char*>(&mimisymbicskinrefid_) -
      reinterpret_cast<char*>(&uniqueid_) + sizeof(mimisymbicskinrefid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProtoItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WakfuProto.ProtoItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uniqueId = 1;
      case 1: {
        if (tag == 8u) {
          set_has_uniqueid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uniqueid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 refId = 2;
      case 2: {
        if (tag == 16u) {
          set_has_refid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 qty = 3;
      case 3: {
        if (tag == 24u) {
          set_has_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .WakfuProto.ProtoPet pet = 50;
      case 50: {
        if (tag == 402u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pet()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .WakfuProto.ProtoItemXp xp = 51;
      case 51: {
        if (tag == 410u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_xp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .WakfuProto.ProtoGems gems = 52;
      case 52: {
        if (tag == 418u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gems()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .WakfuProto.ProtoRentInfo rentInfo = 53;
      case 53: {
        if (tag == 426u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rentinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .WakfuProto.ProtoCompanionInfo companionInfo = 54;
      case 54: {
        if (tag == 434u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_companioninfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .WakfuProto.ProtoItemBind bind = 55;
      case 55: {
        if (tag == 442u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bind()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .WakfuProto.ProtoItemElements elements = 56;
      case 56: {
        if (tag == 450u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_elements()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .WakfuProto.ProtoMergedItems mergedItems = 57;
      case 57: {
        if (tag == 458u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mergeditems()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mimiSymbicSkinRefId = 58;
      case 58: {
        if (tag == 464u) {
          set_has_mimisymbicskinrefid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mimisymbicskinrefid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WakfuProto.ProtoItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WakfuProto.ProtoItem)
  return false;
#undef DO_
}

void ProtoItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WakfuProto.ProtoItem)
  // required int64 uniqueId = 1;
  if (has_uniqueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uniqueid(), output);
  }

  // required int32 refId = 2;
  if (has_refid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->refid(), output);
  }

  // required int32 qty = 3;
  if (has_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->qty(), output);
  }

  // optional .WakfuProto.ProtoPet pet = 50;
  if (has_pet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, *this->pet_, output);
  }

  // optional .WakfuProto.ProtoItemXp xp = 51;
  if (has_xp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      51, *this->xp_, output);
  }

  // optional .WakfuProto.ProtoGems gems = 52;
  if (has_gems()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      52, *this->gems_, output);
  }

  // optional .WakfuProto.ProtoRentInfo rentInfo = 53;
  if (has_rentinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      53, *this->rentinfo_, output);
  }

  // optional .WakfuProto.ProtoCompanionInfo companionInfo = 54;
  if (has_companioninfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      54, *this->companioninfo_, output);
  }

  // optional .WakfuProto.ProtoItemBind bind = 55;
  if (has_bind()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      55, *this->bind_, output);
  }

  // optional .WakfuProto.ProtoItemElements elements = 56;
  if (has_elements()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      56, *this->elements_, output);
  }

  // optional .WakfuProto.ProtoMergedItems mergedItems = 57;
  if (has_mergeditems()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      57, *this->mergeditems_, output);
  }

  // optional int32 mimiSymbicSkinRefId = 58;
  if (has_mimisymbicskinrefid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(58, this->mimisymbicskinrefid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WakfuProto.ProtoItem)
}

::google::protobuf::uint8* ProtoItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WakfuProto.ProtoItem)
  // required int64 uniqueId = 1;
  if (has_uniqueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uniqueid(), target);
  }

  // required int32 refId = 2;
  if (has_refid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->refid(), target);
  }

  // required int32 qty = 3;
  if (has_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->qty(), target);
  }

  // optional .WakfuProto.ProtoPet pet = 50;
  if (has_pet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        50, *this->pet_, false, target);
  }

  // optional .WakfuProto.ProtoItemXp xp = 51;
  if (has_xp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        51, *this->xp_, false, target);
  }

  // optional .WakfuProto.ProtoGems gems = 52;
  if (has_gems()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        52, *this->gems_, false, target);
  }

  // optional .WakfuProto.ProtoRentInfo rentInfo = 53;
  if (has_rentinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        53, *this->rentinfo_, false, target);
  }

  // optional .WakfuProto.ProtoCompanionInfo companionInfo = 54;
  if (has_companioninfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        54, *this->companioninfo_, false, target);
  }

  // optional .WakfuProto.ProtoItemBind bind = 55;
  if (has_bind()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        55, *this->bind_, false, target);
  }

  // optional .WakfuProto.ProtoItemElements elements = 56;
  if (has_elements()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        56, *this->elements_, false, target);
  }

  // optional .WakfuProto.ProtoMergedItems mergedItems = 57;
  if (has_mergeditems()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        57, *this->mergeditems_, false, target);
  }

  // optional int32 mimiSymbicSkinRefId = 58;
  if (has_mimisymbicskinrefid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(58, this->mimisymbicskinrefid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WakfuProto.ProtoItem)
  return target;
}

size_t ProtoItem::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:WakfuProto.ProtoItem)
  size_t total_size = 0;

  if (has_uniqueid()) {
    // required int64 uniqueId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uniqueid());
  }

  if (has_refid()) {
    // required int32 refId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->refid());
  }

  if (has_qty()) {
    // required int32 qty = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->qty());
  }

  return total_size;
}
size_t ProtoItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WakfuProto.ProtoItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000700) ^ 0x00000700) == 0) {  // All required fields are present.
    // required int64 uniqueId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uniqueid());

    // required int32 refId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->refid());

    // required int32 qty = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->qty());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .WakfuProto.ProtoPet pet = 50;
    if (has_pet()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pet_);
    }

    // optional .WakfuProto.ProtoItemXp xp = 51;
    if (has_xp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->xp_);
    }

    // optional .WakfuProto.ProtoGems gems = 52;
    if (has_gems()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gems_);
    }

    // optional .WakfuProto.ProtoRentInfo rentInfo = 53;
    if (has_rentinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->rentinfo_);
    }

    // optional .WakfuProto.ProtoCompanionInfo companionInfo = 54;
    if (has_companioninfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->companioninfo_);
    }

    // optional .WakfuProto.ProtoItemBind bind = 55;
    if (has_bind()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bind_);
    }

    // optional .WakfuProto.ProtoItemElements elements = 56;
    if (has_elements()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->elements_);
    }

    // optional .WakfuProto.ProtoMergedItems mergedItems = 57;
    if (has_mergeditems()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mergeditems_);
    }

  }
  // optional int32 mimiSymbicSkinRefId = 58;
  if (has_mimisymbicskinrefid()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mimisymbicskinrefid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WakfuProto.ProtoItem)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtoItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WakfuProto.ProtoItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WakfuProto.ProtoItem)
    MergeFrom(*source);
  }
}

void ProtoItem::MergeFrom(const ProtoItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WakfuProto.ProtoItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_pet()) {
      mutable_pet()->::WakfuProto::ProtoPet::MergeFrom(from.pet());
    }
    if (from.has_xp()) {
      mutable_xp()->::WakfuProto::ProtoItemXp::MergeFrom(from.xp());
    }
    if (from.has_gems()) {
      mutable_gems()->::WakfuProto::ProtoGems::MergeFrom(from.gems());
    }
    if (from.has_rentinfo()) {
      mutable_rentinfo()->::WakfuProto::ProtoRentInfo::MergeFrom(from.rentinfo());
    }
    if (from.has_companioninfo()) {
      mutable_companioninfo()->::WakfuProto::ProtoCompanionInfo::MergeFrom(from.companioninfo());
    }
    if (from.has_bind()) {
      mutable_bind()->::WakfuProto::ProtoItemBind::MergeFrom(from.bind());
    }
    if (from.has_elements()) {
      mutable_elements()->::WakfuProto::ProtoItemElements::MergeFrom(from.elements());
    }
    if (from.has_mergeditems()) {
      mutable_mergeditems()->::WakfuProto::ProtoMergedItems::MergeFrom(from.mergeditems());
    }
  }
  if (from._has_bits_[8 / 32] & 3840u) {
    if (from.has_uniqueid()) {
      set_uniqueid(from.uniqueid());
    }
    if (from.has_refid()) {
      set_refid(from.refid());
    }
    if (from.has_qty()) {
      set_qty(from.qty());
    }
    if (from.has_mimisymbicskinrefid()) {
      set_mimisymbicskinrefid(from.mimisymbicskinrefid());
    }
  }
}

void ProtoItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WakfuProto.ProtoItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoItem::CopyFrom(const ProtoItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WakfuProto.ProtoItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000700) != 0x00000700) return false;
  if (has_pet()) {
    if (!this->pet_->IsInitialized()) return false;
  }
  if (has_xp()) {
    if (!this->xp_->IsInitialized()) return false;
  }
  if (has_gems()) {
    if (!this->gems_->IsInitialized()) return false;
  }
  if (has_rentinfo()) {
    if (!this->rentinfo_->IsInitialized()) return false;
  }
  if (has_companioninfo()) {
    if (!this->companioninfo_->IsInitialized()) return false;
  }
  if (has_bind()) {
    if (!this->bind_->IsInitialized()) return false;
  }
  if (has_elements()) {
    if (!this->elements_->IsInitialized()) return false;
  }
  if (has_mergeditems()) {
    if (!this->mergeditems_->IsInitialized()) return false;
  }
  return true;
}

void ProtoItem::Swap(ProtoItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoItem::InternalSwap(ProtoItem* other) {
  std::swap(pet_, other->pet_);
  std::swap(xp_, other->xp_);
  std::swap(gems_, other->gems_);
  std::swap(rentinfo_, other->rentinfo_);
  std::swap(companioninfo_, other->companioninfo_);
  std::swap(bind_, other->bind_);
  std::swap(elements_, other->elements_);
  std::swap(mergeditems_, other->mergeditems_);
  std::swap(uniqueid_, other->uniqueid_);
  std::swap(refid_, other->refid_);
  std::swap(qty_, other->qty_);
  std::swap(mimisymbicskinrefid_, other->mimisymbicskinrefid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProtoItem::GetMetadata() const {
  protobuf_item_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_item_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProtoItem

// required int64 uniqueId = 1;
bool ProtoItem::has_uniqueid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ProtoItem::set_has_uniqueid() {
  _has_bits_[0] |= 0x00000100u;
}
void ProtoItem::clear_has_uniqueid() {
  _has_bits_[0] &= ~0x00000100u;
}
void ProtoItem::clear_uniqueid() {
  uniqueid_ = GOOGLE_LONGLONG(0);
  clear_has_uniqueid();
}
::google::protobuf::int64 ProtoItem::uniqueid() const {
  // @@protoc_insertion_point(field_get:WakfuProto.ProtoItem.uniqueId)
  return uniqueid_;
}
void ProtoItem::set_uniqueid(::google::protobuf::int64 value) {
  set_has_uniqueid();
  uniqueid_ = value;
  // @@protoc_insertion_point(field_set:WakfuProto.ProtoItem.uniqueId)
}

// required int32 refId = 2;
bool ProtoItem::has_refid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ProtoItem::set_has_refid() {
  _has_bits_[0] |= 0x00000200u;
}
void ProtoItem::clear_has_refid() {
  _has_bits_[0] &= ~0x00000200u;
}
void ProtoItem::clear_refid() {
  refid_ = 0;
  clear_has_refid();
}
::google::protobuf::int32 ProtoItem::refid() const {
  // @@protoc_insertion_point(field_get:WakfuProto.ProtoItem.refId)
  return refid_;
}
void ProtoItem::set_refid(::google::protobuf::int32 value) {
  set_has_refid();
  refid_ = value;
  // @@protoc_insertion_point(field_set:WakfuProto.ProtoItem.refId)
}

// required int32 qty = 3;
bool ProtoItem::has_qty() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ProtoItem::set_has_qty() {
  _has_bits_[0] |= 0x00000400u;
}
void ProtoItem::clear_has_qty() {
  _has_bits_[0] &= ~0x00000400u;
}
void ProtoItem::clear_qty() {
  qty_ = 0;
  clear_has_qty();
}
::google::protobuf::int32 ProtoItem::qty() const {
  // @@protoc_insertion_point(field_get:WakfuProto.ProtoItem.qty)
  return qty_;
}
void ProtoItem::set_qty(::google::protobuf::int32 value) {
  set_has_qty();
  qty_ = value;
  // @@protoc_insertion_point(field_set:WakfuProto.ProtoItem.qty)
}

// optional .WakfuProto.ProtoPet pet = 50;
bool ProtoItem::has_pet() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ProtoItem::set_has_pet() {
  _has_bits_[0] |= 0x00000001u;
}
void ProtoItem::clear_has_pet() {
  _has_bits_[0] &= ~0x00000001u;
}
void ProtoItem::clear_pet() {
  if (pet_ != NULL) pet_->::WakfuProto::ProtoPet::Clear();
  clear_has_pet();
}
const ::WakfuProto::ProtoPet& ProtoItem::pet() const {
  // @@protoc_insertion_point(field_get:WakfuProto.ProtoItem.pet)
  return pet_ != NULL ? *pet_
                         : *::WakfuProto::ProtoPet::internal_default_instance();
}
::WakfuProto::ProtoPet* ProtoItem::mutable_pet() {
  set_has_pet();
  if (pet_ == NULL) {
    pet_ = new ::WakfuProto::ProtoPet;
  }
  // @@protoc_insertion_point(field_mutable:WakfuProto.ProtoItem.pet)
  return pet_;
}
::WakfuProto::ProtoPet* ProtoItem::release_pet() {
  // @@protoc_insertion_point(field_release:WakfuProto.ProtoItem.pet)
  clear_has_pet();
  ::WakfuProto::ProtoPet* temp = pet_;
  pet_ = NULL;
  return temp;
}
void ProtoItem::set_allocated_pet(::WakfuProto::ProtoPet* pet) {
  delete pet_;
  pet_ = pet;
  if (pet) {
    set_has_pet();
  } else {
    clear_has_pet();
  }
  // @@protoc_insertion_point(field_set_allocated:WakfuProto.ProtoItem.pet)
}

// optional .WakfuProto.ProtoItemXp xp = 51;
bool ProtoItem::has_xp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ProtoItem::set_has_xp() {
  _has_bits_[0] |= 0x00000002u;
}
void ProtoItem::clear_has_xp() {
  _has_bits_[0] &= ~0x00000002u;
}
void ProtoItem::clear_xp() {
  if (xp_ != NULL) xp_->::WakfuProto::ProtoItemXp::Clear();
  clear_has_xp();
}
const ::WakfuProto::ProtoItemXp& ProtoItem::xp() const {
  // @@protoc_insertion_point(field_get:WakfuProto.ProtoItem.xp)
  return xp_ != NULL ? *xp_
                         : *::WakfuProto::ProtoItemXp::internal_default_instance();
}
::WakfuProto::ProtoItemXp* ProtoItem::mutable_xp() {
  set_has_xp();
  if (xp_ == NULL) {
    xp_ = new ::WakfuProto::ProtoItemXp;
  }
  // @@protoc_insertion_point(field_mutable:WakfuProto.ProtoItem.xp)
  return xp_;
}
::WakfuProto::ProtoItemXp* ProtoItem::release_xp() {
  // @@protoc_insertion_point(field_release:WakfuProto.ProtoItem.xp)
  clear_has_xp();
  ::WakfuProto::ProtoItemXp* temp = xp_;
  xp_ = NULL;
  return temp;
}
void ProtoItem::set_allocated_xp(::WakfuProto::ProtoItemXp* xp) {
  delete xp_;
  xp_ = xp;
  if (xp) {
    set_has_xp();
  } else {
    clear_has_xp();
  }
  // @@protoc_insertion_point(field_set_allocated:WakfuProto.ProtoItem.xp)
}

// optional .WakfuProto.ProtoGems gems = 52;
bool ProtoItem::has_gems() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ProtoItem::set_has_gems() {
  _has_bits_[0] |= 0x00000004u;
}
void ProtoItem::clear_has_gems() {
  _has_bits_[0] &= ~0x00000004u;
}
void ProtoItem::clear_gems() {
  if (gems_ != NULL) gems_->::WakfuProto::ProtoGems::Clear();
  clear_has_gems();
}
const ::WakfuProto::ProtoGems& ProtoItem::gems() const {
  // @@protoc_insertion_point(field_get:WakfuProto.ProtoItem.gems)
  return gems_ != NULL ? *gems_
                         : *::WakfuProto::ProtoGems::internal_default_instance();
}
::WakfuProto::ProtoGems* ProtoItem::mutable_gems() {
  set_has_gems();
  if (gems_ == NULL) {
    gems_ = new ::WakfuProto::ProtoGems;
  }
  // @@protoc_insertion_point(field_mutable:WakfuProto.ProtoItem.gems)
  return gems_;
}
::WakfuProto::ProtoGems* ProtoItem::release_gems() {
  // @@protoc_insertion_point(field_release:WakfuProto.ProtoItem.gems)
  clear_has_gems();
  ::WakfuProto::ProtoGems* temp = gems_;
  gems_ = NULL;
  return temp;
}
void ProtoItem::set_allocated_gems(::WakfuProto::ProtoGems* gems) {
  delete gems_;
  gems_ = gems;
  if (gems) {
    set_has_gems();
  } else {
    clear_has_gems();
  }
  // @@protoc_insertion_point(field_set_allocated:WakfuProto.ProtoItem.gems)
}

// optional .WakfuProto.ProtoRentInfo rentInfo = 53;
bool ProtoItem::has_rentinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ProtoItem::set_has_rentinfo() {
  _has_bits_[0] |= 0x00000008u;
}
void ProtoItem::clear_has_rentinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
void ProtoItem::clear_rentinfo() {
  if (rentinfo_ != NULL) rentinfo_->::WakfuProto::ProtoRentInfo::Clear();
  clear_has_rentinfo();
}
const ::WakfuProto::ProtoRentInfo& ProtoItem::rentinfo() const {
  // @@protoc_insertion_point(field_get:WakfuProto.ProtoItem.rentInfo)
  return rentinfo_ != NULL ? *rentinfo_
                         : *::WakfuProto::ProtoRentInfo::internal_default_instance();
}
::WakfuProto::ProtoRentInfo* ProtoItem::mutable_rentinfo() {
  set_has_rentinfo();
  if (rentinfo_ == NULL) {
    rentinfo_ = new ::WakfuProto::ProtoRentInfo;
  }
  // @@protoc_insertion_point(field_mutable:WakfuProto.ProtoItem.rentInfo)
  return rentinfo_;
}
::WakfuProto::ProtoRentInfo* ProtoItem::release_rentinfo() {
  // @@protoc_insertion_point(field_release:WakfuProto.ProtoItem.rentInfo)
  clear_has_rentinfo();
  ::WakfuProto::ProtoRentInfo* temp = rentinfo_;
  rentinfo_ = NULL;
  return temp;
}
void ProtoItem::set_allocated_rentinfo(::WakfuProto::ProtoRentInfo* rentinfo) {
  delete rentinfo_;
  rentinfo_ = rentinfo;
  if (rentinfo) {
    set_has_rentinfo();
  } else {
    clear_has_rentinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:WakfuProto.ProtoItem.rentInfo)
}

// optional .WakfuProto.ProtoCompanionInfo companionInfo = 54;
bool ProtoItem::has_companioninfo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ProtoItem::set_has_companioninfo() {
  _has_bits_[0] |= 0x00000010u;
}
void ProtoItem::clear_has_companioninfo() {
  _has_bits_[0] &= ~0x00000010u;
}
void ProtoItem::clear_companioninfo() {
  if (companioninfo_ != NULL) companioninfo_->::WakfuProto::ProtoCompanionInfo::Clear();
  clear_has_companioninfo();
}
const ::WakfuProto::ProtoCompanionInfo& ProtoItem::companioninfo() const {
  // @@protoc_insertion_point(field_get:WakfuProto.ProtoItem.companionInfo)
  return companioninfo_ != NULL ? *companioninfo_
                         : *::WakfuProto::ProtoCompanionInfo::internal_default_instance();
}
::WakfuProto::ProtoCompanionInfo* ProtoItem::mutable_companioninfo() {
  set_has_companioninfo();
  if (companioninfo_ == NULL) {
    companioninfo_ = new ::WakfuProto::ProtoCompanionInfo;
  }
  // @@protoc_insertion_point(field_mutable:WakfuProto.ProtoItem.companionInfo)
  return companioninfo_;
}
::WakfuProto::ProtoCompanionInfo* ProtoItem::release_companioninfo() {
  // @@protoc_insertion_point(field_release:WakfuProto.ProtoItem.companionInfo)
  clear_has_companioninfo();
  ::WakfuProto::ProtoCompanionInfo* temp = companioninfo_;
  companioninfo_ = NULL;
  return temp;
}
void ProtoItem::set_allocated_companioninfo(::WakfuProto::ProtoCompanionInfo* companioninfo) {
  delete companioninfo_;
  companioninfo_ = companioninfo;
  if (companioninfo) {
    set_has_companioninfo();
  } else {
    clear_has_companioninfo();
  }
  // @@protoc_insertion_point(field_set_allocated:WakfuProto.ProtoItem.companionInfo)
}

// optional .WakfuProto.ProtoItemBind bind = 55;
bool ProtoItem::has_bind() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ProtoItem::set_has_bind() {
  _has_bits_[0] |= 0x00000020u;
}
void ProtoItem::clear_has_bind() {
  _has_bits_[0] &= ~0x00000020u;
}
void ProtoItem::clear_bind() {
  if (bind_ != NULL) bind_->::WakfuProto::ProtoItemBind::Clear();
  clear_has_bind();
}
const ::WakfuProto::ProtoItemBind& ProtoItem::bind() const {
  // @@protoc_insertion_point(field_get:WakfuProto.ProtoItem.bind)
  return bind_ != NULL ? *bind_
                         : *::WakfuProto::ProtoItemBind::internal_default_instance();
}
::WakfuProto::ProtoItemBind* ProtoItem::mutable_bind() {
  set_has_bind();
  if (bind_ == NULL) {
    bind_ = new ::WakfuProto::ProtoItemBind;
  }
  // @@protoc_insertion_point(field_mutable:WakfuProto.ProtoItem.bind)
  return bind_;
}
::WakfuProto::ProtoItemBind* ProtoItem::release_bind() {
  // @@protoc_insertion_point(field_release:WakfuProto.ProtoItem.bind)
  clear_has_bind();
  ::WakfuProto::ProtoItemBind* temp = bind_;
  bind_ = NULL;
  return temp;
}
void ProtoItem::set_allocated_bind(::WakfuProto::ProtoItemBind* bind) {
  delete bind_;
  bind_ = bind;
  if (bind) {
    set_has_bind();
  } else {
    clear_has_bind();
  }
  // @@protoc_insertion_point(field_set_allocated:WakfuProto.ProtoItem.bind)
}

// optional .WakfuProto.ProtoItemElements elements = 56;
bool ProtoItem::has_elements() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ProtoItem::set_has_elements() {
  _has_bits_[0] |= 0x00000040u;
}
void ProtoItem::clear_has_elements() {
  _has_bits_[0] &= ~0x00000040u;
}
void ProtoItem::clear_elements() {
  if (elements_ != NULL) elements_->::WakfuProto::ProtoItemElements::Clear();
  clear_has_elements();
}
const ::WakfuProto::ProtoItemElements& ProtoItem::elements() const {
  // @@protoc_insertion_point(field_get:WakfuProto.ProtoItem.elements)
  return elements_ != NULL ? *elements_
                         : *::WakfuProto::ProtoItemElements::internal_default_instance();
}
::WakfuProto::ProtoItemElements* ProtoItem::mutable_elements() {
  set_has_elements();
  if (elements_ == NULL) {
    elements_ = new ::WakfuProto::ProtoItemElements;
  }
  // @@protoc_insertion_point(field_mutable:WakfuProto.ProtoItem.elements)
  return elements_;
}
::WakfuProto::ProtoItemElements* ProtoItem::release_elements() {
  // @@protoc_insertion_point(field_release:WakfuProto.ProtoItem.elements)
  clear_has_elements();
  ::WakfuProto::ProtoItemElements* temp = elements_;
  elements_ = NULL;
  return temp;
}
void ProtoItem::set_allocated_elements(::WakfuProto::ProtoItemElements* elements) {
  delete elements_;
  elements_ = elements;
  if (elements) {
    set_has_elements();
  } else {
    clear_has_elements();
  }
  // @@protoc_insertion_point(field_set_allocated:WakfuProto.ProtoItem.elements)
}

// optional .WakfuProto.ProtoMergedItems mergedItems = 57;
bool ProtoItem::has_mergeditems() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ProtoItem::set_has_mergeditems() {
  _has_bits_[0] |= 0x00000080u;
}
void ProtoItem::clear_has_mergeditems() {
  _has_bits_[0] &= ~0x00000080u;
}
void ProtoItem::clear_mergeditems() {
  if (mergeditems_ != NULL) mergeditems_->::WakfuProto::ProtoMergedItems::Clear();
  clear_has_mergeditems();
}
const ::WakfuProto::ProtoMergedItems& ProtoItem::mergeditems() const {
  // @@protoc_insertion_point(field_get:WakfuProto.ProtoItem.mergedItems)
  return mergeditems_ != NULL ? *mergeditems_
                         : *::WakfuProto::ProtoMergedItems::internal_default_instance();
}
::WakfuProto::ProtoMergedItems* ProtoItem::mutable_mergeditems() {
  set_has_mergeditems();
  if (mergeditems_ == NULL) {
    mergeditems_ = new ::WakfuProto::ProtoMergedItems;
  }
  // @@protoc_insertion_point(field_mutable:WakfuProto.ProtoItem.mergedItems)
  return mergeditems_;
}
::WakfuProto::ProtoMergedItems* ProtoItem::release_mergeditems() {
  // @@protoc_insertion_point(field_release:WakfuProto.ProtoItem.mergedItems)
  clear_has_mergeditems();
  ::WakfuProto::ProtoMergedItems* temp = mergeditems_;
  mergeditems_ = NULL;
  return temp;
}
void ProtoItem::set_allocated_mergeditems(::WakfuProto::ProtoMergedItems* mergeditems) {
  delete mergeditems_;
  mergeditems_ = mergeditems;
  if (mergeditems) {
    set_has_mergeditems();
  } else {
    clear_has_mergeditems();
  }
  // @@protoc_insertion_point(field_set_allocated:WakfuProto.ProtoItem.mergedItems)
}

// optional int32 mimiSymbicSkinRefId = 58;
bool ProtoItem::has_mimisymbicskinrefid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ProtoItem::set_has_mimisymbicskinrefid() {
  _has_bits_[0] |= 0x00000800u;
}
void ProtoItem::clear_has_mimisymbicskinrefid() {
  _has_bits_[0] &= ~0x00000800u;
}
void ProtoItem::clear_mimisymbicskinrefid() {
  mimisymbicskinrefid_ = 0;
  clear_has_mimisymbicskinrefid();
}
::google::protobuf::int32 ProtoItem::mimisymbicskinrefid() const {
  // @@protoc_insertion_point(field_get:WakfuProto.ProtoItem.mimiSymbicSkinRefId)
  return mimisymbicskinrefid_;
}
void ProtoItem::set_mimisymbicskinrefid(::google::protobuf::int32 value) {
  set_has_mimisymbicskinrefid();
  mimisymbicskinrefid_ = value;
  // @@protoc_insertion_point(field_set:WakfuProto.ProtoItem.mimiSymbicSkinRefId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoPet::kDefinitionIdFieldNumber;
const int ProtoPet::kNameFieldNumber;
const int ProtoPet::kColorItemRefIdFieldNumber;
const int ProtoPet::kEquippedRefItemIdFieldNumber;
const int ProtoPet::kHealthFieldNumber;
const int ProtoPet::kXpFieldNumber;
const int ProtoPet::kLastMealDateFieldNumber;
const int ProtoPet::kLastHungryDateFieldNumber;
const int ProtoPet::kSleepRefItemIdFieldNumber;
const int ProtoPet::kSleepdateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoPet::ProtoPet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_item_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WakfuProto.ProtoPet)
}
ProtoPet::ProtoPet(const ProtoPet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&definitionid_, &from.definitionid_,
    reinterpret_cast<char*>(&sleepdate_) -
    reinterpret_cast<char*>(&definitionid_) + sizeof(sleepdate_));
  // @@protoc_insertion_point(copy_constructor:WakfuProto.ProtoPet)
}

void ProtoPet::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&definitionid_, 0, reinterpret_cast<char*>(&sleepdate_) -
    reinterpret_cast<char*>(&definitionid_) + sizeof(sleepdate_));
}

ProtoPet::~ProtoPet() {
  // @@protoc_insertion_point(destructor:WakfuProto.ProtoPet)
  SharedDtor();
}

void ProtoPet::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ProtoPet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoPet::descriptor() {
  protobuf_item_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_item_2eproto::file_level_metadata[1].descriptor;
}

const ProtoPet& ProtoPet::default_instance() {
  protobuf_item_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProtoPet* ProtoPet::New(::google::protobuf::Arena* arena) const {
  ProtoPet* n = new ProtoPet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtoPet::Clear() {
// @@protoc_insertion_point(message_clear_start:WakfuProto.ProtoPet)
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&definitionid_, 0, reinterpret_cast<char*>(&sleeprefitemid_) -
      reinterpret_cast<char*>(&definitionid_) + sizeof(sleeprefitemid_));
  }
  if (_has_bits_[8 / 32] & 768u) {
    ::memset(&lasthungrydate_, 0, reinterpret_cast<char*>(&sleepdate_) -
      reinterpret_cast<char*>(&lasthungrydate_) + sizeof(sleepdate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProtoPet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WakfuProto.ProtoPet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 definitionId = 1;
      case 1: {
        if (tag == 8u) {
          set_has_definitionid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &definitionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WakfuProto.ProtoPet.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 colorItemRefId = 3;
      case 3: {
        if (tag == 24u) {
          set_has_coloritemrefid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coloritemrefid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 equippedRefItemId = 4;
      case 4: {
        if (tag == 32u) {
          set_has_equippedrefitemid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equippedrefitemid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 health = 5;
      case 5: {
        if (tag == 40u) {
          set_has_health();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &health_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 xp = 6;
      case 6: {
        if (tag == 48u) {
          set_has_xp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 lastMealDate = 7;
      case 7: {
        if (tag == 56u) {
          set_has_lastmealdate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lastmealdate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 lastHungryDate = 8;
      case 8: {
        if (tag == 64u) {
          set_has_lasthungrydate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lasthungrydate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 sleepRefItemId = 9;
      case 9: {
        if (tag == 72u) {
          set_has_sleeprefitemid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sleeprefitemid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 sleepdate = 10;
      case 10: {
        if (tag == 80u) {
          set_has_sleepdate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sleepdate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WakfuProto.ProtoPet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WakfuProto.ProtoPet)
  return false;
#undef DO_
}

void ProtoPet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WakfuProto.ProtoPet)
  // required int32 definitionId = 1;
  if (has_definitionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->definitionid(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WakfuProto.ProtoPet.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required int32 colorItemRefId = 3;
  if (has_coloritemrefid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->coloritemrefid(), output);
  }

  // required int32 equippedRefItemId = 4;
  if (has_equippedrefitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->equippedrefitemid(), output);
  }

  // required int32 health = 5;
  if (has_health()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->health(), output);
  }

  // required int32 xp = 6;
  if (has_xp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->xp(), output);
  }

  // required int64 lastMealDate = 7;
  if (has_lastmealdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->lastmealdate(), output);
  }

  // required int64 lastHungryDate = 8;
  if (has_lasthungrydate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->lasthungrydate(), output);
  }

  // required int32 sleepRefItemId = 9;
  if (has_sleeprefitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->sleeprefitemid(), output);
  }

  // required int64 sleepdate = 10;
  if (has_sleepdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->sleepdate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WakfuProto.ProtoPet)
}

::google::protobuf::uint8* ProtoPet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WakfuProto.ProtoPet)
  // required int32 definitionId = 1;
  if (has_definitionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->definitionid(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WakfuProto.ProtoPet.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required int32 colorItemRefId = 3;
  if (has_coloritemrefid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->coloritemrefid(), target);
  }

  // required int32 equippedRefItemId = 4;
  if (has_equippedrefitemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->equippedrefitemid(), target);
  }

  // required int32 health = 5;
  if (has_health()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->health(), target);
  }

  // required int32 xp = 6;
  if (has_xp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->xp(), target);
  }

  // required int64 lastMealDate = 7;
  if (has_lastmealdate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->lastmealdate(), target);
  }

  // required int64 lastHungryDate = 8;
  if (has_lasthungrydate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->lasthungrydate(), target);
  }

  // required int32 sleepRefItemId = 9;
  if (has_sleeprefitemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->sleeprefitemid(), target);
  }

  // required int64 sleepdate = 10;
  if (has_sleepdate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->sleepdate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WakfuProto.ProtoPet)
  return target;
}

size_t ProtoPet::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:WakfuProto.ProtoPet)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_definitionid()) {
    // required int32 definitionId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->definitionid());
  }

  if (has_coloritemrefid()) {
    // required int32 colorItemRefId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->coloritemrefid());
  }

  if (has_equippedrefitemid()) {
    // required int32 equippedRefItemId = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->equippedrefitemid());
  }

  if (has_health()) {
    // required int32 health = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->health());
  }

  if (has_lastmealdate()) {
    // required int64 lastMealDate = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->lastmealdate());
  }

  if (has_xp()) {
    // required int32 xp = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->xp());
  }

  if (has_sleeprefitemid()) {
    // required int32 sleepRefItemId = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sleeprefitemid());
  }

  if (has_lasthungrydate()) {
    // required int64 lastHungryDate = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->lasthungrydate());
  }

  if (has_sleepdate()) {
    // required int64 sleepdate = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sleepdate());
  }

  return total_size;
}
size_t ProtoPet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WakfuProto.ProtoPet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x000003ff) ^ 0x000003ff) == 0) {  // All required fields are present.
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required int32 definitionId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->definitionid());

    // required int32 colorItemRefId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->coloritemrefid());

    // required int32 equippedRefItemId = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->equippedrefitemid());

    // required int32 health = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->health());

    // required int64 lastMealDate = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->lastmealdate());

    // required int32 xp = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->xp());

    // required int32 sleepRefItemId = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sleeprefitemid());

    // required int64 lastHungryDate = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->lasthungrydate());

    // required int64 sleepdate = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sleepdate());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoPet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WakfuProto.ProtoPet)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoPet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtoPet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WakfuProto.ProtoPet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WakfuProto.ProtoPet)
    MergeFrom(*source);
  }
}

void ProtoPet::MergeFrom(const ProtoPet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WakfuProto.ProtoPet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_definitionid()) {
      set_definitionid(from.definitionid());
    }
    if (from.has_coloritemrefid()) {
      set_coloritemrefid(from.coloritemrefid());
    }
    if (from.has_equippedrefitemid()) {
      set_equippedrefitemid(from.equippedrefitemid());
    }
    if (from.has_health()) {
      set_health(from.health());
    }
    if (from.has_lastmealdate()) {
      set_lastmealdate(from.lastmealdate());
    }
    if (from.has_xp()) {
      set_xp(from.xp());
    }
    if (from.has_sleeprefitemid()) {
      set_sleeprefitemid(from.sleeprefitemid());
    }
  }
  if (from._has_bits_[8 / 32] & 768u) {
    if (from.has_lasthungrydate()) {
      set_lasthungrydate(from.lasthungrydate());
    }
    if (from.has_sleepdate()) {
      set_sleepdate(from.sleepdate());
    }
  }
}

void ProtoPet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WakfuProto.ProtoPet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoPet::CopyFrom(const ProtoPet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WakfuProto.ProtoPet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoPet::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;
  return true;
}

void ProtoPet::Swap(ProtoPet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoPet::InternalSwap(ProtoPet* other) {
  name_.Swap(&other->name_);
  std::swap(definitionid_, other->definitionid_);
  std::swap(coloritemrefid_, other->coloritemrefid_);
  std::swap(equippedrefitemid_, other->equippedrefitemid_);
  std::swap(health_, other->health_);
  std::swap(lastmealdate_, other->lastmealdate_);
  std::swap(xp_, other->xp_);
  std::swap(sleeprefitemid_, other->sleeprefitemid_);
  std::swap(lasthungrydate_, other->lasthungrydate_);
  std::swap(sleepdate_, other->sleepdate_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProtoPet::GetMetadata() const {
  protobuf_item_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_item_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProtoPet

// required int32 definitionId = 1;
bool ProtoPet::has_definitionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ProtoPet::set_has_definitionid() {
  _has_bits_[0] |= 0x00000002u;
}
void ProtoPet::clear_has_definitionid() {
  _has_bits_[0] &= ~0x00000002u;
}
void ProtoPet::clear_definitionid() {
  definitionid_ = 0;
  clear_has_definitionid();
}
::google::protobuf::int32 ProtoPet::definitionid() const {
  // @@protoc_insertion_point(field_get:WakfuProto.ProtoPet.definitionId)
  return definitionid_;
}
void ProtoPet::set_definitionid(::google::protobuf::int32 value) {
  set_has_definitionid();
  definitionid_ = value;
  // @@protoc_insertion_point(field_set:WakfuProto.ProtoPet.definitionId)
}

// required string name = 2;
bool ProtoPet::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ProtoPet::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ProtoPet::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ProtoPet::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& ProtoPet::name() const {
  // @@protoc_insertion_point(field_get:WakfuProto.ProtoPet.name)
  return name_.GetNoArena();
}
void ProtoPet::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WakfuProto.ProtoPet.name)
}
#if LANG_CXX11
void ProtoPet::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:WakfuProto.ProtoPet.name)
}
#endif
void ProtoPet::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WakfuProto.ProtoPet.name)
}
void ProtoPet::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WakfuProto.ProtoPet.name)
}
::std::string* ProtoPet::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:WakfuProto.ProtoPet.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProtoPet::release_name() {
  // @@protoc_insertion_point(field_release:WakfuProto.ProtoPet.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProtoPet::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:WakfuProto.ProtoPet.name)
}

// required int32 colorItemRefId = 3;
bool ProtoPet::has_coloritemrefid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ProtoPet::set_has_coloritemrefid() {
  _has_bits_[0] |= 0x00000004u;
}
void ProtoPet::clear_has_coloritemrefid() {
  _has_bits_[0] &= ~0x00000004u;
}
void ProtoPet::clear_coloritemrefid() {
  coloritemrefid_ = 0;
  clear_has_coloritemrefid();
}
::google::protobuf::int32 ProtoPet::coloritemrefid() const {
  // @@protoc_insertion_point(field_get:WakfuProto.ProtoPet.colorItemRefId)
  return coloritemrefid_;
}
void ProtoPet::set_coloritemrefid(::google::protobuf::int32 value) {
  set_has_coloritemrefid();
  coloritemrefid_ = value;
  // @@protoc_insertion_point(field_set:WakfuProto.ProtoPet.colorItemRefId)
}

// required int32 equippedRefItemId = 4;
bool ProtoPet::has_equippedrefitemid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ProtoPet::set_has_equippedrefitemid() {
  _has_bits_[0] |= 0x00000008u;
}
void ProtoPet::clear_has_equippedrefitemid() {
  _has_bits_[0] &= ~0x00000008u;
}
void ProtoPet::clear_equippedrefitemid() {
  equippedrefitemid_ = 0;
  clear_has_equippedrefitemid();
}
::google::protobuf::int32 ProtoPet::equippedrefitemid() const {
  // @@protoc_insertion_point(field_get:WakfuProto.ProtoPet.equippedRefItemId)
  return equippedrefitemid_;
}
void ProtoPet::set_equippedrefitemid(::google::protobuf::int32 value) {
  set_has_equippedrefitemid();
  equippedrefitemid_ = value;
  // @@protoc_insertion_point(field_set:WakfuProto.ProtoPet.equippedRefItemId)
}

// required int32 health = 5;
bool ProtoPet::has_health() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ProtoPet::set_has_health() {
  _has_bits_[0] |= 0x00000010u;
}
void ProtoPet::clear_has_health() {
  _has_bits_[0] &= ~0x00000010u;
}
void ProtoPet::clear_health() {
  health_ = 0;
  clear_has_health();
}
::google::protobuf::int32 ProtoPet::health() const {
  // @@protoc_insertion_point(field_get:WakfuProto.ProtoPet.health)
  return health_;
}
void ProtoPet::set_health(::google::protobuf::int32 value) {
  set_has_health();
  health_ = value;
  // @@protoc_insertion_point(field_set:WakfuProto.ProtoPet.health)
}

// required int32 xp = 6;
bool ProtoPet::has_xp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ProtoPet::set_has_xp() {
  _has_bits_[0] |= 0x00000040u;
}
void ProtoPet::clear_has_xp() {
  _has_bits_[0] &= ~0x00000040u;
}
void ProtoPet::clear_xp() {
  xp_ = 0;
  clear_has_xp();
}
::google::protobuf::int32 ProtoPet::xp() const {
  // @@protoc_insertion_point(field_get:WakfuProto.ProtoPet.xp)
  return xp_;
}
void ProtoPet::set_xp(::google::protobuf::int32 value) {
  set_has_xp();
  xp_ = value;
  // @@protoc_insertion_point(field_set:WakfuProto.ProtoPet.xp)
}

// required int64 lastMealDate = 7;
bool ProtoPet::has_lastmealdate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ProtoPet::set_has_lastmealdate() {
  _has_bits_[0] |= 0x00000020u;
}
void ProtoPet::clear_has_lastmealdate() {
  _has_bits_[0] &= ~0x00000020u;
}
void ProtoPet::clear_lastmealdate() {
  lastmealdate_ = GOOGLE_LONGLONG(0);
  clear_has_lastmealdate();
}
::google::protobuf::int64 ProtoPet::lastmealdate() const {
  // @@protoc_insertion_point(field_get:WakfuProto.ProtoPet.lastMealDate)
  return lastmealdate_;
}
void ProtoPet::set_lastmealdate(::google::protobuf::int64 value) {
  set_has_lastmealdate();
  lastmealdate_ = value;
  // @@protoc_insertion_point(field_set:WakfuProto.ProtoPet.lastMealDate)
}

// required int64 lastHungryDate = 8;
bool ProtoPet::has_lasthungrydate() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ProtoPet::set_has_lasthungrydate() {
  _has_bits_[0] |= 0x00000100u;
}
void ProtoPet::clear_has_lasthungrydate() {
  _has_bits_[0] &= ~0x00000100u;
}
void ProtoPet::clear_lasthungrydate() {
  lasthungrydate_ = GOOGLE_LONGLONG(0);
  clear_has_lasthungrydate();
}
::google::protobuf::int64 ProtoPet::lasthungrydate() const {
  // @@protoc_insertion_point(field_get:WakfuProto.ProtoPet.lastHungryDate)
  return lasthungrydate_;
}
void ProtoPet::set_lasthungrydate(::google::protobuf::int64 value) {
  set_has_lasthungrydate();
  lasthungrydate_ = value;
  // @@protoc_insertion_point(field_set:WakfuProto.ProtoPet.lastHungryDate)
}

// required int32 sleepRefItemId = 9;
bool ProtoPet::has_sleeprefitemid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ProtoPet::set_has_sleeprefitemid() {
  _has_bits_[0] |= 0x00000080u;
}
void ProtoPet::clear_has_sleeprefitemid() {
  _has_bits_[0] &= ~0x00000080u;
}
void ProtoPet::clear_sleeprefitemid() {
  sleeprefitemid_ = 0;
  clear_has_sleeprefitemid();
}
::google::protobuf::int32 ProtoPet::sleeprefitemid() const {
  // @@protoc_insertion_point(field_get:WakfuProto.ProtoPet.sleepRefItemId)
  return sleeprefitemid_;
}
void ProtoPet::set_sleeprefitemid(::google::protobuf::int32 value) {
  set_has_sleeprefitemid();
  sleeprefitemid_ = value;
  // @@protoc_insertion_point(field_set:WakfuProto.ProtoPet.sleepRefItemId)
}

// required int64 sleepdate = 10;
bool ProtoPet::has_sleepdate() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ProtoPet::set_has_sleepdate() {
  _has_bits_[0] |= 0x00000200u;
}
void ProtoPet::clear_has_sleepdate() {
  _has_bits_[0] &= ~0x00000200u;
}
void ProtoPet::clear_sleepdate() {
  sleepdate_ = GOOGLE_LONGLONG(0);
  clear_has_sleepdate();
}
::google::protobuf::int64 ProtoPet::sleepdate() const {
  // @@protoc_insertion_point(field_get:WakfuProto.ProtoPet.sleepdate)
  return sleepdate_;
}
void ProtoPet::set_sleepdate(::google::protobuf::int64 value) {
  set_has_sleepdate();
  sleepdate_ = value;
  // @@protoc_insertion_point(field_set:WakfuProto.ProtoPet.sleepdate)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoItemXp::kDefinitionIdFieldNumber;
const int ProtoItemXp::kItemXpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoItemXp::ProtoItemXp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_item_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WakfuProto.ProtoItemXp)
}
ProtoItemXp::ProtoItemXp(const ProtoItemXp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&itemxp_, &from.itemxp_,
    reinterpret_cast<char*>(&definitionid_) -
    reinterpret_cast<char*>(&itemxp_) + sizeof(definitionid_));
  // @@protoc_insertion_point(copy_constructor:WakfuProto.ProtoItemXp)
}

void ProtoItemXp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&itemxp_, 0, reinterpret_cast<char*>(&definitionid_) -
    reinterpret_cast<char*>(&itemxp_) + sizeof(definitionid_));
}

ProtoItemXp::~ProtoItemXp() {
  // @@protoc_insertion_point(destructor:WakfuProto.ProtoItemXp)
  SharedDtor();
}

void ProtoItemXp::SharedDtor() {
}

void ProtoItemXp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoItemXp::descriptor() {
  protobuf_item_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_item_2eproto::file_level_metadata[2].descriptor;
}

const ProtoItemXp& ProtoItemXp::default_instance() {
  protobuf_item_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProtoItemXp* ProtoItemXp::New(::google::protobuf::Arena* arena) const {
  ProtoItemXp* n = new ProtoItemXp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtoItemXp::Clear() {
// @@protoc_insertion_point(message_clear_start:WakfuProto.ProtoItemXp)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&itemxp_, 0, reinterpret_cast<char*>(&definitionid_) -
      reinterpret_cast<char*>(&itemxp_) + sizeof(definitionid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProtoItemXp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WakfuProto.ProtoItemXp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 definitionId = 1;
      case 1: {
        if (tag == 8u) {
          set_has_definitionid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &definitionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 itemXp = 2;
      case 2: {
        if (tag == 16u) {
          set_has_itemxp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &itemxp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WakfuProto.ProtoItemXp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WakfuProto.ProtoItemXp)
  return false;
#undef DO_
}

void ProtoItemXp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WakfuProto.ProtoItemXp)
  // required int32 definitionId = 1;
  if (has_definitionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->definitionid(), output);
  }

  // required int64 itemXp = 2;
  if (has_itemxp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->itemxp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WakfuProto.ProtoItemXp)
}

::google::protobuf::uint8* ProtoItemXp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WakfuProto.ProtoItemXp)
  // required int32 definitionId = 1;
  if (has_definitionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->definitionid(), target);
  }

  // required int64 itemXp = 2;
  if (has_itemxp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->itemxp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WakfuProto.ProtoItemXp)
  return target;
}

size_t ProtoItemXp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:WakfuProto.ProtoItemXp)
  size_t total_size = 0;

  if (has_itemxp()) {
    // required int64 itemXp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->itemxp());
  }

  if (has_definitionid()) {
    // required int32 definitionId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->definitionid());
  }

  return total_size;
}
size_t ProtoItemXp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WakfuProto.ProtoItemXp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 itemXp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->itemxp());

    // required int32 definitionId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->definitionid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoItemXp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WakfuProto.ProtoItemXp)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoItemXp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtoItemXp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WakfuProto.ProtoItemXp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WakfuProto.ProtoItemXp)
    MergeFrom(*source);
  }
}

void ProtoItemXp::MergeFrom(const ProtoItemXp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WakfuProto.ProtoItemXp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_itemxp()) {
      set_itemxp(from.itemxp());
    }
    if (from.has_definitionid()) {
      set_definitionid(from.definitionid());
    }
  }
}

void ProtoItemXp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WakfuProto.ProtoItemXp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoItemXp::CopyFrom(const ProtoItemXp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WakfuProto.ProtoItemXp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoItemXp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ProtoItemXp::Swap(ProtoItemXp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoItemXp::InternalSwap(ProtoItemXp* other) {
  std::swap(itemxp_, other->itemxp_);
  std::swap(definitionid_, other->definitionid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProtoItemXp::GetMetadata() const {
  protobuf_item_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_item_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProtoItemXp

// required int32 definitionId = 1;
bool ProtoItemXp::has_definitionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ProtoItemXp::set_has_definitionid() {
  _has_bits_[0] |= 0x00000002u;
}
void ProtoItemXp::clear_has_definitionid() {
  _has_bits_[0] &= ~0x00000002u;
}
void ProtoItemXp::clear_definitionid() {
  definitionid_ = 0;
  clear_has_definitionid();
}
::google::protobuf::int32 ProtoItemXp::definitionid() const {
  // @@protoc_insertion_point(field_get:WakfuProto.ProtoItemXp.definitionId)
  return definitionid_;
}
void ProtoItemXp::set_definitionid(::google::protobuf::int32 value) {
  set_has_definitionid();
  definitionid_ = value;
  // @@protoc_insertion_point(field_set:WakfuProto.ProtoItemXp.definitionId)
}

// required int64 itemXp = 2;
bool ProtoItemXp::has_itemxp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ProtoItemXp::set_has_itemxp() {
  _has_bits_[0] |= 0x00000001u;
}
void ProtoItemXp::clear_has_itemxp() {
  _has_bits_[0] &= ~0x00000001u;
}
void ProtoItemXp::clear_itemxp() {
  itemxp_ = GOOGLE_LONGLONG(0);
  clear_has_itemxp();
}
::google::protobuf::int64 ProtoItemXp::itemxp() const {
  // @@protoc_insertion_point(field_get:WakfuProto.ProtoItemXp.itemXp)
  return itemxp_;
}
void ProtoItemXp::set_itemxp(::google::protobuf::int64 value) {
  set_has_itemxp();
  itemxp_ = value;
  // @@protoc_insertion_point(field_set:WakfuProto.ProtoItemXp.itemXp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoGems_ProtoGem::kPositionFieldNumber;
const int ProtoGems_ProtoGem::kRefIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoGems_ProtoGem::ProtoGems_ProtoGem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_item_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WakfuProto.ProtoGems.ProtoGem)
}
ProtoGems_ProtoGem::ProtoGems_ProtoGem(const ProtoGems_ProtoGem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&position_, &from.position_,
    reinterpret_cast<char*>(&refid_) -
    reinterpret_cast<char*>(&position_) + sizeof(refid_));
  // @@protoc_insertion_point(copy_constructor:WakfuProto.ProtoGems.ProtoGem)
}

void ProtoGems_ProtoGem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&position_, 0, reinterpret_cast<char*>(&refid_) -
    reinterpret_cast<char*>(&position_) + sizeof(refid_));
}

ProtoGems_ProtoGem::~ProtoGems_ProtoGem() {
  // @@protoc_insertion_point(destructor:WakfuProto.ProtoGems.ProtoGem)
  SharedDtor();
}

void ProtoGems_ProtoGem::SharedDtor() {
}

void ProtoGems_ProtoGem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoGems_ProtoGem::descriptor() {
  protobuf_item_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_item_2eproto::file_level_metadata[3].descriptor;
}

const ProtoGems_ProtoGem& ProtoGems_ProtoGem::default_instance() {
  protobuf_item_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProtoGems_ProtoGem* ProtoGems_ProtoGem::New(::google::protobuf::Arena* arena) const {
  ProtoGems_ProtoGem* n = new ProtoGems_ProtoGem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtoGems_ProtoGem::Clear() {
// @@protoc_insertion_point(message_clear_start:WakfuProto.ProtoGems.ProtoGem)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&position_, 0, reinterpret_cast<char*>(&refid_) -
      reinterpret_cast<char*>(&position_) + sizeof(refid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProtoGems_ProtoGem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WakfuProto.ProtoGems.ProtoGem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 position = 10;
      case 10: {
        if (tag == 80u) {
          set_has_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 refId = 11;
      case 11: {
        if (tag == 88u) {
          set_has_refid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WakfuProto.ProtoGems.ProtoGem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WakfuProto.ProtoGems.ProtoGem)
  return false;
#undef DO_
}

void ProtoGems_ProtoGem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WakfuProto.ProtoGems.ProtoGem)
  // required int32 position = 10;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->position(), output);
  }

  // required int32 refId = 11;
  if (has_refid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->refid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WakfuProto.ProtoGems.ProtoGem)
}

::google::protobuf::uint8* ProtoGems_ProtoGem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WakfuProto.ProtoGems.ProtoGem)
  // required int32 position = 10;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->position(), target);
  }

  // required int32 refId = 11;
  if (has_refid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->refid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WakfuProto.ProtoGems.ProtoGem)
  return target;
}

size_t ProtoGems_ProtoGem::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:WakfuProto.ProtoGems.ProtoGem)
  size_t total_size = 0;

  if (has_position()) {
    // required int32 position = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->position());
  }

  if (has_refid()) {
    // required int32 refId = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->refid());
  }

  return total_size;
}
size_t ProtoGems_ProtoGem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WakfuProto.ProtoGems.ProtoGem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 position = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->position());

    // required int32 refId = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->refid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoGems_ProtoGem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WakfuProto.ProtoGems.ProtoGem)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoGems_ProtoGem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtoGems_ProtoGem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WakfuProto.ProtoGems.ProtoGem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WakfuProto.ProtoGems.ProtoGem)
    MergeFrom(*source);
  }
}

void ProtoGems_ProtoGem::MergeFrom(const ProtoGems_ProtoGem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WakfuProto.ProtoGems.ProtoGem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_refid()) {
      set_refid(from.refid());
    }
  }
}

void ProtoGems_ProtoGem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WakfuProto.ProtoGems.ProtoGem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoGems_ProtoGem::CopyFrom(const ProtoGems_ProtoGem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WakfuProto.ProtoGems.ProtoGem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoGems_ProtoGem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ProtoGems_ProtoGem::Swap(ProtoGems_ProtoGem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoGems_ProtoGem::InternalSwap(ProtoGems_ProtoGem* other) {
  std::swap(position_, other->position_);
  std::swap(refid_, other->refid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProtoGems_ProtoGem::GetMetadata() const {
  protobuf_item_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_item_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProtoGems_ProtoGem

// required int32 position = 10;
bool ProtoGems_ProtoGem::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ProtoGems_ProtoGem::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
void ProtoGems_ProtoGem::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
void ProtoGems_ProtoGem::clear_position() {
  position_ = 0;
  clear_has_position();
}
::google::protobuf::int32 ProtoGems_ProtoGem::position() const {
  // @@protoc_insertion_point(field_get:WakfuProto.ProtoGems.ProtoGem.position)
  return position_;
}
void ProtoGems_ProtoGem::set_position(::google::protobuf::int32 value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:WakfuProto.ProtoGems.ProtoGem.position)
}

// required int32 refId = 11;
bool ProtoGems_ProtoGem::has_refid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ProtoGems_ProtoGem::set_has_refid() {
  _has_bits_[0] |= 0x00000002u;
}
void ProtoGems_ProtoGem::clear_has_refid() {
  _has_bits_[0] &= ~0x00000002u;
}
void ProtoGems_ProtoGem::clear_refid() {
  refid_ = 0;
  clear_has_refid();
}
::google::protobuf::int32 ProtoGems_ProtoGem::refid() const {
  // @@protoc_insertion_point(field_get:WakfuProto.ProtoGems.ProtoGem.refId)
  return refid_;
}
void ProtoGems_ProtoGem::set_refid(::google::protobuf::int32 value) {
  set_has_refid();
  refid_ = value;
  // @@protoc_insertion_point(field_set:WakfuProto.ProtoGems.ProtoGem.refId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoGems::kGemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoGems::ProtoGems()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_item_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WakfuProto.ProtoGems)
}
ProtoGems::ProtoGems(const ProtoGems& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      gems_(from.gems_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:WakfuProto.ProtoGems)
}

void ProtoGems::SharedCtor() {
  _cached_size_ = 0;
}

ProtoGems::~ProtoGems() {
  // @@protoc_insertion_point(destructor:WakfuProto.ProtoGems)
  SharedDtor();
}

void ProtoGems::SharedDtor() {
}

void ProtoGems::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoGems::descriptor() {
  protobuf_item_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_item_2eproto::file_level_metadata[4].descriptor;
}

const ProtoGems& ProtoGems::default_instance() {
  protobuf_item_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProtoGems* ProtoGems::New(::google::protobuf::Arena* arena) const {
  ProtoGems* n = new ProtoGems;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtoGems::Clear() {
// @@protoc_insertion_point(message_clear_start:WakfuProto.ProtoGems)
  gems_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProtoGems::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WakfuProto.ProtoGems)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .WakfuProto.ProtoGems.ProtoGem gems = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_gems()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WakfuProto.ProtoGems)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WakfuProto.ProtoGems)
  return false;
#undef DO_
}

void ProtoGems::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WakfuProto.ProtoGems)
  // repeated .WakfuProto.ProtoGems.ProtoGem gems = 1;
  for (unsigned int i = 0, n = this->gems_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gems(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WakfuProto.ProtoGems)
}

::google::protobuf::uint8* ProtoGems::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WakfuProto.ProtoGems)
  // repeated .WakfuProto.ProtoGems.ProtoGem gems = 1;
  for (unsigned int i = 0, n = this->gems_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->gems(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WakfuProto.ProtoGems)
  return target;
}

size_t ProtoGems::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WakfuProto.ProtoGems)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .WakfuProto.ProtoGems.ProtoGem gems = 1;
  {
    unsigned int count = this->gems_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gems(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoGems::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WakfuProto.ProtoGems)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoGems* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtoGems>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WakfuProto.ProtoGems)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WakfuProto.ProtoGems)
    MergeFrom(*source);
  }
}

void ProtoGems::MergeFrom(const ProtoGems& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WakfuProto.ProtoGems)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gems_.MergeFrom(from.gems_);
}

void ProtoGems::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WakfuProto.ProtoGems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoGems::CopyFrom(const ProtoGems& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WakfuProto.ProtoGems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoGems::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->gems())) return false;
  return true;
}

void ProtoGems::Swap(ProtoGems* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoGems::InternalSwap(ProtoGems* other) {
  gems_.UnsafeArenaSwap(&other->gems_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProtoGems::GetMetadata() const {
  protobuf_item_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_item_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProtoGems

// repeated .WakfuProto.ProtoGems.ProtoGem gems = 1;
int ProtoGems::gems_size() const {
  return gems_.size();
}
void ProtoGems::clear_gems() {
  gems_.Clear();
}
const ::WakfuProto::ProtoGems_ProtoGem& ProtoGems::gems(int index) const {
  // @@protoc_insertion_point(field_get:WakfuProto.ProtoGems.gems)
  return gems_.Get(index);
}
::WakfuProto::ProtoGems_ProtoGem* ProtoGems::mutable_gems(int index) {
  // @@protoc_insertion_point(field_mutable:WakfuProto.ProtoGems.gems)
  return gems_.Mutable(index);
}
::WakfuProto::ProtoGems_ProtoGem* ProtoGems::add_gems() {
  // @@protoc_insertion_point(field_add:WakfuProto.ProtoGems.gems)
  return gems_.Add();
}
::google::protobuf::RepeatedPtrField< ::WakfuProto::ProtoGems_ProtoGem >*
ProtoGems::mutable_gems() {
  // @@protoc_insertion_point(field_mutable_list:WakfuProto.ProtoGems.gems)
  return &gems_;
}
const ::google::protobuf::RepeatedPtrField< ::WakfuProto::ProtoGems_ProtoGem >&
ProtoGems::gems() const {
  // @@protoc_insertion_point(field_list:WakfuProto.ProtoGems.gems)
  return gems_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoRentInfo::kTypeFieldNumber;
const int ProtoRentInfo::kDurationFieldNumber;
const int ProtoRentInfo::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoRentInfo::ProtoRentInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_item_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WakfuProto.ProtoRentInfo)
}
ProtoRentInfo::ProtoRentInfo(const ProtoRentInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&duration_, &from.duration_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&duration_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:WakfuProto.ProtoRentInfo)
}

void ProtoRentInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&duration_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&duration_) + sizeof(type_));
}

ProtoRentInfo::~ProtoRentInfo() {
  // @@protoc_insertion_point(destructor:WakfuProto.ProtoRentInfo)
  SharedDtor();
}

void ProtoRentInfo::SharedDtor() {
}

void ProtoRentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoRentInfo::descriptor() {
  protobuf_item_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_item_2eproto::file_level_metadata[5].descriptor;
}

const ProtoRentInfo& ProtoRentInfo::default_instance() {
  protobuf_item_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProtoRentInfo* ProtoRentInfo::New(::google::protobuf::Arena* arena) const {
  ProtoRentInfo* n = new ProtoRentInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtoRentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:WakfuProto.ProtoRentInfo)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&duration_, 0, reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&duration_) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProtoRentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WakfuProto.ProtoRentInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (tag == 8u) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 duration = 2;
      case 2: {
        if (tag == 16u) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 count = 3;
      case 3: {
        if (tag == 24u) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WakfuProto.ProtoRentInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WakfuProto.ProtoRentInfo)
  return false;
#undef DO_
}

void ProtoRentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WakfuProto.ProtoRentInfo)
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int64 duration = 2;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->duration(), output);
  }

  // required int64 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WakfuProto.ProtoRentInfo)
}

::google::protobuf::uint8* ProtoRentInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WakfuProto.ProtoRentInfo)
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int64 duration = 2;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->duration(), target);
  }

  // required int64 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WakfuProto.ProtoRentInfo)
  return target;
}

size_t ProtoRentInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:WakfuProto.ProtoRentInfo)
  size_t total_size = 0;

  if (has_duration()) {
    // required int64 duration = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->duration());
  }

  if (has_count()) {
    // required int64 count = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->count());
  }

  if (has_type()) {
    // required int32 type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  return total_size;
}
size_t ProtoRentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WakfuProto.ProtoRentInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int64 duration = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->duration());

    // required int64 count = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->count());

    // required int32 type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoRentInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WakfuProto.ProtoRentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoRentInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtoRentInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WakfuProto.ProtoRentInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WakfuProto.ProtoRentInfo)
    MergeFrom(*source);
  }
}

void ProtoRentInfo::MergeFrom(const ProtoRentInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WakfuProto.ProtoRentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
}

void ProtoRentInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WakfuProto.ProtoRentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoRentInfo::CopyFrom(const ProtoRentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WakfuProto.ProtoRentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoRentInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void ProtoRentInfo::Swap(ProtoRentInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoRentInfo::InternalSwap(ProtoRentInfo* other) {
  std::swap(duration_, other->duration_);
  std::swap(count_, other->count_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProtoRentInfo::GetMetadata() const {
  protobuf_item_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_item_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProtoRentInfo

// required int32 type = 1;
bool ProtoRentInfo::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ProtoRentInfo::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void ProtoRentInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void ProtoRentInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
::google::protobuf::int32 ProtoRentInfo::type() const {
  // @@protoc_insertion_point(field_get:WakfuProto.ProtoRentInfo.type)
  return type_;
}
void ProtoRentInfo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:WakfuProto.ProtoRentInfo.type)
}

// required int64 duration = 2;
bool ProtoRentInfo::has_duration() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ProtoRentInfo::set_has_duration() {
  _has_bits_[0] |= 0x00000001u;
}
void ProtoRentInfo::clear_has_duration() {
  _has_bits_[0] &= ~0x00000001u;
}
void ProtoRentInfo::clear_duration() {
  duration_ = GOOGLE_LONGLONG(0);
  clear_has_duration();
}
::google::protobuf::int64 ProtoRentInfo::duration() const {
  // @@protoc_insertion_point(field_get:WakfuProto.ProtoRentInfo.duration)
  return duration_;
}
void ProtoRentInfo::set_duration(::google::protobuf::int64 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:WakfuProto.ProtoRentInfo.duration)
}

// required int64 count = 3;
bool ProtoRentInfo::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ProtoRentInfo::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
void ProtoRentInfo::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void ProtoRentInfo::clear_count() {
  count_ = GOOGLE_LONGLONG(0);
  clear_has_count();
}
::google::protobuf::int64 ProtoRentInfo::count() const {
  // @@protoc_insertion_point(field_get:WakfuProto.ProtoRentInfo.count)
  return count_;
}
void ProtoRentInfo::set_count(::google::protobuf::int64 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:WakfuProto.ProtoRentInfo.count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoCompanionInfo::kXpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoCompanionInfo::ProtoCompanionInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_item_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WakfuProto.ProtoCompanionInfo)
}
ProtoCompanionInfo::ProtoCompanionInfo(const ProtoCompanionInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  xp_ = from.xp_;
  // @@protoc_insertion_point(copy_constructor:WakfuProto.ProtoCompanionInfo)
}

void ProtoCompanionInfo::SharedCtor() {
  _cached_size_ = 0;
  xp_ = GOOGLE_LONGLONG(0);
}

ProtoCompanionInfo::~ProtoCompanionInfo() {
  // @@protoc_insertion_point(destructor:WakfuProto.ProtoCompanionInfo)
  SharedDtor();
}

void ProtoCompanionInfo::SharedDtor() {
}

void ProtoCompanionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoCompanionInfo::descriptor() {
  protobuf_item_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_item_2eproto::file_level_metadata[6].descriptor;
}

const ProtoCompanionInfo& ProtoCompanionInfo::default_instance() {
  protobuf_item_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProtoCompanionInfo* ProtoCompanionInfo::New(::google::protobuf::Arena* arena) const {
  ProtoCompanionInfo* n = new ProtoCompanionInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtoCompanionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:WakfuProto.ProtoCompanionInfo)
  xp_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProtoCompanionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WakfuProto.ProtoCompanionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 xp = 1;
      case 1: {
        if (tag == 8u) {
          set_has_xp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &xp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WakfuProto.ProtoCompanionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WakfuProto.ProtoCompanionInfo)
  return false;
#undef DO_
}

void ProtoCompanionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WakfuProto.ProtoCompanionInfo)
  // required int64 xp = 1;
  if (has_xp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->xp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WakfuProto.ProtoCompanionInfo)
}

::google::protobuf::uint8* ProtoCompanionInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WakfuProto.ProtoCompanionInfo)
  // required int64 xp = 1;
  if (has_xp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->xp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WakfuProto.ProtoCompanionInfo)
  return target;
}

size_t ProtoCompanionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WakfuProto.ProtoCompanionInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required int64 xp = 1;
  if (has_xp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->xp());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoCompanionInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WakfuProto.ProtoCompanionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoCompanionInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtoCompanionInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WakfuProto.ProtoCompanionInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WakfuProto.ProtoCompanionInfo)
    MergeFrom(*source);
  }
}

void ProtoCompanionInfo::MergeFrom(const ProtoCompanionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WakfuProto.ProtoCompanionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_xp()) {
    set_xp(from.xp());
  }
}

void ProtoCompanionInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WakfuProto.ProtoCompanionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoCompanionInfo::CopyFrom(const ProtoCompanionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WakfuProto.ProtoCompanionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoCompanionInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ProtoCompanionInfo::Swap(ProtoCompanionInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoCompanionInfo::InternalSwap(ProtoCompanionInfo* other) {
  std::swap(xp_, other->xp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProtoCompanionInfo::GetMetadata() const {
  protobuf_item_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_item_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProtoCompanionInfo

// required int64 xp = 1;
bool ProtoCompanionInfo::has_xp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ProtoCompanionInfo::set_has_xp() {
  _has_bits_[0] |= 0x00000001u;
}
void ProtoCompanionInfo::clear_has_xp() {
  _has_bits_[0] &= ~0x00000001u;
}
void ProtoCompanionInfo::clear_xp() {
  xp_ = GOOGLE_LONGLONG(0);
  clear_has_xp();
}
::google::protobuf::int64 ProtoCompanionInfo::xp() const {
  // @@protoc_insertion_point(field_get:WakfuProto.ProtoCompanionInfo.xp)
  return xp_;
}
void ProtoCompanionInfo::set_xp(::google::protobuf::int64 value) {
  set_has_xp();
  xp_ = value;
  // @@protoc_insertion_point(field_set:WakfuProto.ProtoCompanionInfo.xp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoItemBind::kTypeFieldNumber;
const int ProtoItemBind::kAppliedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoItemBind::ProtoItemBind()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_item_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WakfuProto.ProtoItemBind)
}
ProtoItemBind::ProtoItemBind(const ProtoItemBind& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&applied_) -
    reinterpret_cast<char*>(&type_) + sizeof(applied_));
  // @@protoc_insertion_point(copy_constructor:WakfuProto.ProtoItemBind)
}

void ProtoItemBind::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&type_, 0, reinterpret_cast<char*>(&applied_) -
    reinterpret_cast<char*>(&type_) + sizeof(applied_));
}

ProtoItemBind::~ProtoItemBind() {
  // @@protoc_insertion_point(destructor:WakfuProto.ProtoItemBind)
  SharedDtor();
}

void ProtoItemBind::SharedDtor() {
}

void ProtoItemBind::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoItemBind::descriptor() {
  protobuf_item_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_item_2eproto::file_level_metadata[7].descriptor;
}

const ProtoItemBind& ProtoItemBind::default_instance() {
  protobuf_item_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProtoItemBind* ProtoItemBind::New(::google::protobuf::Arena* arena) const {
  ProtoItemBind* n = new ProtoItemBind;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtoItemBind::Clear() {
// @@protoc_insertion_point(message_clear_start:WakfuProto.ProtoItemBind)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&type_, 0, reinterpret_cast<char*>(&applied_) -
      reinterpret_cast<char*>(&type_) + sizeof(applied_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProtoItemBind::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WakfuProto.ProtoItemBind)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (tag == 8u) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool applied = 2;
      case 2: {
        if (tag == 16u) {
          set_has_applied();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &applied_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WakfuProto.ProtoItemBind)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WakfuProto.ProtoItemBind)
  return false;
#undef DO_
}

void ProtoItemBind::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WakfuProto.ProtoItemBind)
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required bool applied = 2;
  if (has_applied()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->applied(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WakfuProto.ProtoItemBind)
}

::google::protobuf::uint8* ProtoItemBind::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WakfuProto.ProtoItemBind)
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required bool applied = 2;
  if (has_applied()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->applied(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WakfuProto.ProtoItemBind)
  return target;
}

size_t ProtoItemBind::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:WakfuProto.ProtoItemBind)
  size_t total_size = 0;

  if (has_type()) {
    // required int32 type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_applied()) {
    // required bool applied = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t ProtoItemBind::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WakfuProto.ProtoItemBind)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required bool applied = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoItemBind::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WakfuProto.ProtoItemBind)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoItemBind* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtoItemBind>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WakfuProto.ProtoItemBind)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WakfuProto.ProtoItemBind)
    MergeFrom(*source);
  }
}

void ProtoItemBind::MergeFrom(const ProtoItemBind& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WakfuProto.ProtoItemBind)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_applied()) {
      set_applied(from.applied());
    }
  }
}

void ProtoItemBind::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WakfuProto.ProtoItemBind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoItemBind::CopyFrom(const ProtoItemBind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WakfuProto.ProtoItemBind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoItemBind::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ProtoItemBind::Swap(ProtoItemBind* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoItemBind::InternalSwap(ProtoItemBind* other) {
  std::swap(type_, other->type_);
  std::swap(applied_, other->applied_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProtoItemBind::GetMetadata() const {
  protobuf_item_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_item_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProtoItemBind

// required int32 type = 1;
bool ProtoItemBind::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ProtoItemBind::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void ProtoItemBind::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void ProtoItemBind::clear_type() {
  type_ = 0;
  clear_has_type();
}
::google::protobuf::int32 ProtoItemBind::type() const {
  // @@protoc_insertion_point(field_get:WakfuProto.ProtoItemBind.type)
  return type_;
}
void ProtoItemBind::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:WakfuProto.ProtoItemBind.type)
}

// required bool applied = 2;
bool ProtoItemBind::has_applied() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ProtoItemBind::set_has_applied() {
  _has_bits_[0] |= 0x00000002u;
}
void ProtoItemBind::clear_has_applied() {
  _has_bits_[0] &= ~0x00000002u;
}
void ProtoItemBind::clear_applied() {
  applied_ = false;
  clear_has_applied();
}
bool ProtoItemBind::applied() const {
  // @@protoc_insertion_point(field_get:WakfuProto.ProtoItemBind.applied)
  return applied_;
}
void ProtoItemBind::set_applied(bool value) {
  set_has_applied();
  applied_ = value;
  // @@protoc_insertion_point(field_set:WakfuProto.ProtoItemBind.applied)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoItemElements::kDamageElementsFieldNumber;
const int ProtoItemElements::kResistanceElementsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoItemElements::ProtoItemElements()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_item_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WakfuProto.ProtoItemElements)
}
ProtoItemElements::ProtoItemElements(const ProtoItemElements& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&damageelements_, &from.damageelements_,
    reinterpret_cast<char*>(&resistanceelements_) -
    reinterpret_cast<char*>(&damageelements_) + sizeof(resistanceelements_));
  // @@protoc_insertion_point(copy_constructor:WakfuProto.ProtoItemElements)
}

void ProtoItemElements::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&damageelements_, 0, reinterpret_cast<char*>(&resistanceelements_) -
    reinterpret_cast<char*>(&damageelements_) + sizeof(resistanceelements_));
}

ProtoItemElements::~ProtoItemElements() {
  // @@protoc_insertion_point(destructor:WakfuProto.ProtoItemElements)
  SharedDtor();
}

void ProtoItemElements::SharedDtor() {
}

void ProtoItemElements::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoItemElements::descriptor() {
  protobuf_item_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_item_2eproto::file_level_metadata[8].descriptor;
}

const ProtoItemElements& ProtoItemElements::default_instance() {
  protobuf_item_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProtoItemElements* ProtoItemElements::New(::google::protobuf::Arena* arena) const {
  ProtoItemElements* n = new ProtoItemElements;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtoItemElements::Clear() {
// @@protoc_insertion_point(message_clear_start:WakfuProto.ProtoItemElements)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&damageelements_, 0, reinterpret_cast<char*>(&resistanceelements_) -
      reinterpret_cast<char*>(&damageelements_) + sizeof(resistanceelements_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProtoItemElements::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WakfuProto.ProtoItemElements)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 damageElements = 1;
      case 1: {
        if (tag == 8u) {
          set_has_damageelements();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damageelements_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 resistanceElements = 2;
      case 2: {
        if (tag == 16u) {
          set_has_resistanceelements();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resistanceelements_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WakfuProto.ProtoItemElements)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WakfuProto.ProtoItemElements)
  return false;
#undef DO_
}

void ProtoItemElements::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WakfuProto.ProtoItemElements)
  // required int32 damageElements = 1;
  if (has_damageelements()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->damageelements(), output);
  }

  // required int32 resistanceElements = 2;
  if (has_resistanceelements()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->resistanceelements(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WakfuProto.ProtoItemElements)
}

::google::protobuf::uint8* ProtoItemElements::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WakfuProto.ProtoItemElements)
  // required int32 damageElements = 1;
  if (has_damageelements()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->damageelements(), target);
  }

  // required int32 resistanceElements = 2;
  if (has_resistanceelements()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->resistanceelements(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WakfuProto.ProtoItemElements)
  return target;
}

size_t ProtoItemElements::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:WakfuProto.ProtoItemElements)
  size_t total_size = 0;

  if (has_damageelements()) {
    // required int32 damageElements = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->damageelements());
  }

  if (has_resistanceelements()) {
    // required int32 resistanceElements = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->resistanceelements());
  }

  return total_size;
}
size_t ProtoItemElements::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WakfuProto.ProtoItemElements)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 damageElements = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->damageelements());

    // required int32 resistanceElements = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->resistanceelements());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoItemElements::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WakfuProto.ProtoItemElements)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoItemElements* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtoItemElements>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WakfuProto.ProtoItemElements)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WakfuProto.ProtoItemElements)
    MergeFrom(*source);
  }
}

void ProtoItemElements::MergeFrom(const ProtoItemElements& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WakfuProto.ProtoItemElements)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_damageelements()) {
      set_damageelements(from.damageelements());
    }
    if (from.has_resistanceelements()) {
      set_resistanceelements(from.resistanceelements());
    }
  }
}

void ProtoItemElements::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WakfuProto.ProtoItemElements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoItemElements::CopyFrom(const ProtoItemElements& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WakfuProto.ProtoItemElements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoItemElements::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ProtoItemElements::Swap(ProtoItemElements* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoItemElements::InternalSwap(ProtoItemElements* other) {
  std::swap(damageelements_, other->damageelements_);
  std::swap(resistanceelements_, other->resistanceelements_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProtoItemElements::GetMetadata() const {
  protobuf_item_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_item_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProtoItemElements

// required int32 damageElements = 1;
bool ProtoItemElements::has_damageelements() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ProtoItemElements::set_has_damageelements() {
  _has_bits_[0] |= 0x00000001u;
}
void ProtoItemElements::clear_has_damageelements() {
  _has_bits_[0] &= ~0x00000001u;
}
void ProtoItemElements::clear_damageelements() {
  damageelements_ = 0;
  clear_has_damageelements();
}
::google::protobuf::int32 ProtoItemElements::damageelements() const {
  // @@protoc_insertion_point(field_get:WakfuProto.ProtoItemElements.damageElements)
  return damageelements_;
}
void ProtoItemElements::set_damageelements(::google::protobuf::int32 value) {
  set_has_damageelements();
  damageelements_ = value;
  // @@protoc_insertion_point(field_set:WakfuProto.ProtoItemElements.damageElements)
}

// required int32 resistanceElements = 2;
bool ProtoItemElements::has_resistanceelements() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ProtoItemElements::set_has_resistanceelements() {
  _has_bits_[0] |= 0x00000002u;
}
void ProtoItemElements::clear_has_resistanceelements() {
  _has_bits_[0] &= ~0x00000002u;
}
void ProtoItemElements::clear_resistanceelements() {
  resistanceelements_ = 0;
  clear_has_resistanceelements();
}
::google::protobuf::int32 ProtoItemElements::resistanceelements() const {
  // @@protoc_insertion_point(field_get:WakfuProto.ProtoItemElements.resistanceElements)
  return resistanceelements_;
}
void ProtoItemElements::set_resistanceelements(::google::protobuf::int32 value) {
  set_has_resistanceelements();
  resistanceelements_ = value;
  // @@protoc_insertion_point(field_set:WakfuProto.ProtoItemElements.resistanceElements)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoMergedItems::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoMergedItems::ProtoMergedItems()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_item_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WakfuProto.ProtoMergedItems)
}
ProtoMergedItems::ProtoMergedItems(const ProtoMergedItems& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      items_(from.items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:WakfuProto.ProtoMergedItems)
}

void ProtoMergedItems::SharedCtor() {
  _cached_size_ = 0;
}

ProtoMergedItems::~ProtoMergedItems() {
  // @@protoc_insertion_point(destructor:WakfuProto.ProtoMergedItems)
  SharedDtor();
}

void ProtoMergedItems::SharedDtor() {
}

void ProtoMergedItems::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoMergedItems::descriptor() {
  protobuf_item_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_item_2eproto::file_level_metadata[9].descriptor;
}

const ProtoMergedItems& ProtoMergedItems::default_instance() {
  protobuf_item_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProtoMergedItems* ProtoMergedItems::New(::google::protobuf::Arena* arena) const {
  ProtoMergedItems* n = new ProtoMergedItems;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtoMergedItems::Clear() {
// @@protoc_insertion_point(message_clear_start:WakfuProto.ProtoMergedItems)
  items_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProtoMergedItems::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WakfuProto.ProtoMergedItems)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .WakfuProto.ProtoItem items = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WakfuProto.ProtoMergedItems)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WakfuProto.ProtoMergedItems)
  return false;
#undef DO_
}

void ProtoMergedItems::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WakfuProto.ProtoMergedItems)
  // repeated .WakfuProto.ProtoItem items = 1;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WakfuProto.ProtoMergedItems)
}

::google::protobuf::uint8* ProtoMergedItems::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WakfuProto.ProtoMergedItems)
  // repeated .WakfuProto.ProtoItem items = 1;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->items(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WakfuProto.ProtoMergedItems)
  return target;
}

size_t ProtoMergedItems::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WakfuProto.ProtoMergedItems)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .WakfuProto.ProtoItem items = 1;
  {
    unsigned int count = this->items_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoMergedItems::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WakfuProto.ProtoMergedItems)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoMergedItems* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtoMergedItems>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WakfuProto.ProtoMergedItems)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WakfuProto.ProtoMergedItems)
    MergeFrom(*source);
  }
}

void ProtoMergedItems::MergeFrom(const ProtoMergedItems& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WakfuProto.ProtoMergedItems)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  items_.MergeFrom(from.items_);
}

void ProtoMergedItems::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WakfuProto.ProtoMergedItems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoMergedItems::CopyFrom(const ProtoMergedItems& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WakfuProto.ProtoMergedItems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoMergedItems::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  return true;
}

void ProtoMergedItems::Swap(ProtoMergedItems* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoMergedItems::InternalSwap(ProtoMergedItems* other) {
  items_.UnsafeArenaSwap(&other->items_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProtoMergedItems::GetMetadata() const {
  protobuf_item_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_item_2eproto::file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProtoMergedItems

// repeated .WakfuProto.ProtoItem items = 1;
int ProtoMergedItems::items_size() const {
  return items_.size();
}
void ProtoMergedItems::clear_items() {
  items_.Clear();
}
const ::WakfuProto::ProtoItem& ProtoMergedItems::items(int index) const {
  // @@protoc_insertion_point(field_get:WakfuProto.ProtoMergedItems.items)
  return items_.Get(index);
}
::WakfuProto::ProtoItem* ProtoMergedItems::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:WakfuProto.ProtoMergedItems.items)
  return items_.Mutable(index);
}
::WakfuProto::ProtoItem* ProtoMergedItems::add_items() {
  // @@protoc_insertion_point(field_add:WakfuProto.ProtoMergedItems.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::WakfuProto::ProtoItem >*
ProtoMergedItems::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:WakfuProto.ProtoMergedItems.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::WakfuProto::ProtoItem >&
ProtoMergedItems::items() const {
  // @@protoc_insertion_point(field_list:WakfuProto.ProtoMergedItems.items)
  return items_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoBagItem::kItemFieldNumber;
const int ProtoBagItem::kPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoBagItem::ProtoBagItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_item_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WakfuProto.ProtoBagItem)
}
ProtoBagItem::ProtoBagItem(const ProtoBagItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_item()) {
    item_ = new ::WakfuProto::ProtoItem(*from.item_);
  } else {
    item_ = NULL;
  }
  position_ = from.position_;
  // @@protoc_insertion_point(copy_constructor:WakfuProto.ProtoBagItem)
}

void ProtoBagItem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&item_, 0, reinterpret_cast<char*>(&position_) -
    reinterpret_cast<char*>(&item_) + sizeof(position_));
}

ProtoBagItem::~ProtoBagItem() {
  // @@protoc_insertion_point(destructor:WakfuProto.ProtoBagItem)
  SharedDtor();
}

void ProtoBagItem::SharedDtor() {
  if (this != internal_default_instance()) {
    delete item_;
  }
}

void ProtoBagItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoBagItem::descriptor() {
  protobuf_item_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_item_2eproto::file_level_metadata[10].descriptor;
}

const ProtoBagItem& ProtoBagItem::default_instance() {
  protobuf_item_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProtoBagItem* ProtoBagItem::New(::google::protobuf::Arena* arena) const {
  ProtoBagItem* n = new ProtoBagItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtoBagItem::Clear() {
// @@protoc_insertion_point(message_clear_start:WakfuProto.ProtoBagItem)
  if (has_item()) {
    GOOGLE_DCHECK(item_ != NULL);
    item_->::WakfuProto::ProtoItem::Clear();
  }
  position_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProtoBagItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WakfuProto.ProtoBagItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .WakfuProto.ProtoItem item = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 position = 2;
      case 2: {
        if (tag == 16u) {
          set_has_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WakfuProto.ProtoBagItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WakfuProto.ProtoBagItem)
  return false;
#undef DO_
}

void ProtoBagItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WakfuProto.ProtoBagItem)
  // required .WakfuProto.ProtoItem item = 1;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->item_, output);
  }

  // required int32 position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->position(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WakfuProto.ProtoBagItem)
}

::google::protobuf::uint8* ProtoBagItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WakfuProto.ProtoBagItem)
  // required .WakfuProto.ProtoItem item = 1;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->item_, false, target);
  }

  // required int32 position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->position(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WakfuProto.ProtoBagItem)
  return target;
}

size_t ProtoBagItem::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:WakfuProto.ProtoBagItem)
  size_t total_size = 0;

  if (has_item()) {
    // required .WakfuProto.ProtoItem item = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->item_);
  }

  if (has_position()) {
    // required int32 position = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->position());
  }

  return total_size;
}
size_t ProtoBagItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WakfuProto.ProtoBagItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .WakfuProto.ProtoItem item = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->item_);

    // required int32 position = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->position());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoBagItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WakfuProto.ProtoBagItem)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoBagItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtoBagItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WakfuProto.ProtoBagItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WakfuProto.ProtoBagItem)
    MergeFrom(*source);
  }
}

void ProtoBagItem::MergeFrom(const ProtoBagItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WakfuProto.ProtoBagItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_item()) {
      mutable_item()->::WakfuProto::ProtoItem::MergeFrom(from.item());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
  }
}

void ProtoBagItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WakfuProto.ProtoBagItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoBagItem::CopyFrom(const ProtoBagItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WakfuProto.ProtoBagItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoBagItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_item()) {
    if (!this->item_->IsInitialized()) return false;
  }
  return true;
}

void ProtoBagItem::Swap(ProtoBagItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoBagItem::InternalSwap(ProtoBagItem* other) {
  std::swap(item_, other->item_);
  std::swap(position_, other->position_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProtoBagItem::GetMetadata() const {
  protobuf_item_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_item_2eproto::file_level_metadata[10];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProtoBagItem

// required .WakfuProto.ProtoItem item = 1;
bool ProtoBagItem::has_item() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ProtoBagItem::set_has_item() {
  _has_bits_[0] |= 0x00000001u;
}
void ProtoBagItem::clear_has_item() {
  _has_bits_[0] &= ~0x00000001u;
}
void ProtoBagItem::clear_item() {
  if (item_ != NULL) item_->::WakfuProto::ProtoItem::Clear();
  clear_has_item();
}
const ::WakfuProto::ProtoItem& ProtoBagItem::item() const {
  // @@protoc_insertion_point(field_get:WakfuProto.ProtoBagItem.item)
  return item_ != NULL ? *item_
                         : *::WakfuProto::ProtoItem::internal_default_instance();
}
::WakfuProto::ProtoItem* ProtoBagItem::mutable_item() {
  set_has_item();
  if (item_ == NULL) {
    item_ = new ::WakfuProto::ProtoItem;
  }
  // @@protoc_insertion_point(field_mutable:WakfuProto.ProtoBagItem.item)
  return item_;
}
::WakfuProto::ProtoItem* ProtoBagItem::release_item() {
  // @@protoc_insertion_point(field_release:WakfuProto.ProtoBagItem.item)
  clear_has_item();
  ::WakfuProto::ProtoItem* temp = item_;
  item_ = NULL;
  return temp;
}
void ProtoBagItem::set_allocated_item(::WakfuProto::ProtoItem* item) {
  delete item_;
  item_ = item;
  if (item) {
    set_has_item();
  } else {
    clear_has_item();
  }
  // @@protoc_insertion_point(field_set_allocated:WakfuProto.ProtoBagItem.item)
}

// required int32 position = 2;
bool ProtoBagItem::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ProtoBagItem::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
void ProtoBagItem::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
void ProtoBagItem::clear_position() {
  position_ = 0;
  clear_has_position();
}
::google::protobuf::int32 ProtoBagItem::position() const {
  // @@protoc_insertion_point(field_get:WakfuProto.ProtoBagItem.position)
  return position_;
}
void ProtoBagItem::set_position(::google::protobuf::int32 value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:WakfuProto.ProtoBagItem.position)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoBag::kUniqueIdFieldNumber;
const int ProtoBag::kRefIdFieldNumber;
const int ProtoBag::kPositionFieldNumber;
const int ProtoBag::kMaxSizeFieldNumber;
const int ProtoBag::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoBag::ProtoBag()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_item_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WakfuProto.ProtoBag)
}
ProtoBag::ProtoBag(const ProtoBag& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      items_(from.items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&uniqueid_, &from.uniqueid_,
    reinterpret_cast<char*>(&maxsize_) -
    reinterpret_cast<char*>(&uniqueid_) + sizeof(maxsize_));
  // @@protoc_insertion_point(copy_constructor:WakfuProto.ProtoBag)
}

void ProtoBag::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&uniqueid_, 0, reinterpret_cast<char*>(&maxsize_) -
    reinterpret_cast<char*>(&uniqueid_) + sizeof(maxsize_));
}

ProtoBag::~ProtoBag() {
  // @@protoc_insertion_point(destructor:WakfuProto.ProtoBag)
  SharedDtor();
}

void ProtoBag::SharedDtor() {
}

void ProtoBag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoBag::descriptor() {
  protobuf_item_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_item_2eproto::file_level_metadata[11].descriptor;
}

const ProtoBag& ProtoBag::default_instance() {
  protobuf_item_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProtoBag* ProtoBag::New(::google::protobuf::Arena* arena) const {
  ProtoBag* n = new ProtoBag;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtoBag::Clear() {
// @@protoc_insertion_point(message_clear_start:WakfuProto.ProtoBag)
  items_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&uniqueid_, 0, reinterpret_cast<char*>(&maxsize_) -
      reinterpret_cast<char*>(&uniqueid_) + sizeof(maxsize_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProtoBag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WakfuProto.ProtoBag)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uniqueId = 1;
      case 1: {
        if (tag == 8u) {
          set_has_uniqueid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uniqueid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 refId = 2;
      case 2: {
        if (tag == 16u) {
          set_has_refid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 position = 3;
      case 3: {
        if (tag == 24u) {
          set_has_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 maxSize = 5;
      case 5: {
        if (tag == 40u) {
          set_has_maxsize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .WakfuProto.ProtoBagItem items = 6;
      case 6: {
        if (tag == 50u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WakfuProto.ProtoBag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WakfuProto.ProtoBag)
  return false;
#undef DO_
}

void ProtoBag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WakfuProto.ProtoBag)
  // required int64 uniqueId = 1;
  if (has_uniqueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uniqueid(), output);
  }

  // required int32 refId = 2;
  if (has_refid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->refid(), output);
  }

  // required int32 position = 3;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->position(), output);
  }

  // required int32 maxSize = 5;
  if (has_maxsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->maxsize(), output);
  }

  // repeated .WakfuProto.ProtoBagItem items = 6;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->items(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WakfuProto.ProtoBag)
}

::google::protobuf::uint8* ProtoBag::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WakfuProto.ProtoBag)
  // required int64 uniqueId = 1;
  if (has_uniqueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uniqueid(), target);
  }

  // required int32 refId = 2;
  if (has_refid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->refid(), target);
  }

  // required int32 position = 3;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->position(), target);
  }

  // required int32 maxSize = 5;
  if (has_maxsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->maxsize(), target);
  }

  // repeated .WakfuProto.ProtoBagItem items = 6;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->items(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WakfuProto.ProtoBag)
  return target;
}

size_t ProtoBag::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:WakfuProto.ProtoBag)
  size_t total_size = 0;

  if (has_uniqueid()) {
    // required int64 uniqueId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uniqueid());
  }

  if (has_refid()) {
    // required int32 refId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->refid());
  }

  if (has_position()) {
    // required int32 position = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->position());
  }

  if (has_maxsize()) {
    // required int32 maxSize = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->maxsize());
  }

  return total_size;
}
size_t ProtoBag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WakfuProto.ProtoBag)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int64 uniqueId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uniqueid());

    // required int32 refId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->refid());

    // required int32 position = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->position());

    // required int32 maxSize = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->maxsize());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .WakfuProto.ProtoBagItem items = 6;
  {
    unsigned int count = this->items_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoBag::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WakfuProto.ProtoBag)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoBag* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtoBag>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WakfuProto.ProtoBag)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WakfuProto.ProtoBag)
    MergeFrom(*source);
  }
}

void ProtoBag::MergeFrom(const ProtoBag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WakfuProto.ProtoBag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_uniqueid()) {
      set_uniqueid(from.uniqueid());
    }
    if (from.has_refid()) {
      set_refid(from.refid());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_maxsize()) {
      set_maxsize(from.maxsize());
    }
  }
}

void ProtoBag::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WakfuProto.ProtoBag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoBag::CopyFrom(const ProtoBag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WakfuProto.ProtoBag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoBag::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  return true;
}

void ProtoBag::Swap(ProtoBag* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoBag::InternalSwap(ProtoBag* other) {
  items_.UnsafeArenaSwap(&other->items_);
  std::swap(uniqueid_, other->uniqueid_);
  std::swap(refid_, other->refid_);
  std::swap(position_, other->position_);
  std::swap(maxsize_, other->maxsize_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProtoBag::GetMetadata() const {
  protobuf_item_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_item_2eproto::file_level_metadata[11];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProtoBag

// required int64 uniqueId = 1;
bool ProtoBag::has_uniqueid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ProtoBag::set_has_uniqueid() {
  _has_bits_[0] |= 0x00000001u;
}
void ProtoBag::clear_has_uniqueid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ProtoBag::clear_uniqueid() {
  uniqueid_ = GOOGLE_LONGLONG(0);
  clear_has_uniqueid();
}
::google::protobuf::int64 ProtoBag::uniqueid() const {
  // @@protoc_insertion_point(field_get:WakfuProto.ProtoBag.uniqueId)
  return uniqueid_;
}
void ProtoBag::set_uniqueid(::google::protobuf::int64 value) {
  set_has_uniqueid();
  uniqueid_ = value;
  // @@protoc_insertion_point(field_set:WakfuProto.ProtoBag.uniqueId)
}

// required int32 refId = 2;
bool ProtoBag::has_refid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ProtoBag::set_has_refid() {
  _has_bits_[0] |= 0x00000002u;
}
void ProtoBag::clear_has_refid() {
  _has_bits_[0] &= ~0x00000002u;
}
void ProtoBag::clear_refid() {
  refid_ = 0;
  clear_has_refid();
}
::google::protobuf::int32 ProtoBag::refid() const {
  // @@protoc_insertion_point(field_get:WakfuProto.ProtoBag.refId)
  return refid_;
}
void ProtoBag::set_refid(::google::protobuf::int32 value) {
  set_has_refid();
  refid_ = value;
  // @@protoc_insertion_point(field_set:WakfuProto.ProtoBag.refId)
}

// required int32 position = 3;
bool ProtoBag::has_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ProtoBag::set_has_position() {
  _has_bits_[0] |= 0x00000004u;
}
void ProtoBag::clear_has_position() {
  _has_bits_[0] &= ~0x00000004u;
}
void ProtoBag::clear_position() {
  position_ = 0;
  clear_has_position();
}
::google::protobuf::int32 ProtoBag::position() const {
  // @@protoc_insertion_point(field_get:WakfuProto.ProtoBag.position)
  return position_;
}
void ProtoBag::set_position(::google::protobuf::int32 value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:WakfuProto.ProtoBag.position)
}

// required int32 maxSize = 5;
bool ProtoBag::has_maxsize() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ProtoBag::set_has_maxsize() {
  _has_bits_[0] |= 0x00000008u;
}
void ProtoBag::clear_has_maxsize() {
  _has_bits_[0] &= ~0x00000008u;
}
void ProtoBag::clear_maxsize() {
  maxsize_ = 0;
  clear_has_maxsize();
}
::google::protobuf::int32 ProtoBag::maxsize() const {
  // @@protoc_insertion_point(field_get:WakfuProto.ProtoBag.maxSize)
  return maxsize_;
}
void ProtoBag::set_maxsize(::google::protobuf::int32 value) {
  set_has_maxsize();
  maxsize_ = value;
  // @@protoc_insertion_point(field_set:WakfuProto.ProtoBag.maxSize)
}

// repeated .WakfuProto.ProtoBagItem items = 6;
int ProtoBag::items_size() const {
  return items_.size();
}
void ProtoBag::clear_items() {
  items_.Clear();
}
const ::WakfuProto::ProtoBagItem& ProtoBag::items(int index) const {
  // @@protoc_insertion_point(field_get:WakfuProto.ProtoBag.items)
  return items_.Get(index);
}
::WakfuProto::ProtoBagItem* ProtoBag::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:WakfuProto.ProtoBag.items)
  return items_.Mutable(index);
}
::WakfuProto::ProtoBagItem* ProtoBag::add_items() {
  // @@protoc_insertion_point(field_add:WakfuProto.ProtoBag.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::WakfuProto::ProtoBagItem >*
ProtoBag::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:WakfuProto.ProtoBag.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::WakfuProto::ProtoBagItem >&
ProtoBag::items() const {
  // @@protoc_insertion_point(field_list:WakfuProto.ProtoBag.items)
  return items_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoCharacterBags::kBagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoCharacterBags::ProtoCharacterBags()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_item_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WakfuProto.ProtoCharacterBags)
}
ProtoCharacterBags::ProtoCharacterBags(const ProtoCharacterBags& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      bags_(from.bags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:WakfuProto.ProtoCharacterBags)
}

void ProtoCharacterBags::SharedCtor() {
  _cached_size_ = 0;
}

ProtoCharacterBags::~ProtoCharacterBags() {
  // @@protoc_insertion_point(destructor:WakfuProto.ProtoCharacterBags)
  SharedDtor();
}

void ProtoCharacterBags::SharedDtor() {
}

void ProtoCharacterBags::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoCharacterBags::descriptor() {
  protobuf_item_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_item_2eproto::file_level_metadata[12].descriptor;
}

const ProtoCharacterBags& ProtoCharacterBags::default_instance() {
  protobuf_item_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProtoCharacterBags* ProtoCharacterBags::New(::google::protobuf::Arena* arena) const {
  ProtoCharacterBags* n = new ProtoCharacterBags;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtoCharacterBags::Clear() {
// @@protoc_insertion_point(message_clear_start:WakfuProto.ProtoCharacterBags)
  bags_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProtoCharacterBags::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WakfuProto.ProtoCharacterBags)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .WakfuProto.ProtoBag bags = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_bags()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WakfuProto.ProtoCharacterBags)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WakfuProto.ProtoCharacterBags)
  return false;
#undef DO_
}

void ProtoCharacterBags::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WakfuProto.ProtoCharacterBags)
  // repeated .WakfuProto.ProtoBag bags = 1;
  for (unsigned int i = 0, n = this->bags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bags(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WakfuProto.ProtoCharacterBags)
}

::google::protobuf::uint8* ProtoCharacterBags::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WakfuProto.ProtoCharacterBags)
  // repeated .WakfuProto.ProtoBag bags = 1;
  for (unsigned int i = 0, n = this->bags_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->bags(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WakfuProto.ProtoCharacterBags)
  return target;
}

size_t ProtoCharacterBags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WakfuProto.ProtoCharacterBags)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .WakfuProto.ProtoBag bags = 1;
  {
    unsigned int count = this->bags_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bags(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoCharacterBags::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WakfuProto.ProtoCharacterBags)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoCharacterBags* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtoCharacterBags>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WakfuProto.ProtoCharacterBags)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WakfuProto.ProtoCharacterBags)
    MergeFrom(*source);
  }
}

void ProtoCharacterBags::MergeFrom(const ProtoCharacterBags& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WakfuProto.ProtoCharacterBags)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bags_.MergeFrom(from.bags_);
}

void ProtoCharacterBags::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WakfuProto.ProtoCharacterBags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoCharacterBags::CopyFrom(const ProtoCharacterBags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WakfuProto.ProtoCharacterBags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoCharacterBags::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->bags())) return false;
  return true;
}

void ProtoCharacterBags::Swap(ProtoCharacterBags* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoCharacterBags::InternalSwap(ProtoCharacterBags* other) {
  bags_.UnsafeArenaSwap(&other->bags_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProtoCharacterBags::GetMetadata() const {
  protobuf_item_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_item_2eproto::file_level_metadata[12];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProtoCharacterBags

// repeated .WakfuProto.ProtoBag bags = 1;
int ProtoCharacterBags::bags_size() const {
  return bags_.size();
}
void ProtoCharacterBags::clear_bags() {
  bags_.Clear();
}
const ::WakfuProto::ProtoBag& ProtoCharacterBags::bags(int index) const {
  // @@protoc_insertion_point(field_get:WakfuProto.ProtoCharacterBags.bags)
  return bags_.Get(index);
}
::WakfuProto::ProtoBag* ProtoCharacterBags::mutable_bags(int index) {
  // @@protoc_insertion_point(field_mutable:WakfuProto.ProtoCharacterBags.bags)
  return bags_.Mutable(index);
}
::WakfuProto::ProtoBag* ProtoCharacterBags::add_bags() {
  // @@protoc_insertion_point(field_add:WakfuProto.ProtoCharacterBags.bags)
  return bags_.Add();
}
::google::protobuf::RepeatedPtrField< ::WakfuProto::ProtoBag >*
ProtoCharacterBags::mutable_bags() {
  // @@protoc_insertion_point(field_mutable_list:WakfuProto.ProtoCharacterBags.bags)
  return &bags_;
}
const ::google::protobuf::RepeatedPtrField< ::WakfuProto::ProtoBag >&
ProtoCharacterBags::bags() const {
  // @@protoc_insertion_point(field_list:WakfuProto.ProtoCharacterBags.bags)
  return bags_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoTemporaryInventory::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoTemporaryInventory::ProtoTemporaryInventory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_item_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WakfuProto.ProtoTemporaryInventory)
}
ProtoTemporaryInventory::ProtoTemporaryInventory(const ProtoTemporaryInventory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      items_(from.items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:WakfuProto.ProtoTemporaryInventory)
}

void ProtoTemporaryInventory::SharedCtor() {
  _cached_size_ = 0;
}

ProtoTemporaryInventory::~ProtoTemporaryInventory() {
  // @@protoc_insertion_point(destructor:WakfuProto.ProtoTemporaryInventory)
  SharedDtor();
}

void ProtoTemporaryInventory::SharedDtor() {
}

void ProtoTemporaryInventory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoTemporaryInventory::descriptor() {
  protobuf_item_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_item_2eproto::file_level_metadata[13].descriptor;
}

const ProtoTemporaryInventory& ProtoTemporaryInventory::default_instance() {
  protobuf_item_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProtoTemporaryInventory* ProtoTemporaryInventory::New(::google::protobuf::Arena* arena) const {
  ProtoTemporaryInventory* n = new ProtoTemporaryInventory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtoTemporaryInventory::Clear() {
// @@protoc_insertion_point(message_clear_start:WakfuProto.ProtoTemporaryInventory)
  items_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProtoTemporaryInventory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WakfuProto.ProtoTemporaryInventory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .WakfuProto.ProtoItem items = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WakfuProto.ProtoTemporaryInventory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WakfuProto.ProtoTemporaryInventory)
  return false;
#undef DO_
}

void ProtoTemporaryInventory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WakfuProto.ProtoTemporaryInventory)
  // repeated .WakfuProto.ProtoItem items = 1;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WakfuProto.ProtoTemporaryInventory)
}

::google::protobuf::uint8* ProtoTemporaryInventory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WakfuProto.ProtoTemporaryInventory)
  // repeated .WakfuProto.ProtoItem items = 1;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->items(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WakfuProto.ProtoTemporaryInventory)
  return target;
}

size_t ProtoTemporaryInventory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WakfuProto.ProtoTemporaryInventory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .WakfuProto.ProtoItem items = 1;
  {
    unsigned int count = this->items_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoTemporaryInventory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WakfuProto.ProtoTemporaryInventory)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoTemporaryInventory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtoTemporaryInventory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WakfuProto.ProtoTemporaryInventory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WakfuProto.ProtoTemporaryInventory)
    MergeFrom(*source);
  }
}

void ProtoTemporaryInventory::MergeFrom(const ProtoTemporaryInventory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WakfuProto.ProtoTemporaryInventory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  items_.MergeFrom(from.items_);
}

void ProtoTemporaryInventory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WakfuProto.ProtoTemporaryInventory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoTemporaryInventory::CopyFrom(const ProtoTemporaryInventory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WakfuProto.ProtoTemporaryInventory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoTemporaryInventory::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  return true;
}

void ProtoTemporaryInventory::Swap(ProtoTemporaryInventory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoTemporaryInventory::InternalSwap(ProtoTemporaryInventory* other) {
  items_.UnsafeArenaSwap(&other->items_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProtoTemporaryInventory::GetMetadata() const {
  protobuf_item_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_item_2eproto::file_level_metadata[13];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProtoTemporaryInventory

// repeated .WakfuProto.ProtoItem items = 1;
int ProtoTemporaryInventory::items_size() const {
  return items_.size();
}
void ProtoTemporaryInventory::clear_items() {
  items_.Clear();
}
const ::WakfuProto::ProtoItem& ProtoTemporaryInventory::items(int index) const {
  // @@protoc_insertion_point(field_get:WakfuProto.ProtoTemporaryInventory.items)
  return items_.Get(index);
}
::WakfuProto::ProtoItem* ProtoTemporaryInventory::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:WakfuProto.ProtoTemporaryInventory.items)
  return items_.Mutable(index);
}
::WakfuProto::ProtoItem* ProtoTemporaryInventory::add_items() {
  // @@protoc_insertion_point(field_add:WakfuProto.ProtoTemporaryInventory.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::WakfuProto::ProtoItem >*
ProtoTemporaryInventory::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:WakfuProto.ProtoTemporaryInventory.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::WakfuProto::ProtoItem >&
ProtoTemporaryInventory::items() const {
  // @@protoc_insertion_point(field_list:WakfuProto.ProtoTemporaryInventory.items)
  return items_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace WakfuProto

// @@protoc_insertion_point(global_scope)
